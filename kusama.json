[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "sequence": {
                  "type": 16
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 208,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 209,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "bifrost_kusama_runtime",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "pallet_indices::Event<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 32,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "parachain_staking::Event<Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "pallet_democracy::Event<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 48,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "pallet_elections_phragmen::Event<Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "CouncilMembership",
                      "fields": [
                        {
                          "type": 52,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance2>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 58,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 101,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 105,
                          "typeName": "pallet_proxy::Event<Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "pallet_multisig::Event<Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "pallet_identity::Event<Runtime>"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "pallet_vesting::Event<Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "pallet_treasury::Event<Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "pallet_bounties::Event<Runtime>"
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "type": 114,
                          "typeName": "pallet_tips::Event<Runtime>"
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "pallet_preimage::Event<Runtime>"
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "orml_xtokens::Event<Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "orml_tokens::Event<Runtime>"
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "UnknownTokens",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "orml_unknown_tokens::Event"
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "OrmlXcm",
                      "fields": [
                        {
                          "type": 121,
                          "typeName": "orml_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "ZenlinkProtocol",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "zenlink_protocol::Event<Runtime>"
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "MerkleDistributor",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "merkle_distributor::Event<Runtime>"
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "FlexibleFee",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "bifrost_flexible_fee::Event<Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Salp",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "bifrost_salp::Event<Runtime>"
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "LiquidityMiningDOT",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "bifrost_liquidity_mining::Event<Runtime, bifrost_liquidity_mining::\nInstance2>"
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "LiquidityMining",
                      "fields": [
                        {
                          "type": 137,
                          "typeName": "bifrost_liquidity_mining::Event<Runtime, bifrost_liquidity_mining::\nInstance1>"
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "TokenIssuer",
                      "fields": [
                        {
                          "type": 138,
                          "typeName": "bifrost_token_issuer::Event<Runtime>"
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "LighteningRedeem",
                      "fields": [
                        {
                          "type": 139,
                          "typeName": "bifrost_lightening_redeem::Event<Runtime>"
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "SalpLite",
                      "fields": [
                        {
                          "type": 140,
                          "typeName": "bifrost_salp_lite::Event<Runtime>"
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "CallSwitchgear",
                      "fields": [
                        {
                          "type": 141,
                          "typeName": "bifrost_call_switchgear::Event<Runtime>"
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "VSBondAuction",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "bifrost_vsbond_auction::Event<Runtime>"
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "type": 145,
                          "typeName": "bifrost_asset_registry::Event<Runtime>"
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "VtokenMinting",
                      "fields": [
                        {
                          "type": 148,
                          "typeName": "bifrost_vtoken_minting::Event<Runtime>"
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Slp",
                      "fields": [
                        {
                          "type": 150,
                          "typeName": "bifrost_slp::Event<Runtime>"
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "XcmInterface",
                      "fields": [
                        {
                          "type": 196,
                          "typeName": "xcm_interface::Event<Runtime>"
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "VstokenConversion",
                      "fields": [
                        {
                          "type": 198,
                          "typeName": "bifrost_vstoken_conversion::Event<Runtime>"
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Farming",
                      "fields": [
                        {
                          "type": 202,
                          "typeName": "bifrost_farming::Event<Runtime>"
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "SystemStaking",
                      "fields": [
                        {
                          "type": 205,
                          "typeName": "bifrost_system_staking::Event<Runtime>"
                        }
                      ],
                      "index": 120
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 22,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 23,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 24,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 14,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "index": 0
                    },
                    {
                      "name": "WouldDie",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IndexAssigned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A account index was assigned."
                      ]
                    },
                    {
                      "name": "IndexFreed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A account index has been freed up (unassigned)."
                      ]
                    },
                    {
                      "name": "IndexFrozen",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A account index has been frozen to its current account ID."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": "relay_chain_block_num",
                          "type": 4,
                          "typeName": "RelayChainBlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some downward messages have been received and will be processed."
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "name": "dmq_head",
                          "type": 9,
                          "typeName": "relay_chain::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward messages were processed using the given weight."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 30,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewRound",
                      "fields": [
                        {
                          "name": "starting_block",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        },
                        {
                          "name": "selected_collators_number",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "total_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Started new round."
                      ]
                    },
                    {
                      "name": "JoinedCollatorCandidates",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount_locked",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "new_total_amt_locked",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Account joined the set of collator candidates."
                      ]
                    },
                    {
                      "name": "CollatorChosen",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        },
                        {
                          "name": "collator_account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "total_exposed_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Candidate selected for collators. Total Exposed Amount includes all delegations."
                      ]
                    },
                    {
                      "name": "CandidateBondLessRequested",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount_to_decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "execute_round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Candidate requested to decrease a self bond."
                      ]
                    },
                    {
                      "name": "CandidateBondedMore",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "new_total_bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Candidate has increased a self bond."
                      ]
                    },
                    {
                      "name": "CandidateBondedLess",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "new_bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Candidate has decreased a self bond."
                      ]
                    },
                    {
                      "name": "CandidateWentOffline",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Candidate temporarily leave the set of collator candidates without unbonding."
                      ]
                    },
                    {
                      "name": "CandidateBackOnline",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Candidate rejoins the set of collator candidates."
                      ]
                    },
                    {
                      "name": "CandidateScheduledExit",
                      "fields": [
                        {
                          "name": "exit_allowed_round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "scheduled_exit",
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Candidate has requested to leave the set of candidates."
                      ]
                    },
                    {
                      "name": "CancelledCandidateExit",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Cancelled request to leave the set of candidates."
                      ]
                    },
                    {
                      "name": "CancelledCandidateBondLess",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "execute_round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancelled request to decrease candidate's bond."
                      ]
                    },
                    {
                      "name": "CandidateLeft",
                      "fields": [
                        {
                          "name": "ex_candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "unlocked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "new_total_amt_locked",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Candidate has left the set of candidates."
                      ]
                    },
                    {
                      "name": "DelegationDecreaseScheduled",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount_to_decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "execute_round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Delegator requested to decrease a bond for the collator candidate."
                      ]
                    },
                    {
                      "name": "DelegationIncreased",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "in_top",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DelegationDecreased",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "in_top",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "DelegatorExitScheduled",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        },
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "scheduled_exit",
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Delegator requested to leave the set of delegators."
                      ]
                    },
                    {
                      "name": "DelegationRevocationScheduled",
                      "fields": [
                        {
                          "name": "round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        },
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "scheduled_exit",
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Delegator requested to revoke delegation."
                      ]
                    },
                    {
                      "name": "DelegatorLeft",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Delegator has left the set of delegators."
                      ]
                    },
                    {
                      "name": "DelegationRevoked",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Delegation revoked."
                      ]
                    },
                    {
                      "name": "DelegationKicked",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Delegation kicked."
                      ]
                    },
                    {
                      "name": "DelegatorExitCancelled",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancelled a pending request to exit the set of delegators."
                      ]
                    },
                    {
                      "name": "CancelledDelegationRequest",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "cancelled_request",
                          "type": 35,
                          "typeName": "CancelledScheduledRequest<BalanceOf<T>>"
                        },
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Cancelled request to change an existing delegation."
                      ]
                    },
                    {
                      "name": "Delegation",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "locked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "delegator_position",
                          "type": 37,
                          "typeName": "DelegatorAdded<BalanceOf<T>>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "New delegation (increase of the existing one)."
                      ]
                    },
                    {
                      "name": "DelegatorLeftCandidate",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "unstaked_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total_candidate_staked",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Delegation from candidate state has been remove."
                      ]
                    },
                    {
                      "name": "Rewarded",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "rewards",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Paid the account (delegator or collator) the balance as liquid rewards."
                      ]
                    },
                    {
                      "name": "ReservedForParachainBond",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Transferred to account which holds funds reserved for parachain bond."
                      ]
                    },
                    {
                      "name": "ParachainBondAccountSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Account (re)set for parachain bond treasury."
                      ]
                    },
                    {
                      "name": "ParachainBondReservePercentSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 38,
                          "typeName": "Percent"
                        },
                        {
                          "name": "new",
                          "type": 38,
                          "typeName": "Percent"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Percent of inflation reserved for parachain bond (re)set."
                      ]
                    },
                    {
                      "name": "InflationSet",
                      "fields": [
                        {
                          "name": "annual_min",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "annual_ideal",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "annual_max",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "round_min",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "round_ideal",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "round_max",
                          "type": 39,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"
                      ]
                    },
                    {
                      "name": "StakeExpectationsSet",
                      "fields": [
                        {
                          "name": "expect_min",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "expect_ideal",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "expect_max",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Staking expectations set."
                      ]
                    },
                    {
                      "name": "TotalSelectedSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Set total selected candidates to this value."
                      ]
                    },
                    {
                      "name": "CollatorCommissionSet",
                      "fields": [
                        {
                          "name": "old",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "new",
                          "type": 39,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Set collator commission to this value."
                      ]
                    },
                    {
                      "name": "BlocksPerRoundSet",
                      "fields": [
                        {
                          "name": "current_round",
                          "type": 4,
                          "typeName": "RoundIndex"
                        },
                        {
                          "name": "first_block",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "old",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "new_per_round_inflation_min",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "new_per_round_inflation_ideal",
                          "type": 39,
                          "typeName": "Perbill"
                        },
                        {
                          "name": "new_per_round_inflation_max",
                          "type": 39,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Set blocks per round"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "parachain_staking",
                "delegation_requests",
                "CancelledScheduledRequest"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when_executable",
                      "type": 4,
                      "typeName": "RoundIndex"
                    },
                    {
                      "name": "action",
                      "type": 36,
                      "typeName": "DelegationAction<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "parachain_staking",
                "delegation_requests",
                "DelegationAction"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Revoke",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Decrease",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelegatorAdded"
              ],
              "params": [
                {
                  "name": "B",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddedToTop",
                      "fields": [
                        {
                          "name": "new_total",
                          "type": 6,
                          "typeName": "B"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AddedToBottom",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion has been proposed by a public account."
                      ]
                    },
                    {
                      "name": "Tabled",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "depositors",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A public proposal has been tabled for referendum vote."
                      ]
                    },
                    {
                      "name": "ExternalTabled",
                      "index": 2,
                      "docs": [
                        "An external proposal has been tabled."
                      ]
                    },
                    {
                      "name": "Started",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "threshold",
                          "type": 42,
                          "typeName": "VoteThreshold"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A referendum has begun."
                      ]
                    },
                    {
                      "name": "Passed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proposal has been approved by referendum."
                      ]
                    },
                    {
                      "name": "NotPassed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal has been rejected by referendum."
                      ]
                    },
                    {
                      "name": "Cancelled",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A referendum has been cancelled."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A proposal has been enacted."
                      ]
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account has delegated their vote to another account."
                      ]
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account has cancelled a previous delegation operation."
                      ]
                    },
                    {
                      "name": "Vetoed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "until",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An external proposal has been vetoed."
                      ]
                    },
                    {
                      "name": "PreimageNoted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A proposal's preimage was noted, and the deposit taken."
                      ]
                    },
                    {
                      "name": "PreimageUsed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A proposal preimage was removed and used (the deposit was returned)."
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A proposal could not be executed because its preimage was invalid."
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A proposal could not be executed because its preimage was missing."
                      ]
                    },
                    {
                      "name": "PreimageReaped",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "reaper",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A registered preimage was removed and the deposit collected by the reaper."
                      ]
                    },
                    {
                      "name": "Blacklisted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "A proposal_hash has been blacklisted permanently."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "vote",
                          "type": 45,
                          "typeName": "AccountVote<BalanceOf<T>>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An account has voted in a referendum"
                      ]
                    },
                    {
                      "name": "Seconded",
                      "fields": [
                        {
                          "name": "seconder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "An account has secconded a proposal"
                      ]
                    },
                    {
                      "name": "ProposalCanceled",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 4,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "A proposal got canceled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_democracy",
                "vote_threshold",
                "VoteThreshold"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SuperMajorityApprove",
                      "index": 0
                    },
                    {
                      "name": "SuperMajorityAgainst",
                      "index": 1
                    },
                    {
                      "name": "SimpleMajority",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 44
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 44
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 22
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 44,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "AccountVote"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Standard",
                      "fields": [
                        {
                          "name": "vote",
                          "type": 46,
                          "typeName": "Vote"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Split",
                      "fields": [
                        {
                          "name": "aye",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "nay",
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Vote"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTerm",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 50,
                          "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new term with new_members. This indicates that enough candidates existed to run",
                        "the election, not that enough have has been elected. The inner value must be examined",
                        "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                        "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                        "begin with."
                      ]
                    },
                    {
                      "name": "EmptyTerm",
                      "index": 1,
                      "docs": [
                        "No (or not enough) candidates existed for this round. This is different from",
                        "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                      ]
                    },
                    {
                      "name": "ElectionError",
                      "index": 2,
                      "docs": [
                        "Internal error happened while trying to perform election."
                      ]
                    },
                    {
                      "name": "MemberKicked",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A member has been removed. This should always be followed by either `NewTerm` or",
                        "`EmptyTerm`."
                      ]
                    },
                    {
                      "name": "Renounced",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Someone has renounced their candidacy."
                      ]
                    },
                    {
                      "name": "CandidateSlashed",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A candidate was slashed by amount due to failing to obtain a seat as member or",
                        "runner-up.",
                        "",
                        "Note that old members and runners-up are also candidates."
                      ]
                    },
                    {
                      "name": "SeatHolderSlashed",
                      "fields": [
                        {
                          "name": "seat_holder",
                          "type": 0,
                          "typeName": "<T as frame_system::Config>::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A seat holder was slashed by amount by being forcefully removed from the set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 50,
            "type": {
              "def": {
                "sequence": {
                  "type": 51
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 55,
                          "typeName": "Option<T::Hash>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some XCM was executed ok."
                      ]
                    },
                    {
                      "name": "Fail",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 55,
                          "typeName": "Option<T::Hash>"
                        },
                        {
                          "name": "error",
                          "type": 56,
                          "typeName": "XcmError"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some XCM failed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 55,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Bad XCM version used."
                      ]
                    },
                    {
                      "name": "BadFormat",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 55,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Bad XCM format used."
                      ]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 55,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An upward message was sent to the relay chain."
                      ]
                    },
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 55,
                          "typeName": "Option<T::Hash>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 57,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "sent_at",
                          "type": 4,
                          "typeName": "RelayBlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "required",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An XCM exceeded the individual message weight budget."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "used",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An XCM from the overweight queue was executed with the given actual weight used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 9
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "Id"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted.",
                        "",
                        "\\[ outcome \\]"
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent.",
                        "",
                        "\\[ origin, destination, message \\]"
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 82,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call.",
                        "",
                        "\\[ id, response \\]"
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification could",
                        "not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result.",
                        "",
                        "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`.",
                        "",
                        "\\[ id, pallet index, call index \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon.",
                        "",
                        "\\[ origin location, id, expected location \\]"
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed.",
                        "",
                        "\\[ origin location, id \\]"
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed.",
                        "",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 92,
                          "typeName": "VersionedMultiAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap.",
                        "",
                        "\\[ hash, origin, assets \\]"
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "\\[ destination, result \\]"
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention.",
                        "",
                        "\\[ location, XCM version \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        },
                        {
                          "type": 56,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it.",
                        "",
                        "\\[ location, query ID, error \\]"
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "type": 97,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "type": 8,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format.",
                        "",
                        "\\[ location, query ID \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Outcome"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "type": 56,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 61,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multilocation",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        },
                        {
                          "type": 62,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "xcm",
                "v1",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 64,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 64,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 64,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 67,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 69,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 70,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "def": {
                "compact": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 67,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 72,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "def": {
                "sequence": {
                  "type": 73
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 82,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 85,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 86,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 61,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 76,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 90,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 71,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 71,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 75,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "def": {
                "sequence": {
                  "type": 76
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 77,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 78,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 81,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 84
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 84
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "def": {
                "tuple": [
                  4,
                  56
                ]
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "xcm",
                "v0",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 77,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 89,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "xcm",
                "v1",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 60
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 60
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAssets"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "Vec<v0::MultiAsset>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "v1::MultiAssets"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "def": {
                "sequence": {
                  "type": 94
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_asset",
                "MultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "All",
                      "index": 1
                    },
                    {
                      "name": "AllFungible",
                      "index": 2
                    },
                    {
                      "name": "AllNonFungible",
                      "index": 3
                    },
                    {
                      "name": "AllAbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "AllAbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "AllConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 95,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "AllConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 95,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "AbstractFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "u128"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "AbstractNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "instance",
                          "type": 79,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ConcreteFungible",
                      "fields": [
                        {
                          "name": "id",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "u128"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ConcreteNonFungible",
                      "fields": [
                        {
                          "name": "class",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "instance",
                          "type": 79,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 11
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "xcm",
                "v0",
                "multi_location",
                "MultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        },
                        {
                          "type": 96,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "xcm",
                "v0",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parent",
                      "index": 0
                    },
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 64,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 64,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 64,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 67,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "u128"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "OnlyChild",
                      "index": 8
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 69,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 70,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "v0::MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "v1::MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "[u8; 8]"
                        },
                        {
                          "type": 59,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM."
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM."
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "outcome",
                          "type": 59,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome."
                      ]
                    },
                    {
                      "name": "WeightExhausted",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "remaining_weight",
                          "type": 8,
                          "typeName": "Weight"
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The weight limit for handling downward messages was reached."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        },
                        {
                          "name": "overweight_index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "required_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward message is overweight and was placed in the overweight queue."
                      ]
                    },
                    {
                      "name": "OverweightServiced",
                      "fields": [
                        {
                          "name": "overweight_index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_used",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Downward message from the overweight queue was executed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 102,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 103,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 102,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 103,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "error",
                          "type": 104,
                          "typeName": "LookupError"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 102,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "LookupError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "BadFormat",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProxyExecuted",
                      "fields": [
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A proxy was executed correctly, with the given."
                      ]
                    },
                    {
                      "name": "AnonymousCreated",
                      "fields": [
                        {
                          "name": "anonymous",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 106,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "disambiguation_index",
                          "type": 107,
                          "typeName": "u16"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Anonymous account has been created by new proxy with given",
                        "disambiguation index and proxy type."
                      ]
                    },
                    {
                      "name": "Announced",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An announcement was placed to make a call in the future."
                      ]
                    },
                    {
                      "name": "ProxyAdded",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 106,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proxy was added."
                      ]
                    },
                    {
                      "name": "ProxyRemoved",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegatee",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 106,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A proxy was removed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "bifrost_kusama_runtime",
                "ProxyType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "NonTransfer",
                      "index": 1
                    },
                    {
                      "name": "Governance",
                      "index": 2
                    },
                    {
                      "name": "CancelProxy",
                      "index": 3
                    },
                    {
                      "name": "IdentityJudgement",
                      "index": 4
                    },
                    {
                      "name": "Staking",
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewMultisig",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new multisig operation has begun."
                      ]
                    },
                    {
                      "name": "MultisigApproval",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 109,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A multisig operation has been approved by someone."
                      ]
                    },
                    {
                      "name": "MultisigExecuted",
                      "fields": [
                        {
                          "name": "approving",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 109,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        },
                        {
                          "name": "result",
                          "type": 43,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A multisig operation has been executed."
                      ]
                    },
                    {
                      "name": "MultisigCancelled",
                      "fields": [
                        {
                          "name": "cancelling",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "timepoint",
                          "type": 109,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "multisig",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "CallHash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A multisig operation has been cancelled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "pallet_multisig",
                "Timepoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements)."
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned."
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed."
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar."
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar."
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added."
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid."
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed."
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "bifrost_vesting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingUpdated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The amount vested has been updated. This could indicate more funds are available. The",
                        "balance given is the amount which is left unvested (and thus locked).",
                        "\\[account, unvested\\]"
                      ]
                    },
                    {
                      "name": "VestingCompleted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An \\[account\\] has become fully vested. No further vesting can happen."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new spend proposal has been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BountyProposed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New bounty proposal."
                      ]
                    },
                    {
                      "name": "BountyRejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A bounty proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "BountyBecameActive",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A bounty proposal is funded and became active."
                      ]
                    },
                    {
                      "name": "BountyAwarded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A bounty is awarded to a beneficiary."
                      ]
                    },
                    {
                      "name": "BountyClaimed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A bounty is claimed by beneficiary."
                      ]
                    },
                    {
                      "name": "BountyCanceled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A bounty is cancelled."
                      ]
                    },
                    {
                      "name": "BountyExtended",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A bounty expiry is extended."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewTip",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new tip suggestion has been opened."
                      ]
                    },
                    {
                      "name": "TipClosing",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A tip suggestion has reached threshold and is closing."
                      ]
                    },
                    {
                      "name": "TipClosed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A tip suggestion has been closed."
                      ]
                    },
                    {
                      "name": "TipRetracted",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A tip suggestion has been retracted."
                      ]
                    },
                    {
                      "name": "TipSlashed",
                      "fields": [
                        {
                          "name": "tip_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "finder",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A tip suggestion has been slashed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noted",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A preimage has been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A preimage has been requested."
                      ]
                    },
                    {
                      "name": "Cleared",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A preimage has ben cleared."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferredMultiAssets",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "fee",
                          "type": 76,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transferred `MultiAsset` with fee."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below",
                        "ExistentialDeposit, resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "status",
                          "type": 30,
                          "typeName": "BalanceStatus"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some reserved balance was repatriated (moved from reserved to",
                        "another account)."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "TotalIssuanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The total issuance of an currency has been set"
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some balances were withdrawn (e.g. pay for transaction fee)"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some balances were slashed (e.g. due to mis-behavior)"
                      ]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Deposited some balance into an account"
                      ]
                    },
                    {
                      "name": "LockSet",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 80,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some funds are locked"
                      ]
                    },
                    {
                      "name": "LockRemoved",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 80,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some locked funds were unlocked"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "node_primitives",
                "currency",
                "CurrencyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VToken",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Stable",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "VSToken",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "VSBond",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "LPToken",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 119,
                          "typeName": "TokenSymbol"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "ForeignAsset",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ForeignAssetId"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "node_primitives",
                "currency",
                "TokenSymbol"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ASG",
                      "index": 0
                    },
                    {
                      "name": "BNC",
                      "index": 1
                    },
                    {
                      "name": "KUSD",
                      "index": 2
                    },
                    {
                      "name": "DOT",
                      "index": 3
                    },
                    {
                      "name": "KSM",
                      "index": 4
                    },
                    {
                      "name": "ETH",
                      "index": 5
                    },
                    {
                      "name": "KAR",
                      "index": 6
                    },
                    {
                      "name": "ZLK",
                      "index": 7
                    },
                    {
                      "name": "PHA",
                      "index": 8
                    },
                    {
                      "name": "RMRK",
                      "index": 9
                    },
                    {
                      "name": "MOVR",
                      "index": 10
                    },
                    {
                      "name": "GLMR",
                      "index": 11
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "orml_unknown_tokens",
                "module",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 76,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Deposit success."
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 76,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Withdraw success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "orml_xcm",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": "to",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "XCM message sent. \\[to, message\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "zenlink_protocol",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Foreign Asset",
                        "Some assets were transferred. \\[asset_id, owner, target, amount\\]"
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were burned. \\[asset_id, owner, amount\\]"
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were minted. \\[asset_id, owner, amount\\]"
                      ]
                    },
                    {
                      "name": "PairCreated",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Swap",
                        "Create a trading pair. \\[asset_0, asset_1\\]"
                      ]
                    },
                    {
                      "name": "LiquidityAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Add liquidity. \\[owner, asset_0, asset_1, add_balance_0, add_balance_1,",
                        "mint_balance_lp\\]"
                      ]
                    },
                    {
                      "name": "LiquidityRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove liquidity. \\[owner, recipient, asset_0, asset_1, rm_balance_0, rm_balance_1,",
                        "burn_balance_lp\\]"
                      ]
                    },
                    {
                      "name": "AssetSwap",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 124,
                          "typeName": "Vec<AssetId>"
                        },
                        {
                          "type": 125,
                          "typeName": "Vec<AssetBalance>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Transact in trading \\[owner, recipient, swap_path, balances\\]"
                      ]
                    },
                    {
                      "name": "TransferredToParachain",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 57,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Transfer by xcm",
                        "Transferred to parachain. \\[asset_id, src, para_id, dest, amount, used_weight\\]"
                      ]
                    },
                    {
                      "name": "BootstrapContribute",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Contribute to bootstrap pair. \\[who, asset_0, asset_0_contribute, asset_1_contribute\\]"
                      ]
                    },
                    {
                      "name": "BootstrapEnd",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A bootstrap pair end. \\[asset_0, asset_1, asset_0_amount, asset_1_amount,",
                        "total_lp_supply]"
                      ]
                    },
                    {
                      "name": "BootstrapCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Create a bootstrap pair. \\[bootstrap_pair_account, asset_0, asset_1,",
                        "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1, end\\]"
                      ]
                    },
                    {
                      "name": "BootstrapClaim",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Claim a bootstrap pair. \\[bootstrap_pair_account, claimer, receiver, asset_0, asset_1,",
                        "asset_0_refund, asset_1_refund, lp_amount\\]"
                      ]
                    },
                    {
                      "name": "BootstrapUpdate",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Update a bootstrap pair. \\[caller, asset_0, asset_1,",
                        "total_supply_0,total_supply_1, capacity_supply_0,capacity_supply_1\\]"
                      ]
                    },
                    {
                      "name": "BootstrapRefund",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        },
                        {
                          "type": 6,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Refund from disable bootstrap pair. \\[bootstrap_pair_account, caller, asset_0, asset_1,",
                        "asset_0_refund, asset_1_refund\\]"
                      ]
                    },
                    {
                      "name": "DistributeReward",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 126,
                          "typeName": "Vec<(AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Bootstrap distribute some rewards to contributors."
                      ]
                    },
                    {
                      "name": "ChargeReward",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 126,
                          "typeName": "Vec<(AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Charge reward into a bootstrap."
                      ]
                    },
                    {
                      "name": "WithdrawReward",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Withdraw all reward from a bootstrap."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "AssetId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "asset_type",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "asset_index",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "def": {
                "sequence": {
                  "type": 123
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "def": {
                "sequence": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "def": {
                "sequence": {
                  "type": 127
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "def": {
                "tuple": [
                  123,
                  6
                ]
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "merkle_distributor",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Create",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::MerkleDistributorId"
                        },
                        {
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "create a merkle distributor. \\ [merkle distributor id, merkle tree root, total reward balance]"
                      ]
                    },
                    {
                      "name": "Claim",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::MerkleDistributorId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "claim reward. \\[merkle distributor id, account, balance]"
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "T::MerkleDistributorId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "withdraw reward. \\ [merkle distributor id, account, balance]"
                      ]
                    },
                    {
                      "name": "AddToWhiteList",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "add account who can create merkle distributor. \\ [account]"
                      ]
                    },
                    {
                      "name": "RemoveFromWhiteList",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "remove account from the set who can create merkle distributor. \\ [account]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "bifrost_flexible_fee",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FlexibleFeeExchanged",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "PalletBalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "FixedRateFeeExchanged",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "PalletBalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExtraFeeDeducted",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "ExtraFeeName"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "PalletBalanceOf<T>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "node_primitives",
                "ExtraFeeName"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SalpContribute",
                      "index": 0
                    },
                    {
                      "name": "StatemineTransfer",
                      "index": 1
                    },
                    {
                      "name": "NoExtraFee",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "bifrost_salp",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new crowdloaning campaign. [fund_index]"
                      ]
                    },
                    {
                      "name": "Contributing",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contributing to a crowd sale. [who, fund_index, amount]"
                      ]
                    },
                    {
                      "name": "Contributed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Contributed to a crowd sale. [who, fund_index, amount]"
                      ]
                    },
                    {
                      "name": "ContributeFailed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Fail on contribute to crowd sale. [who, fund_index, amount]"
                      ]
                    },
                    {
                      "name": "Withdrew",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Withdrew full balance of a contributor. [who, fund_index, amount]"
                      ]
                    },
                    {
                      "name": "Refunded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "refund to account. [who, fund_index,value]"
                      ]
                    },
                    {
                      "name": "AllRefunded",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "all refund"
                      ]
                    },
                    {
                      "name": "Redeemed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "redeem to account. [who, fund_index, first_slot, last_slot, value]"
                      ]
                    },
                    {
                      "name": "Edited",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Fund is edited. [fund_index]"
                      ]
                    },
                    {
                      "name": "Dissolved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Fund is dissolved. [fund_index]"
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The vsToken/vsBond was be unlocked. [who, fund_index, value]"
                      ]
                    },
                    {
                      "name": "AllUnlocked",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Failed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Fund status change"
                      ]
                    },
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Retired",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "End",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Continued",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "RefundedDissolved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Buyback",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 18
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PoolCreated",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The liquidity-pool was created",
                        "",
                        "[pool_id, pool_type, trading_pair, keeper]"
                      ]
                    },
                    {
                      "name": "PoolCharged",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The liquidity-pool was charged",
                        "",
                        "[pool_id, pool_type, trading_pair, investor]"
                      ]
                    },
                    {
                      "name": "PoolStarted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The liquidity-pool was started up",
                        "",
                        "[pool_id, pool_type, trading_pair]"
                      ]
                    },
                    {
                      "name": "PoolKilled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The liquidity-pool was killed",
                        "",
                        "[pool_id, pool_type, trading_pair]"
                      ]
                    },
                    {
                      "name": "PoolRetiredForcefully",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The liquidity-pool was retired forcefully",
                        "",
                        "[pool_id, pool_type, trading_pair]"
                      ]
                    },
                    {
                      "name": "PoolEdited",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The liquidity-pool was edited",
                        "",
                        "[pool_id, old_redeem_limit_time, old_unlock_limit_nums, new_redeem_limit_time,",
                        "new_unlock_limit_nums]"
                      ]
                    },
                    {
                      "name": "UserDeposited",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "User deposited tokens to a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_deposited, user]"
                      ]
                    },
                    {
                      "name": "UserRedeemed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "User redeemed tokens from a liquidity-mining",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_redeemed, unlock_height, user]"
                      ]
                    },
                    {
                      "name": "UserClaimed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 135,
                          "typeName": "Vec<(CurrencyId, BalanceOf<T, I>)>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "User withdrew the rewards whose deserved from a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, rewards, user]"
                      ]
                    },
                    {
                      "name": "UserUnlocked",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "User unlock tokens from a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_redeemed, user]"
                      ]
                    },
                    {
                      "name": "UserCancelUnlock",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "User cancels a pending-unlock from a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_canceled, user]"
                      ]
                    },
                    {
                      "name": "LazyMigration",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Lazy migration event",
                        "",
                        "[deposit_data_migration_nums, pool_info_migration_nums]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "PoolType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Mining",
                      "index": 0
                    },
                    {
                      "name": "Farming",
                      "index": 1
                    },
                    {
                      "name": "EBFarming",
                      "index": 2
                    },
                    {
                      "name": "SingleToken",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "def": {
                "tuple": [
                  118,
                  118
                ]
              }
            }
          },
          {
            "id": 135,
            "type": {
              "def": {
                "sequence": {
                  "type": 136
                }
              }
            }
          },
          {
            "id": 136,
            "type": {
              "def": {
                "tuple": [
                  118,
                  6
                ]
              }
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PoolCreated",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The liquidity-pool was created",
                        "",
                        "[pool_id, pool_type, trading_pair, keeper]"
                      ]
                    },
                    {
                      "name": "PoolCharged",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The liquidity-pool was charged",
                        "",
                        "[pool_id, pool_type, trading_pair, investor]"
                      ]
                    },
                    {
                      "name": "PoolStarted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The liquidity-pool was started up",
                        "",
                        "[pool_id, pool_type, trading_pair]"
                      ]
                    },
                    {
                      "name": "PoolKilled",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The liquidity-pool was killed",
                        "",
                        "[pool_id, pool_type, trading_pair]"
                      ]
                    },
                    {
                      "name": "PoolRetiredForcefully",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The liquidity-pool was retired forcefully",
                        "",
                        "[pool_id, pool_type, trading_pair]"
                      ]
                    },
                    {
                      "name": "PoolEdited",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The liquidity-pool was edited",
                        "",
                        "[pool_id, old_redeem_limit_time, old_unlock_limit_nums, new_redeem_limit_time,",
                        "new_unlock_limit_nums]"
                      ]
                    },
                    {
                      "name": "UserDeposited",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "User deposited tokens to a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_deposited, user]"
                      ]
                    },
                    {
                      "name": "UserRedeemed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "User redeemed tokens from a liquidity-mining",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_redeemed, unlock_height, user]"
                      ]
                    },
                    {
                      "name": "UserClaimed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 135,
                          "typeName": "Vec<(CurrencyId, BalanceOf<T, I>)>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "User withdrew the rewards whose deserved from a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, rewards, user]"
                      ]
                    },
                    {
                      "name": "UserUnlocked",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "User unlock tokens from a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_redeemed, user]"
                      ]
                    },
                    {
                      "name": "UserCancelUnlock",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "type": 133,
                          "typeName": "PoolType"
                        },
                        {
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "User cancels a pending-unlock from a liquidity-pool",
                        "",
                        "[pool_id, pool_type, trading_pair, amount_canceled, user]"
                      ]
                    },
                    {
                      "name": "LazyMigration",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Lazy migration event",
                        "",
                        "[deposit_data_migration_nums, pool_info_migration_nums]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "bifrost_token_issuer",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AddedToIssueList",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Successful added a new account to the issue whitelist. \\[account, currency_id]\\"
                      ]
                    },
                    {
                      "name": "RemovedFromIssueList",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Successful remove an account from the issue whitelist. \\[account, currency_id]\\"
                      ]
                    },
                    {
                      "name": "AddedToTransferList",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Successful added a new account to the transfer whitelist. \\[account, currency_id]\\"
                      ]
                    },
                    {
                      "name": "RemovedFromTransferList",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Successful remove an account from the transfer whitelist. \\[account, currency_id]\\"
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Token issue success, \\[currency_id, dest, amount\\]"
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Token transferred success, \\[origin, dest, currency_id, amount\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "bifrost_lightening_redeem",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "KSMExchanged",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "[exchanger, ksm_amount]"
                      ]
                    },
                    {
                      "name": "KSMAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "[adder, ksm_amount]"
                      ]
                    },
                    {
                      "name": "PriceEdited",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "[original_prce, new_price]"
                      ]
                    },
                    {
                      "name": "BlockIntervalEdited",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "[start, end]"
                      ]
                    },
                    {
                      "name": "ReleasedPerDayEdited",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "[originla_amount_per_day, amount_per_day]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "bifrost_salp_lite",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a new crowdloaning campaign. [fund_index]"
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Contributed to a crowd sale. [who, fund_index, amount]"
                      ]
                    },
                    {
                      "name": "Withdrew",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Withdrew full balance of a contributor. [who, fund_index, amount]"
                      ]
                    },
                    {
                      "name": "Refunded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "refund to account. [who, fund_index,value]"
                      ]
                    },
                    {
                      "name": "Redeemed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "redeem to account. [who, fund_index, first_slot, last_slot, value]"
                      ]
                    },
                    {
                      "name": "Edited",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Fund is edited. [fund_index]"
                      ]
                    },
                    {
                      "name": "Dissolved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Fund is dissolved. [fund_index]"
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The vsToken/vsBond was be unlocked. [who, fund_index, value]"
                      ]
                    },
                    {
                      "name": "AllUnlocked",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Failed",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Fund status change"
                      ]
                    },
                    {
                      "name": "Success",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Retired",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Continued",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "RefundedDissolved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "type": 4,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 13
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "bifrost_call_switchgear",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionSwitchedoff",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Switch off transaction . \\[pallet_name, function_name\\]"
                      ]
                    },
                    {
                      "name": "TransactionSwitchedOn",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Switch on transaction . \\[pallet_name, function_name\\]"
                      ]
                    },
                    {
                      "name": "TransferAccountDisabled",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "TransferAccountEnabled",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "bifrost_vsbond_auction",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OrderCreated",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "OrderId"
                        },
                        {
                          "type": 143,
                          "typeName": "OrderType"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The order has been created.",
                        "",
                        "[order_id, order_type, order_creator, vsbond_type, vsbond_amount, total_price]"
                      ]
                    },
                    {
                      "name": "OrderRevoked",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "OrderId"
                        },
                        {
                          "type": 143,
                          "typeName": "OrderType"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The order has been revoked.",
                        "",
                        "[order_id, order_type, order_creator, vsbond_type, vsbond_amount, vsbond_remain,",
                        "total_price]"
                      ]
                    },
                    {
                      "name": "OrderClinchd",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "OrderId"
                        },
                        {
                          "type": 143,
                          "typeName": "OrderType"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The order has been clinched.",
                        "",
                        "[order_id, order_type, order_creator, order_opponent, vsbond_type,",
                        "vsbond_amount_clinched, vsbond_amount, vsbond_remain, total_price]"
                      ]
                    },
                    {
                      "name": "TransactionFeeRateSet",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "Permill"
                        },
                        {
                          "type": 144,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transaction fee rate has been reset.",
                        "",
                        "[buy_fee_rate, sell_fee_rate]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "bifrost_vsbond_auction",
                "OrderType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sell",
                      "index": 0
                    },
                    {
                      "name": "Buy",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "bifrost_asset_registry",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ForeignAssetRegistered",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "ForeignAssetId"
                        },
                        {
                          "name": "asset_address",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "AssetMetadata<BalanceOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The foreign asset registered."
                      ]
                    },
                    {
                      "name": "ForeignAssetUpdated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "ForeignAssetId"
                        },
                        {
                          "name": "asset_address",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "AssetMetadata<BalanceOf<T>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The foreign asset updated."
                      ]
                    },
                    {
                      "name": "AssetRegistered",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 147,
                          "typeName": "AssetIds"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "AssetMetadata<BalanceOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The asset registered."
                      ]
                    },
                    {
                      "name": "AssetUpdated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 147,
                          "typeName": "AssetIds"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "AssetMetadata<BalanceOf<T>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The asset updated."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "bifrost_asset_registry",
                "pallet",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "symbol",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "minimal_balance",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "node_primitives",
                "currency",
                "AssetIds"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ForeignAssetId",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ForeignAssetId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NativeAssetId",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "bifrost_vtoken_minting",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vtoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Redeemed",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vtoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "RedeemSuccess",
                      "fields": [
                        {
                          "name": "unlock_id",
                          "type": 4,
                          "typeName": "UnlockId"
                        },
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Rebonded",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vtoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "RebondedByUnlockId",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vtoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "UnlockDurationSet",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "unlock_duration",
                          "type": 149,
                          "typeName": "TimeUnit"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "MinimumMintSet",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "MinimumRedeemSet",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "SupportRebondTokenAdded",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "SupportRebondTokenRemoved",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "FeeSet",
                      "fields": [
                        {
                          "name": "mint_fee",
                          "type": 144,
                          "typeName": "Permill"
                        },
                        {
                          "name": "redeem_fee",
                          "type": 144,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Several fees has been set."
                      ]
                    },
                    {
                      "name": "HookIterationLimitSet",
                      "fields": [
                        {
                          "name": "limit",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnlockingTotalSet",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "MinTimeUnitSet",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "time_unit",
                          "type": 149,
                          "typeName": "TimeUnit"
                        }
                      ],
                      "index": 13
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "node_primitives",
                "TimeUnit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Era",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "SlashingSpan",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Round",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "bifrost_slp",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DelegatorInitialized",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DelegatorBonded",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "bonded_amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DelegatorBondExtra",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "extra_bonded_amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "DelegatorUnbond",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "unbond_amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "DelegatorUnbondAll",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "DelegatorRebond",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "rebond_amount",
                          "type": 151,
                          "typeName": "Option<BalanceOf<T>>"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Delegated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "targets",
                          "type": 152,
                          "typeName": "Option<Vec<MultiLocation>>"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Undelegated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "targets",
                          "type": 153,
                          "typeName": "Vec<MultiLocation>"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Payout",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "validator",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "time_unit",
                          "type": 154,
                          "typeName": "Option<TimeUnit>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Liquidize",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "time_unit",
                          "type": 154,
                          "typeName": "Option<TimeUnit>"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Chill",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "query_id_hash",
                          "type": 9,
                          "typeName": "Hash<T>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "TransferBack",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "to",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "TransferTo",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "to",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DelegatorAdded",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "index",
                          "type": 155,
                          "typeName": "u16"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DelegatorRemoved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ValidatorsAdded",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "validator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "ValidatorsRemoved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "validator_id",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Refund",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "time_unit",
                          "type": 149,
                          "typeName": "TimeUnit"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "FundMoveFromExitToEntrance",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "TimeUnitUpdated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "old",
                          "type": 154,
                          "typeName": "Option<TimeUnit>"
                        },
                        {
                          "name": "new",
                          "type": 149,
                          "typeName": "TimeUnit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "PoolTokenIncreased",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "HostingFeeCharged",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "PoolTokenDecreased",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "FeeSupplemented",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "from",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "to",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "ValidatorsByDelegatorSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "validators_list",
                          "type": 156,
                          "typeName": "Vec<(MultiLocation, Hash<T>)>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "XcmDestWeightAndFeeSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "operation",
                          "type": 158,
                          "typeName": "XcmOperation"
                        },
                        {
                          "name": "weight_and_fee",
                          "type": 159,
                          "typeName": "Option<(Weight, BalanceOf<T>)>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "OperateOriginSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "operator",
                          "type": 161,
                          "typeName": "Option<AccountIdOf<T>>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "FeeSourceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who_and_fee",
                          "type": 162,
                          "typeName": "Option<(MultiLocation, BalanceOf<T>)>"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "DelegatorLedgerSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delegator",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "ledger",
                          "type": 164,
                          "typeName": "Option<Ledger<MultiLocation, BalanceOf<T>, MultiLocation>>"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "DelegatorLedgerQueryResponseConfirmed",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "entry",
                          "type": 180,
                          "typeName": "LedgerUpdateEntry<BalanceOf<T>, MultiLocation, MultiLocation>"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "DelegatorLedgerQueryResponseFailSuccessfully",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ValidatorsByDelegatorQueryResponseConfirmed",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "entry",
                          "type": 185,
                          "typeName": "ValidatorsByDelegatorUpdateEntry<MultiLocation, MultiLocation, Hash<T>>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ValidatorsByDelegatorQueryResponseFailSuccessfully",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "MinimumsMaximumsSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "minimums_and_maximums",
                          "type": 187,
                          "typeName": "Option<MinimumsMaximums<BalanceOf<T>>>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "CurrencyDelaysSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "delays",
                          "type": 189,
                          "typeName": "Option<Delays>"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "HostingFeesSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "fees",
                          "type": 191,
                          "typeName": "Option<(Permill, MultiLocation)>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "CurrencyTuneExchangeRateLimitSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "tune_exchange_rate_limit",
                          "type": 193,
                          "typeName": "Option<(u32, Permill)>"
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "OngoingTimeUnitUpdateIntervalSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "interval",
                          "type": 195,
                          "typeName": "Option<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "SupplementFeeAccountWhitelistAdded",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "SupplementFeeAccountWhitelistRemoved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 153
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 153
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "def": {
                "sequence": {
                  "type": 60
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 149
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 149
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "def": {
                "compact": {
                  "type": 107
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "def": {
                "sequence": {
                  "type": 157
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "def": {
                "tuple": [
                  60,
                  9
                ]
              }
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "XcmOperation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XtokensTransfer",
                      "index": 0
                    },
                    {
                      "name": "Bond",
                      "index": 1
                    },
                    {
                      "name": "WithdrawUnbonded",
                      "index": 2
                    },
                    {
                      "name": "BondExtra",
                      "index": 3
                    },
                    {
                      "name": "Unbond",
                      "index": 4
                    },
                    {
                      "name": "Rebond",
                      "index": 5
                    },
                    {
                      "name": "Delegate",
                      "index": 6
                    },
                    {
                      "name": "Payout",
                      "index": 7
                    },
                    {
                      "name": "Liquidize",
                      "index": 8
                    },
                    {
                      "name": "TransferBack",
                      "index": 9
                    },
                    {
                      "name": "TransferTo",
                      "index": 10
                    },
                    {
                      "name": "Chill",
                      "index": 11
                    },
                    {
                      "name": "Undelegate",
                      "index": 12
                    },
                    {
                      "name": "CancelLeave",
                      "index": 13
                    },
                    {
                      "name": "XtokensTransferBack",
                      "index": 14
                    },
                    {
                      "name": "ExecuteLeave",
                      "index": 15
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 160
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 160
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "def": {
                "tuple": [
                  8,
                  6
                ]
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 163
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 163
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "def": {
                "tuple": [
                  60,
                  6
                ]
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 165
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 165
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "Ledger"
              ],
              "params": [
                {
                  "name": "DelegatorId",
                  "type": 60
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "ValidatorId",
                  "type": 60
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Substrate",
                      "fields": [
                        {
                          "type": 166,
                          "typeName": "SubstrateLedger<DelegatorId, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Moonbeam",
                      "fields": [
                        {
                          "type": 169,
                          "typeName": "OneToManyLedger<DelegatorId, ValidatorId, Balance>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "polkadot_primitives",
                "SubstrateLedger"
              ],
              "params": [
                {
                  "name": "DelegatorId",
                  "type": 60
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 60,
                      "typeName": "DelegatorId"
                    },
                    {
                      "name": "total",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "active",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "unlocking",
                      "type": 167,
                      "typeName": "Vec<UnlockChunk<Balance>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "def": {
                "sequence": {
                  "type": 168
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "polkadot_primitives",
                "UnlockChunk"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "unlock_time",
                      "type": 149,
                      "typeName": "TimeUnit"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "moonbeam_primitives",
                "OneToManyLedger"
              ],
              "params": [
                {
                  "name": "DelegatorId",
                  "type": 60
                },
                {
                  "name": "ValidatorId",
                  "type": 60
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 60,
                      "typeName": "DelegatorId"
                    },
                    {
                      "name": "delegations",
                      "type": 170,
                      "typeName": "BTreeMap<ValidatorId, Balance>"
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "less_total",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "requests",
                      "type": 172,
                      "typeName": "Vec<OneToManyScheduledRequest<ValidatorId, Balance>>"
                    },
                    {
                      "name": "request_briefs",
                      "type": 175,
                      "typeName": "BTreeMap<ValidatorId, (TimeUnit, Balance)>"
                    },
                    {
                      "name": "status",
                      "type": 179,
                      "typeName": "OneToManyDelegatorStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 60
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 171
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "def": {
                "sequence": {
                  "type": 163
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "def": {
                "sequence": {
                  "type": 173
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "moonbeam_primitives",
                "OneToManyScheduledRequest"
              ],
              "params": [
                {
                  "name": "ValidatorId",
                  "type": 60
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validator",
                      "type": 60,
                      "typeName": "ValidatorId"
                    },
                    {
                      "name": "when_executable",
                      "type": 149,
                      "typeName": "TimeUnit"
                    },
                    {
                      "name": "action",
                      "type": 174,
                      "typeName": "OneToManyDelegationAction<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "moonbeam_primitives",
                "OneToManyDelegationAction"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Revoke",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Decrease",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 60
                },
                {
                  "name": "V",
                  "type": 176
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 177
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "def": {
                "tuple": [
                  149,
                  6
                ]
              }
            }
          },
          {
            "id": 177,
            "type": {
              "def": {
                "sequence": {
                  "type": 178
                }
              }
            }
          },
          {
            "id": 178,
            "type": {
              "def": {
                "tuple": [
                  60,
                  176
                ]
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "moonbeam_primitives",
                "OneToManyDelegatorStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "index": 0
                    },
                    {
                      "name": "Leaving",
                      "fields": [
                        {
                          "type": 149,
                          "typeName": "TimeUnit"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "LedgerUpdateEntry"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DelegatorId",
                  "type": 60
                },
                {
                  "name": "ValidatorId",
                  "type": 60
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Substrate",
                      "fields": [
                        {
                          "type": 181,
                          "typeName": "SubstrateLedgerUpdateEntry<Balance, DelegatorId>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Moonbeam",
                      "fields": [
                        {
                          "type": 183,
                          "typeName": "MoonbeamLedgerUpdateEntry<Balance, DelegatorId, ValidatorId>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "polkadot_primitives",
                "SubstrateLedgerUpdateEntry"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DelegatorId",
                  "type": 60
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 118,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "delegator_id",
                      "type": 60,
                      "typeName": "DelegatorId"
                    },
                    {
                      "name": "update_operation",
                      "type": 182,
                      "typeName": "SubstrateLedgerUpdateOperation"
                    },
                    {
                      "name": "amount",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "unlock_time",
                      "type": 154,
                      "typeName": "Option<TimeUnit>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "polkadot_primitives",
                "SubstrateLedgerUpdateOperation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Bond",
                      "index": 0
                    },
                    {
                      "name": "Unlock",
                      "index": 1
                    },
                    {
                      "name": "Rebond",
                      "index": 2
                    },
                    {
                      "name": "Liquidize",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "moonbeam_primitives",
                "MoonbeamLedgerUpdateEntry"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DelegatorId",
                  "type": 60
                },
                {
                  "name": "ValidatorId",
                  "type": 60
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 118,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "delegator_id",
                      "type": 60,
                      "typeName": "DelegatorId"
                    },
                    {
                      "name": "validator_id",
                      "type": 91,
                      "typeName": "Option<ValidatorId>"
                    },
                    {
                      "name": "update_operation",
                      "type": 184,
                      "typeName": "MoonbeamLedgerUpdateOperation"
                    },
                    {
                      "name": "amount",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "unlock_time",
                      "type": 154,
                      "typeName": "Option<TimeUnit>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "moonbeam_primitives",
                "MoonbeamLedgerUpdateOperation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Bond",
                      "index": 0
                    },
                    {
                      "name": "BondLess",
                      "index": 1
                    },
                    {
                      "name": "Revoke",
                      "index": 2
                    },
                    {
                      "name": "CancelRequest",
                      "index": 3
                    },
                    {
                      "name": "LeaveDelegator",
                      "index": 4
                    },
                    {
                      "name": "CancelLeave",
                      "index": 5
                    },
                    {
                      "name": "ExecuteLeave",
                      "index": 6
                    },
                    {
                      "name": "ExecuteRequest",
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "ValidatorsByDelegatorUpdateEntry"
              ],
              "params": [
                {
                  "name": "DelegatorId",
                  "type": 60
                },
                {
                  "name": "ValidatorId",
                  "type": 60
                },
                {
                  "name": "HashT",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Substrate",
                      "fields": [
                        {
                          "type": 186,
                          "typeName": "SubstrateValidatorsByDelegatorUpdateEntry<DelegatorId, ValidatorId, HashT>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "polkadot_primitives",
                "SubstrateValidatorsByDelegatorUpdateEntry"
              ],
              "params": [
                {
                  "name": "DelegatorId",
                  "type": 60
                },
                {
                  "name": "ValidatorId",
                  "type": 60
                },
                {
                  "name": "HashT",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "currency_id",
                      "type": 118,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "delegator_id",
                      "type": 60,
                      "typeName": "DelegatorId"
                    },
                    {
                      "name": "validators",
                      "type": 156,
                      "typeName": "Vec<(ValidatorId, HashT)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 188
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 188
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "MinimumsMaximums"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegator_bonded_minimum",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "bond_extra_minimum",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "unbond_minimum",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "rebond_minimum",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "unbond_record_maximum",
                      "type": 63,
                      "typeName": "u32"
                    },
                    {
                      "name": "validators_back_maximum",
                      "type": 63,
                      "typeName": "u32"
                    },
                    {
                      "name": "delegator_active_staking_maximum",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "validators_reward_maximum",
                      "type": 63,
                      "typeName": "u32"
                    },
                    {
                      "name": "delegation_amount_minimum",
                      "type": 68,
                      "typeName": "Balance"
                    },
                    {
                      "name": "delegators_maximum",
                      "type": 155,
                      "typeName": "u16"
                    },
                    {
                      "name": "validators_maximum",
                      "type": 155,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 190
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 190
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "bifrost_slp",
                "primitives",
                "Delays"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "unlock_delay",
                      "type": 149,
                      "typeName": "TimeUnit"
                    },
                    {
                      "name": "leave_delegators_delay",
                      "type": 149,
                      "typeName": "TimeUnit"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 192
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 192
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "def": {
                "tuple": [
                  144,
                  60
                ]
              }
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 194
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 194
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "def": {
                "tuple": [
                  4,
                  144
                ]
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "xcm_interface",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XcmDestWeightUpdated",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "XcmInterfaceOperation"
                        },
                        {
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Xcm dest weight has been updated. \\[xcm_operation, new_xcm_dest_weight\\]"
                      ]
                    },
                    {
                      "name": "XcmFeeUpdated",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "XcmInterfaceOperation"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Xcm dest weight has been updated. \\[xcm_operation, new_xcm_dest_weight\\]"
                      ]
                    },
                    {
                      "name": "TransferredStatemineMultiAsset",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "xcm_interface",
                "pallet",
                "XcmInterfaceOperation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UmpContributeTransact",
                      "index": 0
                    },
                    {
                      "name": "StatemineTransfer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "bifrost_vstoken_conversion",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VsbondConvertToVsksm",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vsbond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vsksm_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VsksmConvertToVsbond",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vsbond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vsksm_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "VsbondConvertToVsdot",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vsbond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vsdot_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "VsdotConvertToVsbond",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vsbond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vsdot_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "VsbondConvertToVstoken",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vsbond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vstoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "VstokenConvertToVsbond",
                      "fields": [
                        {
                          "name": "address",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vsbond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vstoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ExchangeFeeSet",
                      "fields": [
                        {
                          "name": "exchange_fee",
                          "type": 199,
                          "typeName": "VstokenConversionExchangeFee<BalanceOf<T>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "ExchangeRateSet",
                      "fields": [
                        {
                          "name": "lease",
                          "type": 200,
                          "typeName": "i32"
                        },
                        {
                          "name": "exchange_rate",
                          "type": 201,
                          "typeName": "VstokenConversionExchangeRate"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "RelaychainLeaseSet",
                      "fields": [
                        {
                          "name": "lease",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "bifrost_vstoken_conversion",
                "primitives",
                "VstokenConversionExchangeFee"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vstoken_exchange_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "vsbond_exchange_fee_of_vstoken",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "def": {
                "primitive": "i32"
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "bifrost_vstoken_conversion",
                "primitives",
                "VstokenConversionExchangeRate"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vsbond_convert_to_vstoken",
                      "type": 38,
                      "typeName": "Percent"
                    },
                    {
                      "name": "vstoken_convert_to_vsbond",
                      "type": 38,
                      "typeName": "Percent"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "bifrost_farming",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FarmingPoolCreated",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "FarmingPoolReset",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "FarmingPoolClosed",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "FarmingPoolKilled",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "FarmingPoolEdited",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Charged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "rewards",
                          "type": 135,
                          "typeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "add_value",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gauge_info",
                          "type": 203,
                          "typeName": "Option<(BalanceOf<T>, BlockNumberFor<T>)>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "remove_value",
                          "type": 151,
                          "typeName": "Option<BalanceOf<T>>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Claimed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "WithdrawClaimed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "GaugeWithdrawn",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "gid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "AllForceGaugeClaimed",
                      "fields": [
                        {
                          "name": "gid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "PartiallyForceGaugeClaimed",
                      "fields": [
                        {
                          "name": "gid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "AllRetired",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "PartiallyRetired",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "RetireLimitSet",
                      "fields": [
                        {
                          "name": "limit",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 15
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 204
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 204
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 204,
            "type": {
              "def": {
                "tuple": [
                  6,
                  4
                ]
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "bifrost_system_staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewRound",
                      "fields": [
                        {
                          "name": "current",
                          "type": 4,
                          "typeName": "RoundIndex"
                        },
                        {
                          "name": "first",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "length",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "TokenConfigChanged",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "exec_delay",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "system_stakable_farming_rate",
                          "type": 144,
                          "typeName": "Permill"
                        },
                        {
                          "name": "add_or_sub",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "system_stakable_base",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_poolids",
                          "type": 206,
                          "typeName": "Vec<PoolId>"
                        },
                        {
                          "name": "lptoken_rates",
                          "type": 207,
                          "typeName": "Vec<Perbill>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositFailed",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_staking_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_stakable_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_shadow_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "pending_redeem_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MintSuccess",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_staking_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_stakable_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_shadow_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "pending_redeem_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MintFailed",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_staking_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_stakable_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_shadow_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "pending_redeem_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "WithdrawSuccess",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_staking_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_stakable_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_shadow_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "pending_redeem_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "WithdrawFailed",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_staking_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_stakable_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_shadow_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "pending_redeem_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Redeemed",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_staking_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_stakable_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_shadow_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "pending_redeem_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "RedeemFailed",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "farming_staking_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_stakable_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "system_shadow_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "pending_redeem_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "VtokenNotFound",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "TokenInfoRefreshed",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Payout",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vtoken",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vfree",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "shadow",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 206,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "def": {
                "sequence": {
                  "type": 39
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "def": {
                "sequence": {
                  "type": 9
                }
              }
            }
          },
          {
            "id": 210,
            "type": {
              "def": {
                "sequence": {
                  "type": 102
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 63,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 212,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 39,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 214,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 216,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 214,
            "type": {
              "def": {
                "sequence": {
                  "type": 215
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "def": {
                "tuple": [
                  10,
                  10
                ]
              }
            }
          },
          {
            "id": 216,
            "type": {
              "def": {
                "sequence": {
                  "type": 10
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 218,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 219
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 219,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 219,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 219,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 220,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 220,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 220,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 8
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 222,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 212,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 212,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 225,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 226
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 226
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "def": {
                "sequence": {
                  "type": 227
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "def": {
                "tuple": [
                  80,
                  4
                ]
              }
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 66,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 230,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6,
                  34
                ]
              }
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign an previously unassigned index.",
                        "",
                        "Payment: `Deposit` is reserved from the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be claimed. This must not be in use.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Assign an index already owned by the sender to another account. The balance reservation",
                        "is effectively transferred to the new account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be re-assigned. This must be owned by the sender.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One transfer operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (recipient)",
                        "   - Writes: Indices Accounts, System Account (recipient)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "free",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Free up an index owned by the sender.",
                        "",
                        "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                        "",
                        "- `index`: the index to be freed. This must be owned by the sender.",
                        "",
                        "Emits `IndexFreed` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        },
                        {
                          "name": "freeze",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force an index to an account. This doesn't require a deposit. If the index is already",
                        "held, then any deposit is reimbursed to its current owner.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `index`: the index to be (re-)assigned.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (original owner)",
                        "   - Writes: Indices Accounts, System Account (original owner)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Freeze an index so it will always point to the sender account. This consumes the",
                        "deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                        "non-frozen account `index`.",
                        "",
                        "- `index`: the index to be frozen in place.",
                        "",
                        "Emits `IndexFrozen` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one slash operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAssigned",
                      "index": 0,
                      "docs": [
                        "The index was not already assigned."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 1,
                      "docs": [
                        "The index is assigned to another account."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 2,
                      "docs": [
                        "The index was not available."
                      ]
                    },
                    {
                      "name": "NotTransfer",
                      "index": 3,
                      "docs": [
                        "The source and destination accounts are identical."
                      ]
                    },
                    {
                      "name": "Permanent",
                      "index": 4,
                      "docs": [
                        "The index is permanent and may not be freed/changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 234,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "HeadData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 236
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 236
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "UpgradeRestriction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 238,
                      "typeName": "BTreeSet<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 216
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 9,
                      "typeName": "relay_chain::Hash"
                    },
                    {
                      "name": "relay_dispatch_queue_size",
                      "type": 102,
                      "typeName": "(u32, u32)"
                    },
                    {
                      "name": "ingress_channels",
                      "type": 240,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    },
                    {
                      "name": "egress_channels",
                      "type": 240,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "def": {
                "sequence": {
                  "type": 241
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "def": {
                "tuple": [
                  57,
                  242
                ]
              }
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHrmpChannel"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 55,
                      "typeName": "Option<Hash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "polkadot_primitives",
                "v2",
                "AbridgedHostConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "RelayHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 57
                },
                {
                  "name": "V",
                  "type": 244
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 246
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 246,
            "type": {
              "def": {
                "sequence": {
                  "type": 247
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "def": {
                "tuple": [
                  57,
                  244
                ]
              }
            }
          },
          {
            "id": 248,
            "type": {
              "def": {
                "sequence": {
                  "type": 249
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 57
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 57,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 251,
                          "typeName": "ParachainInherentData"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 10,
                          "typeName": "UpwardMessage"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "enact_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 233,
                      "typeName": "PersistedValidationData"
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 237,
                      "typeName": "sp_trie::StorageProof"
                    },
                    {
                      "name": "downward_messages",
                      "type": 252,
                      "typeName": "Vec<InboundDownwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 254,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 252,
            "type": {
              "def": {
                "sequence": {
                  "type": 253
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 10,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 57
                },
                {
                  "name": "V",
                  "type": 255
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 257
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "def": {
                "sequence": {
                  "type": 256
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 10,
                      "typeName": "sp_std::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "def": {
                "sequence": {
                  "type": 258
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "def": {
                "tuple": [
                  57,
                  255
                ]
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending"
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function"
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run"
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block"
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block"
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 261
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 263,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 80,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 262,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "def": {
                "sequence": {
                  "type": 261
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 265
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 266,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 80
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 80,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "def": {
                "sequence": {
                  "type": 265
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "index": 0
                    },
                    {
                      "name": "V2_0_0",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "new_free",
                          "type": 68,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "keep_alive",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 67,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 274
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 275,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        },
                        {
                          "type": 161,
                          "typeName": "Option<Author>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "def": {
                "sequence": {
                  "type": 274
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 277,
                          "typeName": "Vec<T::Header>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 277,
            "type": {
              "def": {
                "sequence": {
                  "type": 278
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 279
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 63,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "index": 0,
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "index": 1,
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "index": 2,
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "index": 3,
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "index": 4,
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "index": 5,
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "index": 6,
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 281,
            "type": {
              "def": {
                "sequence": {
                  "type": 282
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "def": {
                "tuple": [
                  0,
                  283
                ]
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "bifrost_kusama_runtime",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 284,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 285,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 286,
            "type": {
              "def": {
                "tuple": [
                  287,
                  10
                ]
              }
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 283,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 284
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 291,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "def": {
                "sequence": {
                  "type": 284
                }
              }
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "ParachainBondConfig"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BalanceOf",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "percent",
                      "type": 38,
                      "typeName": "Percent"
                    },
                    {
                      "name": "payment_in_round",
                      "type": 6,
                      "typeName": "BalanceOf"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "RoundInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 4,
                      "typeName": "RoundIndex"
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "length",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Delegator"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "delegations",
                      "type": 296,
                      "typeName": "OrderedSet<Bond<AccountId, Balance>>"
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "less_total",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "status",
                      "type": 299,
                      "typeName": "DelegatorStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "parachain_staking",
                "set",
                "OrderedSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 297
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 298,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Bond"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "def": {
                "sequence": {
                  "type": 297
                }
              }
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelegatorStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "index": 0
                    },
                    {
                      "name": "Leaving",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CandidateMetadata"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "delegation_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_counted",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "lowest_top_delegation_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "highest_bottom_delegation_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "lowest_bottom_delegation_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "top_capacity",
                      "type": 301,
                      "typeName": "CapacityStatus"
                    },
                    {
                      "name": "bottom_capacity",
                      "type": 301,
                      "typeName": "CapacityStatus"
                    },
                    {
                      "name": "request",
                      "type": 302,
                      "typeName": "Option<CandidateBondLessRequest<Balance>>"
                    },
                    {
                      "name": "status",
                      "type": 304,
                      "typeName": "CollatorStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CapacityStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Full",
                      "index": 0
                    },
                    {
                      "name": "Empty",
                      "index": 1
                    },
                    {
                      "name": "Partial",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 303
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 303
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CandidateBondLessRequest"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "when_executable",
                      "type": 4,
                      "typeName": "RoundIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CollatorStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "index": 0
                    },
                    {
                      "name": "Idle",
                      "index": 1
                    },
                    {
                      "name": "Leaving",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "RoundIndex"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "def": {
                "sequence": {
                  "type": 306
                }
              }
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "parachain_staking",
                "delegation_requests",
                "ScheduledRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegator",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "when_executable",
                      "type": 4,
                      "typeName": "RoundIndex"
                    },
                    {
                      "name": "action",
                      "type": 36,
                      "typeName": "DelegationAction<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegations",
                      "type": 298,
                      "typeName": "Vec<Bond<AccountId, Balance>>"
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 308,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0
                ]
              }
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "CollatorSnapshot"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "delegations",
                      "type": 298,
                      "typeName": "Vec<Bond<AccountId, Balance>>"
                    },
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "parachain_staking",
                "types",
                "DelayedPayout"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_issuance",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "total_staking_reward",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "collator_commission",
                      "type": 39,
                      "typeName": "Perbill"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "InflationInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "expect",
                      "type": 312,
                      "typeName": "Range<Balance>"
                    },
                    {
                      "name": "annual",
                      "type": 313,
                      "typeName": "Range<Perbill>"
                    },
                    {
                      "name": "round",
                      "type": 313,
                      "typeName": "Range<Perbill>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "Range"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "min",
                      "type": 6,
                      "typeName": "T"
                    },
                    {
                      "name": "ideal",
                      "type": 6,
                      "typeName": "T"
                    },
                    {
                      "name": "max",
                      "type": 6,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "parachain_staking",
                "inflation",
                "Range"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "min",
                      "type": 39,
                      "typeName": "T"
                    },
                    {
                      "name": "ideal",
                      "type": 39,
                      "typeName": "T"
                    },
                    {
                      "name": "max",
                      "type": 39,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_staking_expectations",
                      "fields": [
                        {
                          "name": "expectations",
                          "type": 312,
                          "typeName": "Range<BalanceOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the expectations for total staked. These expectations determine the issuance for",
                        "the round according to logic in `fn compute_issuance`"
                      ]
                    },
                    {
                      "name": "set_inflation",
                      "fields": [
                        {
                          "name": "schedule",
                          "type": 313,
                          "typeName": "Range<Perbill>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the annual inflation rate to derive per-round inflation"
                      ]
                    },
                    {
                      "name": "set_parachain_bond_account",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the account that will hold funds set aside for parachain bond"
                      ]
                    },
                    {
                      "name": "set_parachain_bond_reserve_percent",
                      "fields": [
                        {
                          "name": "new",
                          "type": 38,
                          "typeName": "Percent"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the percent of inflation set aside for parachain bond"
                      ]
                    },
                    {
                      "name": "set_total_selected",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the total number of collator candidates selected per round",
                        "- changes are not applied until the start of the next round"
                      ]
                    },
                    {
                      "name": "set_collator_commission",
                      "fields": [
                        {
                          "name": "new",
                          "type": 39,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the commission for all collators"
                      ]
                    },
                    {
                      "name": "set_blocks_per_round",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set blocks per round",
                        "- if called with `new` less than length of current round, will transition immediately",
                        "in the next block",
                        "- also updates per-round inflation config"
                      ]
                    },
                    {
                      "name": "join_candidates",
                      "fields": [
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "candidate_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Join the set of collator candidates"
                      ]
                    },
                    {
                      "name": "schedule_leave_candidates",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Request to leave the set of candidates. If successful, the account is immediately",
                        "removed from the candidate pool to prevent selection as a collator."
                      ]
                    },
                    {
                      "name": "execute_leave_candidates",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate_delegation_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Execute leave candidates request"
                      ]
                    },
                    {
                      "name": "cancel_leave_candidates",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel open request to leave candidates",
                        "- only callable by collator account",
                        "- result upon successful call is the candidate is active in the candidate pool"
                      ]
                    },
                    {
                      "name": "go_offline",
                      "index": 11,
                      "docs": [
                        "Temporarily leave the set of collator candidates without unbonding"
                      ]
                    },
                    {
                      "name": "go_online",
                      "index": 12,
                      "docs": [
                        "Rejoin the set of collator candidates if previously had called `go_offline`"
                      ]
                    },
                    {
                      "name": "candidate_bond_more",
                      "fields": [
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Increase collator candidate self bond by `more`"
                      ]
                    },
                    {
                      "name": "schedule_candidate_bond_less",
                      "fields": [
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Request by collator candidate to decrease self bond by `less`"
                      ]
                    },
                    {
                      "name": "execute_candidate_bond_less",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Execute pending request to adjust the collator candidate self bond"
                      ]
                    },
                    {
                      "name": "cancel_candidate_bond_less",
                      "index": 16,
                      "docs": [
                        "Cancel pending request to adjust the collator candidate self bond"
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "candidate_delegation_count",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "delegation_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "If caller is not a delegator and not a collator, then join the set of delegators",
                        "If caller is a delegator, then makes delegation to change their delegation state"
                      ]
                    },
                    {
                      "name": "schedule_leave_delegators",
                      "index": 18,
                      "docs": [
                        "Request to leave the set of delegators. If successful, the caller is scheduled to be",
                        "allowed to exit via a [DelegationAction::Revoke] towards all existing delegations.",
                        "Success forbids future delegation requests until the request is invoked or cancelled."
                      ]
                    },
                    {
                      "name": "execute_leave_delegators",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "delegation_count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Execute the right to exit the set of delegators and revoke all ongoing delegations."
                      ]
                    },
                    {
                      "name": "cancel_leave_delegators",
                      "index": 20,
                      "docs": [
                        "Cancel a pending request to exit the set of delegators. Success clears the pending exit",
                        "request (thereby resetting the delay upon another `leave_delegators` call)."
                      ]
                    },
                    {
                      "name": "schedule_revoke_delegation",
                      "fields": [
                        {
                          "name": "collator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Request to revoke an existing delegation. If successful, the delegation is scheduled",
                        "to be allowed to be revoked via the `execute_delegation_request` extrinsic."
                      ]
                    },
                    {
                      "name": "delegator_bond_more",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "more",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Bond more for delegators wrt a specific collator candidate."
                      ]
                    },
                    {
                      "name": "schedule_delegator_bond_less",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "less",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Request bond less for delegators wrt a specific collator candidate."
                      ]
                    },
                    {
                      "name": "execute_delegation_request",
                      "fields": [
                        {
                          "name": "delegator",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Execute pending request to change an existing delegation"
                      ]
                    },
                    {
                      "name": "cancel_delegation_request",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Cancel request to change an existing delegation."
                      ]
                    },
                    {
                      "name": "hotfix_remove_delegation_requests_exited_candidates",
                      "fields": [
                        {
                          "name": "candidates",
                          "type": 41,
                          "typeName": "Vec<AccountIdOf<T>>"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Hotfix to remove existing empty entries for candidates that have left."
                      ]
                    },
                    {
                      "name": "hotfix_migrate_delegators_from_reserve_to_locks",
                      "fields": [
                        {
                          "name": "delegators",
                          "type": 41,
                          "typeName": "Vec<AccountIdOf<T>>"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Hotfix to migrate a delegator's reserve to a lock. For any given delegator in the",
                        "provided list:",
                        "* this fn is idempotent",
                        "* is safe to call if the delegator doesn't exist",
                        "* is safe to call if the delegator has been migrated",
                        "* is safe to call if the delegator is a collator (this is a no-op)",
                        "",
                        "weight calculation:",
                        "  reads:",
                        "   * DelegatorReserveToLockMigrations",
                        "   * DelegatorState",
                        "  writes:",
                        "   * unreserve()",
                        "   * set_lock()",
                        "   * DelegatorReserveToLockMigrations",
                        "  other: 50M flat weight + 100M weight per item"
                      ]
                    },
                    {
                      "name": "hotfix_migrate_collators_from_reserve_to_locks",
                      "fields": [
                        {
                          "name": "collators",
                          "type": 41,
                          "typeName": "Vec<AccountIdOf<T>>"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Hotfix to migrate a collator's reserve to a lock. For any given collator in the",
                        "provided list:",
                        "* this fn is idempotent",
                        "* is safe to call if the collator doesn't exist",
                        "* is safe to call if the collator has been migrated",
                        "* is safe to call if the collator is a collator (this is a no-op)",
                        "",
                        "weight calculation:",
                        "  reads:",
                        "   * CollatorReserveToLockMigrations",
                        "   * CandidateInfo",
                        "  writes:",
                        "   * unreserve()",
                        "   * set_lock()",
                        "   * CollatorReserveToLockMigrations",
                        "  other: 50M flat weight + 100M weight per item"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 80,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "parachain_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DelegatorDNE",
                      "index": 0
                    },
                    {
                      "name": "DelegatorDNEinTopNorBottom",
                      "index": 1
                    },
                    {
                      "name": "DelegatorDNEInDelegatorSet",
                      "index": 2
                    },
                    {
                      "name": "CandidateDNE",
                      "index": 3
                    },
                    {
                      "name": "DelegationDNE",
                      "index": 4
                    },
                    {
                      "name": "DelegatorExists",
                      "index": 5
                    },
                    {
                      "name": "CandidateExists",
                      "index": 6
                    },
                    {
                      "name": "CandidateBondBelowMin",
                      "index": 7
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 8
                    },
                    {
                      "name": "DelegatorBondBelowMin",
                      "index": 9
                    },
                    {
                      "name": "DelegationBelowMin",
                      "index": 10
                    },
                    {
                      "name": "AlreadyOffline",
                      "index": 11
                    },
                    {
                      "name": "AlreadyActive",
                      "index": 12
                    },
                    {
                      "name": "DelegatorAlreadyLeaving",
                      "index": 13
                    },
                    {
                      "name": "DelegatorNotLeaving",
                      "index": 14
                    },
                    {
                      "name": "DelegatorCannotLeaveYet",
                      "index": 15
                    },
                    {
                      "name": "CannotDelegateIfLeaving",
                      "index": 16
                    },
                    {
                      "name": "CandidateAlreadyLeaving",
                      "index": 17
                    },
                    {
                      "name": "CandidateNotLeaving",
                      "index": 18
                    },
                    {
                      "name": "CandidateCannotLeaveYet",
                      "index": 19
                    },
                    {
                      "name": "CannotGoOnlineIfLeaving",
                      "index": 20
                    },
                    {
                      "name": "ExceedMaxDelegationsPerDelegator",
                      "index": 21
                    },
                    {
                      "name": "AlreadyDelegatedCandidate",
                      "index": 22
                    },
                    {
                      "name": "InvalidSchedule",
                      "index": 23
                    },
                    {
                      "name": "CannotSetBelowMin",
                      "index": 24
                    },
                    {
                      "name": "RoundLengthMustBeAtLeastTotalSelectedCollators",
                      "index": 25
                    },
                    {
                      "name": "NoWritingSameValue",
                      "index": 26
                    },
                    {
                      "name": "TooLowCandidateCountWeightHintJoinCandidates",
                      "index": 27
                    },
                    {
                      "name": "TooLowCandidateCountWeightHintCancelLeaveCandidates",
                      "index": 28
                    },
                    {
                      "name": "TooLowCandidateCountToLeaveCandidates",
                      "index": 29
                    },
                    {
                      "name": "TooLowDelegationCountToDelegate",
                      "index": 30
                    },
                    {
                      "name": "TooLowCandidateDelegationCountToDelegate",
                      "index": 31
                    },
                    {
                      "name": "TooLowCandidateDelegationCountToLeaveCandidates",
                      "index": 32
                    },
                    {
                      "name": "TooLowDelegationCountToLeaveDelegators",
                      "index": 33
                    },
                    {
                      "name": "PendingCandidateRequestsDNE",
                      "index": 34
                    },
                    {
                      "name": "PendingCandidateRequestAlreadyExists",
                      "index": 35
                    },
                    {
                      "name": "PendingCandidateRequestNotDueYet",
                      "index": 36
                    },
                    {
                      "name": "PendingDelegationRequestDNE",
                      "index": 37
                    },
                    {
                      "name": "PendingDelegationRequestAlreadyExists",
                      "index": 38
                    },
                    {
                      "name": "PendingDelegationRequestNotDueYet",
                      "index": 39
                    },
                    {
                      "name": "CannotDelegateLessThanOrEqualToLowestBottomWhenFull",
                      "index": 40
                    },
                    {
                      "name": "PendingDelegationRevoke",
                      "index": 41
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 317,
            "type": {
              "def": {
                "sequence": {
                  "type": 318
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "def": {
                "tuple": [
                  4,
                  9,
                  0
                ]
              }
            }
          },
          {
            "id": 319,
            "type": {
              "def": {
                "tuple": [
                  41,
                  6
                ]
              }
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "pallet_democracy",
                "PreimageStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Missing",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Available",
                      "fields": [
                        {
                          "name": "data",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "provider",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "since",
                          "type": 4,
                          "typeName": "BlockNumber"
                        },
                        {
                          "name": "expiry",
                          "type": 195,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "fields": [
                        {
                          "type": 322,
                          "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finished",
                      "fields": [
                        {
                          "name": "approved",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "ReferendumStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "proposal_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "threshold",
                      "type": 42,
                      "typeName": "VoteThreshold"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "tally",
                      "type": 323,
                      "typeName": "Tally<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Tally"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ayes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "nays",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "turnout",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "Voting"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Direct",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 325,
                          "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>"
                        },
                        {
                          "name": "delegations",
                          "type": 327,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 328,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Delegating",
                      "fields": [
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "Balance"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "conviction",
                          "type": 329,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "delegations",
                          "type": 327,
                          "typeName": "Delegations<Balance>"
                        },
                        {
                          "name": "prior",
                          "type": 328,
                          "typeName": "PriorLock<BlockNumber, Balance>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 325,
            "type": {
              "def": {
                "sequence": {
                  "type": 326
                }
              }
            }
          },
          {
            "id": 326,
            "type": {
              "def": {
                "tuple": [
                  4,
                  45
                ]
              }
            }
          },
          {
            "id": 327,
            "type": {
              "path": [
                "pallet_democracy",
                "types",
                "Delegations"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "capital",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "pallet_democracy",
                "vote",
                "PriorLock"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "pallet_democracy",
                "conviction",
                "Conviction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Locked1x",
                      "index": 1
                    },
                    {
                      "name": "Locked2x",
                      "index": 2
                    },
                    {
                      "name": "Locked3x",
                      "index": 3
                    },
                    {
                      "name": "Locked4x",
                      "index": 4
                    },
                    {
                      "name": "Locked5x",
                      "index": 5
                    },
                    {
                      "name": "Locked6x",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 330,
            "type": {
              "def": {
                "tuple": [
                  9,
                  42
                ]
              }
            }
          },
          {
            "id": 331,
            "type": {
              "def": {
                "tuple": [
                  4,
                  41
                ]
              }
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "pallet_democracy",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a sensitive action to be taken.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender must",
                        "have funds to cover the deposit.",
                        "",
                        "- `proposal_hash`: The hash of the proposal preimage.",
                        "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                        "",
                        "Emits `Proposed`.",
                        "",
                        "Weight: `O(p)`"
                      ]
                    },
                    {
                      "name": "second",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 63,
                          "typeName": "PropIndex"
                        },
                        {
                          "name": "seconds_upper_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Signals agreement with a particular proposal.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the sender",
                        "must have funds to cover the deposit, equal to the original deposit.",
                        "",
                        "- `proposal`: The index of the proposal to second.",
                        "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                        "  proposal. Extrinsic is weighted according to this value with no refund.",
                        "",
                        "Weight: `O(S)` where S is the number of seconds a proposal already has."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 63,
                          "typeName": "ReferendumIndex"
                        },
                        {
                          "name": "vote",
                          "type": 45,
                          "typeName": "AccountVote<BalanceOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                        "otherwise it is a vote to keep the status quo.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `ref_index`: The index of the referendum to vote for.",
                        "- `vote`: The vote configuration.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter has voted on."
                      ]
                    },
                    {
                      "name": "emergency_cancel",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `CancellationOrigin`.",
                        "",
                        "-`ref_index`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "external_propose",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Schedule a referendum to be tabled once it is legal to schedule an external",
                        "referendum.",
                        "",
                        "The dispatch origin of this call must be `ExternalOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                        "  Decoding vec of length V. Charged as maximum"
                      ]
                    },
                    {
                      "name": "external_propose_majority",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                        "an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalMajorityOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "external_propose_default",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                        "schedule an external referendum.",
                        "",
                        "The dispatch of this call must be `ExternalDefaultOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal.",
                        "",
                        "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                        "pre-scheduled `external_propose` call.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "fast_track",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voting_period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                        "immediately. If there is no externally-proposed referendum currently, or if there is one",
                        "but it is not a majority-carries referendum then it fails.",
                        "",
                        "The dispatch of this call must be `FastTrackOrigin`.",
                        "",
                        "- `proposal_hash`: The hash of the current external proposal.",
                        "- `voting_period`: The period that is allowed for voting on this proposal.",
                        "\tMust be always greater than zero.",
                        "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
                        "- `delay`: The number of block after voting has ended in approval and this should be",
                        "  enacted. This doesn't have a minimum amount.",
                        "",
                        "Emits `Started`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "veto_external",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Veto and blacklist the external proposal hash.",
                        "",
                        "The dispatch origin of this call must be `VetoOrigin`.",
                        "",
                        "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                        "",
                        "Emits `Vetoed`.",
                        "",
                        "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                      ]
                    },
                    {
                      "name": "cancel_referendum",
                      "fields": [
                        {
                          "name": "ref_index",
                          "type": 63,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a referendum.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `ref_index`: The index of the referendum to cancel.",
                        "",
                        "# Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "cancel_queued",
                      "fields": [
                        {
                          "name": "which",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Cancel a proposal queued for enactment.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "- `which`: The index of the referendum to cancel.",
                        "",
                        "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "conviction",
                          "type": 329,
                          "typeName": "Conviction"
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Delegate the voting power (with some given conviction) of the sending account.",
                        "",
                        "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                        "time appropriate for the conviction's lock period.",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                        "  - be delegating already; or",
                        "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                        "    through `reap_vote` or `unvote`).",
                        "",
                        "- `to`: The account whose voting the `target` account's voting power will follow.",
                        "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                        "  account is undelegated, the funds will be locked for the corresponding period.",
                        "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                        "  be more than the account's current balance.",
                        "",
                        "Emits `Delegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "index": 12,
                      "docs": [
                        "Undelegate the voting power of the sending account.",
                        "",
                        "Tokens may be unlocked following once an amount of time consistent with the lock period",
                        "of the conviction with which the delegation was issued.",
                        "",
                        "The dispatch origin of this call must be _Signed_ and the signing account must be",
                        "currently delegating.",
                        "",
                        "Emits `Undelegated`.",
                        "",
                        "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                        "  voted on. Weight is charged as if maximum votes."
                      ]
                    },
                    {
                      "name": "clear_public_proposals",
                      "index": 13,
                      "docs": [
                        "Clears all public proposals.",
                        "",
                        "The dispatch origin of this call must be _Root_.",
                        "",
                        "Weight: `O(1)`."
                      ]
                    },
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                        "in the dispatch queue but does require a deposit, returned once enacted.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Register the preimage for an upcoming proposal. This requires the proposal to be",
                        "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                        "the preimage has not been uploaded before and matches some imminent proposal,",
                        "no fee is paid.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `encoded_proposal`: The preimage of a proposal.",
                        "",
                        "Emits `PreimageNoted`.",
                        "",
                        "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
                      ]
                    },
                    {
                      "name": "note_imminent_preimage_operational",
                      "fields": [
                        {
                          "name": "encoded_proposal",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
                      ]
                    },
                    {
                      "name": "reap_preimage",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "proposal_len_upper_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Remove an expired proposal preimage and collect the deposit.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `proposal_hash`: The preimage hash of a proposal.",
                        "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                        "  weighted according to this value with no refund.",
                        "",
                        "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                        "noted, if it's the same account doing it. If it's a different account, then it'll only",
                        "work an additional `EnactmentPeriod` later.",
                        "",
                        "Emits `PreimageReaped`.",
                        "",
                        "Weight: `O(D)` where D is length of proposal."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Unlock tokens that have an expired lock.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account to remove the lock on.",
                        "",
                        "Weight: `O(R)` with R number of vote of target."
                      ]
                    },
                    {
                      "name": "remove_vote",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If:",
                        "- the referendum was cancelled, or",
                        "- the referendum is ongoing, or",
                        "- the referendum has ended such that",
                        "  - the vote of the account was in opposition to the result; or",
                        "  - there was no conviction to the account's vote; or",
                        "  - the account made a split vote",
                        "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                        "funds being available.",
                        "",
                        "If, however, the referendum has ended and:",
                        "- it finished corresponding to the vote of the account, and",
                        "- the account made a standard vote with conviction, and",
                        "- the lock period of the conviction is not over",
                        "...then the lock will be aggregated into the overall account's lock, which may involve",
                        "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                        "of both the amount locked and the time is it locked for).",
                        "",
                        "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                        "registered for referendum `index`.",
                        "",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "remove_other_vote",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Remove a vote for a referendum.",
                        "",
                        "If the `target` is equal to the signer, then this function is exactly equivalent to",
                        "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                        "either because the referendum was cancelled, because the voter lost the referendum or",
                        "because the conviction period is over.",
                        "",
                        "The dispatch origin of this call must be _Signed_.",
                        "",
                        "- `target`: The account of the vote to be removed; this account must have voted for",
                        "  referendum `index`.",
                        "- `index`: The index of referendum of the vote to be removed.",
                        "",
                        "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                        "  Weight is calculated for the maximum number of vote."
                      ]
                    },
                    {
                      "name": "enact_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ReferendumIndex"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Enact a proposal from a referendum. For now we just make the weight be the maximum."
                      ]
                    },
                    {
                      "name": "blacklist",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "maybe_ref_index",
                          "type": 195,
                          "typeName": "Option<ReferendumIndex>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Permanently place a proposal into the blacklist. This prevents it from ever being",
                        "proposed again.",
                        "",
                        "If called on a queued public or external proposal, then this will result in it being",
                        "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                        "then it will be cancelled.",
                        "",
                        "The dispatch origin of this call must be `BlacklistOrigin`.",
                        "",
                        "- `proposal_hash`: The proposal hash to blacklist permanently.",
                        "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                        "cancelled.",
                        "",
                        "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                        "  reasonable value)."
                      ]
                    },
                    {
                      "name": "cancel_proposal",
                      "fields": [
                        {
                          "name": "prop_index",
                          "type": 63,
                          "typeName": "PropIndex"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Remove a proposal.",
                        "",
                        "The dispatch origin of this call must be `CancelProposalOrigin`.",
                        "",
                        "- `prop_index`: The index of the proposal to cancel.",
                        "",
                        "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 334,
            "type": {
              "path": [
                "pallet_democracy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValueLow",
                      "index": 0,
                      "docs": [
                        "Value too low"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 1,
                      "docs": [
                        "Proposal does not exist"
                      ]
                    },
                    {
                      "name": "AlreadyCanceled",
                      "index": 2,
                      "docs": [
                        "Cannot cancel the same proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 3,
                      "docs": [
                        "Proposal already made"
                      ]
                    },
                    {
                      "name": "ProposalBlacklisted",
                      "index": 4,
                      "docs": [
                        "Proposal still blacklisted"
                      ]
                    },
                    {
                      "name": "NotSimpleMajority",
                      "index": 5,
                      "docs": [
                        "Next external proposal not simple majority"
                      ]
                    },
                    {
                      "name": "InvalidHash",
                      "index": 6,
                      "docs": [
                        "Invalid hash"
                      ]
                    },
                    {
                      "name": "NoProposal",
                      "index": 7,
                      "docs": [
                        "No external proposal"
                      ]
                    },
                    {
                      "name": "AlreadyVetoed",
                      "index": 8,
                      "docs": [
                        "Identity may not veto a proposal twice"
                      ]
                    },
                    {
                      "name": "DuplicatePreimage",
                      "index": 9,
                      "docs": [
                        "Preimage already noted"
                      ]
                    },
                    {
                      "name": "NotImminent",
                      "index": 10,
                      "docs": [
                        "Not imminent"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 11,
                      "docs": [
                        "Too early"
                      ]
                    },
                    {
                      "name": "Imminent",
                      "index": 12,
                      "docs": [
                        "Imminent"
                      ]
                    },
                    {
                      "name": "PreimageMissing",
                      "index": 13,
                      "docs": [
                        "Preimage not found"
                      ]
                    },
                    {
                      "name": "ReferendumInvalid",
                      "index": 14,
                      "docs": [
                        "Vote given for invalid referendum"
                      ]
                    },
                    {
                      "name": "PreimageInvalid",
                      "index": 15,
                      "docs": [
                        "Invalid preimage"
                      ]
                    },
                    {
                      "name": "NoneWaiting",
                      "index": 16,
                      "docs": [
                        "No proposals waiting"
                      ]
                    },
                    {
                      "name": "NotVoter",
                      "index": 17,
                      "docs": [
                        "The given account did not vote on the referendum."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 18,
                      "docs": [
                        "The actor has no permission to conduct the action."
                      ]
                    },
                    {
                      "name": "AlreadyDelegating",
                      "index": 19,
                      "docs": [
                        "The account is already delegating."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 20,
                      "docs": [
                        "Too high a balance was provided that the account cannot afford."
                      ]
                    },
                    {
                      "name": "NotDelegating",
                      "index": 21,
                      "docs": [
                        "The account is not currently delegating."
                      ]
                    },
                    {
                      "name": "VotesExist",
                      "index": 22,
                      "docs": [
                        "The account currently has votes attached to it and the operation cannot succeed until",
                        "these are removed, either through `unvote` or `reap_vote`."
                      ]
                    },
                    {
                      "name": "InstantNotAllowed",
                      "index": 23,
                      "docs": [
                        "The instant referendum origin is currently disallowed."
                      ]
                    },
                    {
                      "name": "Nonsense",
                      "index": 24,
                      "docs": [
                        "Delegation to oneself makes no sense."
                      ]
                    },
                    {
                      "name": "WrongUpperBound",
                      "index": 25,
                      "docs": [
                        "Invalid upper bound."
                      ]
                    },
                    {
                      "name": "MaxVotesReached",
                      "index": 26,
                      "docs": [
                        "Maximum number of votes reached."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 27,
                      "docs": [
                        "Maximum number of proposals reached."
                      ]
                    },
                    {
                      "name": "VotingPeriodLow",
                      "index": 28,
                      "docs": [
                        "Voting period too low"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 209,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "bifrost_kusama_runtime",
                "Call"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 213,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 229,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "type": 231,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 250,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 268,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "type": 276,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 288,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ParachainStaking",
                      "fields": [
                        {
                          "type": 314,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Democracy",
                      "fields": [
                        {
                          "type": 333,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 337,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 338,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "PhragmenElection",
                      "fields": [
                        {
                          "type": 339,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PhragmenElection, Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "CouncilMembership",
                      "fields": [
                        {
                          "type": 341,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CouncilMembership, Runtime>"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "TechnicalMembership",
                      "fields": [
                        {
                          "type": 342,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 343,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 344,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "DmpQueue",
                      "fields": [
                        {
                          "type": 369,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 370,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 379,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Proxy",
                      "fields": [
                        {
                          "type": 382,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Multisig",
                      "fields": [
                        {
                          "type": 384,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "type": 387,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>"
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 427,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "type": 429,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "type": 430,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>"
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Tips",
                      "fields": [
                        {
                          "type": 431,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>"
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Preimage",
                      "fields": [
                        {
                          "type": 432,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "XTokens",
                      "fields": [
                        {
                          "type": 433,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>"
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 435,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>"
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "type": 436,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>"
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "OrmlXcm",
                      "fields": [
                        {
                          "type": 438,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OrmlXcm, Runtime>"
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "ZenlinkProtocol",
                      "fields": [
                        {
                          "type": 439,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ZenlinkProtocol, Runtime>"
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "MerkleDistributor",
                      "fields": [
                        {
                          "type": 441,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MerkleDistributor, Runtime>"
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "FlexibleFee",
                      "fields": [
                        {
                          "type": 442,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FlexibleFee, Runtime>"
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Salp",
                      "fields": [
                        {
                          "type": 445,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Salp, Runtime>"
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "LiquidityMiningDOT",
                      "fields": [
                        {
                          "type": 448,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LiquidityMiningDOT, Runtime>"
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "LiquidityMining",
                      "fields": [
                        {
                          "type": 450,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LiquidityMining, Runtime>"
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "TokenIssuer",
                      "fields": [
                        {
                          "type": 451,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TokenIssuer, Runtime>"
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "LighteningRedeem",
                      "fields": [
                        {
                          "type": 452,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LighteningRedeem, Runtime>"
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "SalpLite",
                      "fields": [
                        {
                          "type": 453,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SalpLite, Runtime>"
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "CallSwitchgear",
                      "fields": [
                        {
                          "type": 456,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CallSwitchgear, Runtime>"
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "VSBondAuction",
                      "fields": [
                        {
                          "type": 457,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VSBondAuction, Runtime>"
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "AssetRegistry",
                      "fields": [
                        {
                          "type": 458,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRegistry, Runtime>"
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "VtokenMinting",
                      "fields": [
                        {
                          "type": 459,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VtokenMinting, Runtime>"
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Slp",
                      "fields": [
                        {
                          "type": 460,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slp, Runtime>"
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "XcmInterface",
                      "fields": [
                        {
                          "type": 461,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmInterface, Runtime>"
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "VstokenConversion",
                      "fields": [
                        {
                          "type": 464,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VstokenConversion, Runtime>"
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Farming",
                      "fields": [
                        {
                          "type": 465,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Farming, Runtime>"
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "SystemStaking",
                      "fields": [
                        {
                          "type": 472,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SystemStaking, Runtime>"
                        }
                      ],
                      "index": 120
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 161,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 336,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 63,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 336,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 66,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 338,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 161,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 336,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 63,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 336,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 66,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "votes",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vote for a set of candidates for the upcoming round of election. This can be called to",
                        "set the initial votes, or update already existing votes.",
                        "",
                        "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                        "reserved. The deposit is based on the number of votes and can be updated over time.",
                        "",
                        "The `votes` should:",
                        "  - not be empty.",
                        "  - be less than the number of possible candidates. Note that all current members and",
                        "    runners-up are also automatically candidates for the next round.",
                        "",
                        "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "It is the responsibility of the caller to **NOT** place all of their balance into the",
                        "lock and keep some for further operations.",
                        "",
                        "# <weight>",
                        "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_voter",
                      "index": 1,
                      "docs": [
                        "Remove `origin` as a voter.",
                        "",
                        "This removes the lock and returns the deposit.",
                        "",
                        "The dispatch origin of this call must be signed and be a voter."
                      ]
                    },
                    {
                      "name": "submit_candidacy",
                      "fields": [
                        {
                          "name": "candidate_count",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                        "",
                        "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                        "or leave the system while their deposit is slashed.",
                        "",
                        "The dispatch origin of this call must be signed.",
                        "",
                        "### Warning",
                        "",
                        "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                        "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                        "",
                        "# <weight>",
                        "The number of current candidates must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "renounce_candidacy",
                      "fields": [
                        {
                          "name": "renouncing",
                          "type": 340,
                          "typeName": "Renouncing"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Renounce one's intention to be a candidate for the next election round. 3 potential",
                        "outcomes exist:",
                        "",
                        "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                        "  unreserved, returned and origin is removed as a candidate.",
                        "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                        "  origin is removed as a runner-up.",
                        "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                        "  removed as a member, consequently not being a candidate for the next round anymore.",
                        "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                        "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                        "  next round.",
                        "",
                        "The dispatch origin of this call must be signed, and have one of the above roles.",
                        "",
                        "# <weight>",
                        "The type of renouncing must be provided as witness data.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "has_replacement",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove a particular member from the set. This is effective immediately and the bond of",
                        "the outgoing member is slashed.",
                        "",
                        "If a runner-up is available, then the best runner-up will be removed and replaces the",
                        "outgoing member. Otherwise, a new phragmen election is started.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "Note that this does not affect the designated block number of the next election.",
                        "",
                        "# <weight>",
                        "If we have a replacement, we use a small weight. Else, since this is a root call and",
                        "will go into phragmen, we assume full block for now.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clean_defunct_voters",
                      "fields": [
                        {
                          "name": "num_voters",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "num_defunct",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                        "deposit of the removed voters are returned.",
                        "",
                        "This is an root function to be used only for cleaning the state.",
                        "",
                        "The dispatch origin of this call must be root.",
                        "",
                        "# <weight>",
                        "The total number of voters and those that are defunct must be provided as witness data.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Renouncing"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Member",
                      "index": 0
                    },
                    {
                      "name": "RunnerUp",
                      "index": 1
                    },
                    {
                      "name": "Candidate",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Services a single overweight XCM.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight XCM to service",
                        "- `weight_limit`: The amount of weight that XCM execution may take.",
                        "",
                        "Errors:",
                        "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
                        "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
                        "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    },
                    {
                      "name": "suspend_xcm_execution",
                      "index": 1,
                      "docs": [
                        "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "resume_xcm_execution",
                      "index": 2,
                      "docs": [
                        "Resumes all XCM executions for the XCMP queue.",
                        "",
                        "Note that this function doesn't change the status of the in/out bound channels.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "update_suspend_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
                        "suspend their sending.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.suspend_value`"
                      ]
                    },
                    {
                      "name": "update_drop_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
                        "messages from the channel.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                      ]
                    },
                    {
                      "name": "update_resume_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
                        "message sending may recommence after it has been suspended.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                      ]
                    },
                    {
                      "name": "update_threshold_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Overwrites the amount of remaining weight under which we stop processing messages.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.threshold_weight`"
                      ]
                    },
                    {
                      "name": "update_weight_restrict_decay",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Overwrites the speed to which the available weight approaches the maximum weight.",
                        "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
                      ]
                    },
                    {
                      "name": "update_xcmp_max_individual_weight",
                      "fields": [
                        {
                          "name": "new",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Overwrite the maximum amount of weight any individual message may consume.",
                        "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 345,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 356,
                          "typeName": "Box<VersionedXcm<<T as SysConfig>::Call>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                        "maximum amount of weight that the message could take to be executed, then no execution",
                        "attempt will be made.",
                        "",
                        "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                        "to completion; only that *some* of it was executed."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "xcm_version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 195,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be Root.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be Root.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 90,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the sovereign account of a destination",
                        "chain and forward a notification XCM.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                        "  `dest` side.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 90,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                        "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                        "  an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                        "  `dest` side. May not be empty.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 346,
                          "typeName": "v0::Xcm<Call>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 351,
                          "typeName": "v1::Xcm<Call>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 71,
                          "typeName": "v2::Xcm<Call>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 346,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 350,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 85,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 86,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 346,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 347,
            "type": {
              "def": {
                "sequence": {
                  "type": 348
                }
              }
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 94,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 349,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "def": {
                "sequence": {
                  "type": 346
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 355,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 85,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 86,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 61,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 351,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "def": {
                "sequence": {
                  "type": 353
                }
              }
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 76,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 354,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 354,
            "type": {
              "def": {
                "sequence": {
                  "type": 351
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 357,
                          "typeName": "v0::Xcm<Call>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 362,
                          "typeName": "v1::Xcm<Call>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 366,
                          "typeName": "v2::Xcm<Call>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "xcm",
                "v0",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 358,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposit",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 358,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TeleportAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "effects",
                          "type": 358,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 350,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 85,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 361,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 357,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "def": {
                "sequence": {
                  "type": 359
                }
              }
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "xcm",
                "v0",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "receive",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "reserve",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 347,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 95,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Vec<MultiAsset>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 94,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "xcm",
                          "type": 360,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 360,
            "type": {
              "def": {
                "sequence": {
                  "type": 357
                }
              }
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "xcm",
                "v1",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 363,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 363,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "effects",
                          "type": 363,
                          "typeName": "Vec<Order<Call>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "response",
                          "type": 355,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 85,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 361,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RelayedFrom",
                      "fields": [
                        {
                          "name": "who",
                          "type": 61,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "message",
                          "type": 362,
                          "typeName": "alloc::boxed::Box<Xcm<Call>>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 363,
            "type": {
              "def": {
                "sequence": {
                  "type": 364
                }
              }
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "xcm",
                "v1",
                "order",
                "Order"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Noop",
                      "index": 0
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "effects",
                          "type": 352,
                          "typeName": "Vec<Order<()>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 76,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "debt",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "halt_on_error",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "instructions",
                          "type": 365,
                          "typeName": "Vec<Xcm<Call>>"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "def": {
                "sequence": {
                  "type": 362
                }
              }
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 367,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "def": {
                "sequence": {
                  "type": 368
                }
              }
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 82,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 85,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 66,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 361,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 61,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 63,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 74,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 71,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 87,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 76,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 90,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 366,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 366,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 74,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 66,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "service_overweight",
                      "fields": [
                        {
                          "name": "index",
                          "type": 8,
                          "typeName": "OverweightIndex"
                        },
                        {
                          "name": "weight_limit",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Service a single overweight message.",
                        "",
                        "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                        "- `index`: The index of the overweight message to service.",
                        "- `weight_limit`: The amount of weight that message execution may take.",
                        "",
                        "Errors:",
                        "- `Unknown`: Message of `index` is unknown.",
                        "- `OverLimit`: Message execution may use greater than `weight_limit`.",
                        "",
                        "Events:",
                        "- `OverweightServiced`: On success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 370,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 371,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 107,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 371,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 372,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 371,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 371,
            "type": {
              "def": {
                "sequence": {
                  "type": 336
                }
              }
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "bifrost_kusama_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 373,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 374,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "TechnicalCommittee",
                      "fields": [
                        {
                          "type": 375,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 376,
                          "typeName": "pallet_xcm::Origin"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 377,
                          "typeName": "cumulus_pallet_xcm::Origin"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 378,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Xcm",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Origin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Relay",
                      "index": 0
                    },
                    {
                      "name": "SiblingParachain",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 380,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 381,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 380,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 381,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 380,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 381,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 380,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 381,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 102
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 102
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "MaybeHashed"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 336
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "type": 336,
                          "typeName": "T"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "proxy",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 383,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorised for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 106,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register a proxy account for the sender that is able to make calls on its behalf.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to make a proxy.",
                        "- `proxy_type`: The permissions allowed for this proxy account.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxy",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 106,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Unregister a proxy account for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                        "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_proxies",
                      "index": 3,
                      "docs": [
                        "Unregister all proxy accounts for the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                        "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "anonymous",
                      "fields": [
                        {
                          "name": "proxy_type",
                          "type": 106,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 107,
                          "typeName": "u16"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                        "initialize it with a proxy of `proxy_type` for `origin` sender.",
                        "",
                        "Requires a `Signed` origin.",
                        "",
                        "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                        "new account. This will almost always be the most permissive `ProxyType` possible to",
                        "allow for maximum flexibility.",
                        "- `index`: A disambiguation index, in case this is called multiple times in the same",
                        "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                        "want to use `0`.",
                        "- `delay`: The announcement period required of the initial proxy. Will generally be",
                        "zero.",
                        "",
                        "Fails with `Duplicate` if this has already been called in this transaction, from the",
                        "same sender, with the same parameters.",
                        "",
                        "Fails if there are insufficient funds to pay for deposit.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>",
                        "TODO: Might be over counting 1 read"
                      ]
                    },
                    {
                      "name": "kill_anonymous",
                      "fields": [
                        {
                          "name": "spawner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proxy_type",
                          "type": 106,
                          "typeName": "T::ProxyType"
                        },
                        {
                          "name": "index",
                          "type": 107,
                          "typeName": "u16"
                        },
                        {
                          "name": "height",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "ext_index",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Removes a previously spawned anonymous proxy.",
                        "",
                        "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                        "inaccessible.",
                        "",
                        "Requires a `Signed` origin, and the sender account must have been created by a call to",
                        "`anonymous` with corresponding parameters.",
                        "",
                        "- `spawner`: The account that originally called `anonymous` to create this account.",
                        "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                        "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                        "- `height`: The height of the chain when the call to `anonymous` was processed.",
                        "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                        "",
                        "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                        "account whose `anonymous` call has corresponding parameters.",
                        "",
                        "# <weight>",
                        "Weight is a function of the number of proxies the user has (P).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "announce",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Publish the hash of a proxy-call that will be made in the future.",
                        "",
                        "This must be called some number of blocks before the corresponding `proxy` is attempted",
                        "if the delay associated with the proxy relationship is greater than zero.",
                        "",
                        "No more than `MaxPending` announcements may be made at any one time.",
                        "",
                        "This will take a deposit of `AnnouncementDepositFactor` as well as",
                        "`AnnouncementDepositBase` if there are no other pending announcements.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "remove_announcement",
                      "fields": [
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove a given announcement.",
                        "",
                        "May be called by a proxy account to remove a call they previously announced and return",
                        "the deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `call_hash`: The hash of the call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_announcement",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "call_hash",
                          "type": 9,
                          "typeName": "CallHashOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove the given announcement of a delegate.",
                        "",
                        "May be called by a target (proxied) account to remove a call that one of their delegates",
                        "(`delegate`) has announced they want to execute. The deposit is returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `delegate`: The account that previously announced the call.",
                        "- `call_hash`: The hash of the call to be made.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "proxy_announced",
                      "fields": [
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "real",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "force_proxy_type",
                          "type": 383,
                          "typeName": "Option<T::ProxyType>"
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatch the given `call` from an account that the sender is authorized for through",
                        "`add_proxy`.",
                        "",
                        "Removes any corresponding announcement(s).",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `real`: The account that the proxy will make a call on behalf of.",
                        "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                        "- `call`: The call to be made by the `real` account.",
                        "",
                        "# <weight>",
                        "Weight is a function of:",
                        "- A: the number of announcements made.",
                        "- P: the number of proxies the user has.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 106
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 106
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_multi_threshold_1",
                      "fields": [
                        {
                          "name": "other_signatories",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "call",
                          "type": 336,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Immediately dispatch a multi-signature call using a single approval from the caller.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `other_signatories`: The accounts (other than the sender) who are part of the",
                        "multi-signature, but do not participate in the approval process.",
                        "- `call`: The call to be executed.",
                        "",
                        "Result is equivalent to the dispatched result.",
                        "",
                        "# <weight>",
                        "O(Z + C) where Z is the length of the call and C its execution weight.",
                        "-------------------------------",
                        "- DB Weight: None",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 107,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 385,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call",
                          "type": 386,
                          "typeName": "OpaqueCall<T>"
                        },
                        {
                          "name": "store_call",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "If there are enough, then dispatch the call.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call`: The call to be executed.",
                        "",
                        "NOTE: Unless this is the final approval, you will generally want to use",
                        "`approve_as_multi` instead, since it only requires a hash of the call.",
                        "",
                        "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                        "on success, result is `Ok` and the result from the interior call, if it was executed,",
                        "may be found in the deposited `MultisigExecuted` event.",
                        "",
                        "# <weight>",
                        "- `O(S + Z + Call)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- The weight of the `call`.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "-------------------------------",
                        "- DB Weight:",
                        "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                        "- Plus Call Weight",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 107,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "maybe_timepoint",
                          "type": 385,
                          "typeName": "Option<Timepoint<T::BlockNumber>>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Register approval for a dispatch to be made from a deterministic composite account if",
                        "approved by a total of `threshold - 1` of `other_signatories`.",
                        "",
                        "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                        "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                        "is cancelled.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                        "not the first approval, then it must be `Some`, with the timepoint (block number and",
                        "transaction index) of the first approval transaction.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- Up to one binary search and insert (`O(logS + S)`).",
                        "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                        "- One event.",
                        "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                        "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account]",
                        "    - Write: Multisig Storage, [Caller Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_as_multi",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 107,
                          "typeName": "u16"
                        },
                        {
                          "name": "other_signatories",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "timepoint",
                          "type": 109,
                          "typeName": "Timepoint<T::BlockNumber>"
                        },
                        {
                          "name": "call_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                        "for this operation will be unreserved on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                        "- `other_signatories`: The accounts (other than the sender) who can approve this",
                        "dispatch. May not be empty.",
                        "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                        "transaction for this dispatch.",
                        "- `call_hash`: The hash of the call to be executed.",
                        "",
                        "# <weight>",
                        "- `O(S)`.",
                        "- Up to one balance-reserve or unreserve operation.",
                        "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                        "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                        "- One encode & hash, both of complexity `O(S)`.",
                        "- One event.",
                        "- I/O: 1 read `O(S)`, one remove.",
                        "- Storage: removes one item.",
                        "----------------------------------",
                        "- DB Weight:",
                        "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 109
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 109
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "misc",
                "WrapperKeepOpaque"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 336
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 63
                    },
                    {
                      "type": 336,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                        "- One storage mutation (codec `O(R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 388,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "# <weight>",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)",
                        "- One balance reserve operation.",
                        "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 422,
                          "typeName": "Vec<(T::AccountId, Data)>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "# <weight>",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "- At most one balance operations.",
                        "- DB:",
                        "  - `P + S` storage mutations (codec complexity `O(1)`)",
                        "  - One storage read (codec complexity `O(P)`).",
                        "  - One storage write (codec complexity `O(S)`).",
                        "  - One storage-exists (`IdentityOf::contains_key`).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                        "- One balance-unreserve operation.",
                        "- `2` storage reads and `S + 2` storage deletions.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 63,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "max_fee",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- One storage mutation `O(R + X)`.",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fee",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "fields",
                          "type": 424,
                          "typeName": "IdentityFields"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 63,
                          "typeName": "RegistrarIndex"
                        },
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "judgement",
                          "type": 426,
                          "typeName": "Judgement<BalanceOf<T>>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-transfer operation.",
                        "- Up to one account-lookup operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`.",
                        "- One balance-reserve operation.",
                        "- `S + 2` storage mutations.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "data",
                          "type": 391,
                          "typeName": "Data"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "data",
                          "type": 391,
                          "typeName": "Data"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 389,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>"
                    },
                    {
                      "name": "display",
                      "type": 391,
                      "typeName": "Data"
                    },
                    {
                      "name": "legal",
                      "type": 391,
                      "typeName": "Data"
                    },
                    {
                      "name": "web",
                      "type": 391,
                      "typeName": "Data"
                    },
                    {
                      "name": "riot",
                      "type": 391,
                      "typeName": "Data"
                    },
                    {
                      "name": "email",
                      "type": 391,
                      "typeName": "Data"
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 421,
                      "typeName": "Option<[u8; 20]>"
                    },
                    {
                      "name": "image",
                      "type": 391,
                      "typeName": "Data"
                    },
                    {
                      "name": "twitter",
                      "type": 391,
                      "typeName": "Data"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 390
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 420,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 390,
            "type": {
              "def": {
                "tuple": [
                  391,
                  391
                ]
              }
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "type": 392
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "type": 393
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "type": 394
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "type": 395
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "type": 14
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "type": 396
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "type": 397
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "type": 398
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "type": 80
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "type": 399
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "type": 400
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "type": 401
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "type": 402
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "type": 403
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "type": 404
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "type": 405
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "type": 81
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "type": 406
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "type": 407
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "type": 408
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "type": 67
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "type": 409
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "type": 410
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "type": 411
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "type": 412
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "type": 413
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "type": 414
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "type": 415
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "type": 416
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "type": 417
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "type": 418
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "type": 419
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 37
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 392,
            "type": {
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 393,
            "type": {
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 395,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 396,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 397,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 398,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 399,
            "type": {
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 400,
            "type": {
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 401,
            "type": {
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 403,
            "type": {
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 404,
            "type": {
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 405,
            "type": {
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 406,
            "type": {
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 407,
            "type": {
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 408,
            "type": {
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 411,
            "type": {
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 412,
            "type": {
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 413,
            "type": {
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 414,
            "type": {
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 415,
            "type": {
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 416,
            "type": {
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 417,
            "type": {
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 418,
            "type": {
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 420,
            "type": {
              "def": {
                "sequence": {
                  "type": 390
                }
              }
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 67
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 67
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 422,
            "type": {
              "def": {
                "sequence": {
                  "type": 423
                }
              }
            }
          },
          {
            "id": 423,
            "type": {
              "def": {
                "tuple": [
                  0,
                  391
                ]
              }
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 425
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 8,
                      "typeName": "IdentityField"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "index": 1
                    },
                    {
                      "name": "Legal",
                      "index": 2
                    },
                    {
                      "name": "Web",
                      "index": 4
                    },
                    {
                      "name": "Riot",
                      "index": 8
                    },
                    {
                      "name": "Email",
                      "index": 16
                    },
                    {
                      "name": "PgpFingerprint",
                      "index": 32
                    },
                    {
                      "name": "Image",
                      "index": 64
                    },
                    {
                      "name": "Twitter",
                      "index": 128
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Reasonable",
                      "index": 2
                    },
                    {
                      "name": "KnownGood",
                      "index": 3
                    },
                    {
                      "name": "OutOfDate",
                      "index": 4
                    },
                    {
                      "name": "LowQuality",
                      "index": 5
                    },
                    {
                      "name": "Erroneous",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "bifrost_vesting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vest",
                      "index": 0,
                      "docs": [
                        "Unlock any vested funds of the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 2 Reads, 2 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vest_other",
                      "fields": [
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Unlock any vested funds of a `target` account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                        "locked under this pallet.",
                        "",
                        "Emits either `VestingCompleted` or `VestingUpdated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule",
                          "type": 428,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `amount`: The amount of funds to transfer and will be vested.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 3 Reads, 3 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_vested_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule",
                          "type": 428,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force a vested transfer.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The account whose funds should be transferred.",
                        "- `target`: The account that should be transferred the vested funds.",
                        "- `amount`: The amount of funds to transfer and will be vested.",
                        "- `schedule`: The vesting schedule attached to the transfer.",
                        "",
                        "Emits `VestingCreated`.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- DbWeight: 4 Reads, 4 Writes",
                        "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_set_vested",
                      "fields": [
                        {
                          "name": "source",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule",
                          "type": 428,
                          "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "init_vesting_start_at",
                      "fields": [
                        {
                          "name": "vesting_start_at",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "set_vesting_per_block",
                      "fields": [
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "per_block",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "force_set_cliff",
                      "fields": [
                        {
                          "name": "target",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "cliff_block",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "bifrost_vesting",
                "VestingInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "locked",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "starting_block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 429,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 63,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 63,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 63,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "The original deposit will no longer be returned.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "# <weight>",
                        "- Complexity: O(A) where `A` is the number of approvals",
                        "- Db reads and writes: `Approvals`",
                        "# </weight>",
                        "",
                        "Errors:",
                        "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                        "i.e., the proposal has not been approved. This could also mean the proposal does not",
                        "exist altogether, thus there is no way it would have been approved in the first place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_bounty",
                      "fields": [
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a new bounty.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                        "or slashed when rejected.",
                        "",
                        "- `curator`: The curator account whom will manage this bounty.",
                        "- `fee`: The curator fee.",
                        "- `value`: The total payment amount of this bounty, curator fee included.",
                        "- `description`: The description of this bounty."
                      ]
                    },
                    {
                      "name": "approve_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "curator",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "fee",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Assign a curator to a funded bounty.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unassign_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Unassign curator from a bounty.",
                        "",
                        "This function can only be called by the `RejectOrigin` a signed origin.",
                        "",
                        "If this function is called by the `RejectOrigin`, we assume that the curator is",
                        "malicious or inactive. As a result, we will slash the curator when possible.",
                        "",
                        "If the origin is the curator, we take this as a sign they are unable to do their job and",
                        "they willingly give up. We could slash them, but for now we allow them to recover their",
                        "deposit and exit without issue. (We may want to change this if it is abused.)",
                        "",
                        "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                        "anyone in the community to call out that a curator is not doing their due diligence, and",
                        "we should pick a new curator. In this case the curator should also be slashed.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "accept_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Accept the curator role for a bounty.",
                        "A deposit will be reserved from curator and refund upon successful payout.",
                        "",
                        "May only be called from the curator.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "award_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "beneficiary",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                        "after a delay.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to award.",
                        "- `beneficiary`: The beneficiary account whom will receive the payout.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim the payout from an awarded bounty after payout delay.",
                        "",
                        "The dispatch origin for this call must be the beneficiary of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to claim.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                        "the curator deposit will be unreserved if possible.",
                        "",
                        "Only `T::RejectOrigin` is able to cancel a bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to cancel.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "extend_bounty_expiry",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 63,
                          "typeName": "BountyIndex"
                        },
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Extend the expiry time of an active bounty.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to extend.",
                        "- `remark`: additional information.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 431,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_awesome",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R)` where `R` length of `reason`.",
                        "  - encoding and hashing of 'reason'",
                        "- DbReads: `Reasons`, `Tips`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "retract_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                        "",
                        "If successful, the original deposit will be unreserved.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                        "must have been reported by the signing account through `report_awesome` (and not",
                        "through `tip_new`).",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "Emits `TipRetracted` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`",
                        "  - Depends on the length of `T::Hash` which is fixed.",
                        "- DbReads: `Tips`, `origin account`",
                        "- DbWrites: `Reasons`, `Tips`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip_new",
                      "fields": [
                        {
                          "name": "reason",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "tip_value",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Give a tip for something new; no finder's fee will be taken.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                        "  a UTF-8-encoded URL.",
                        "- `who`: The account which should be credited for the tip.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `NewTip` if successful.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                        "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                        "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                        "    `T::Tippers`.",
                        "  - `O(R)`: hashing and encoding of reason of length `R`",
                        "- DbReads: `Tippers`, `Reasons`",
                        "- DbWrites: `Reasons`, `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "tip_value",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Declare a tip value for an already-open tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                        "member of the `Tippers` set.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                        "  account ID.",
                        "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                        "  value of active tippers will be given to the `who`.",
                        "",
                        "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                        "has started.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                        "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                        "",
                        "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                        "  is weighted as if almost full i.e of length `T-1`.",
                        "- DbReads: `Tippers`, `Tips`",
                        "- DbWrites: `Tips`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close and payout a tip.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "The tip identified by `hash` must have finished its countdown period.",
                        "",
                        "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                        "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                        "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                        "  depends on the implementation of `T::Tippers`.",
                        "- DbReads: `Tips`, `Tippers`, `tip finder`",
                        "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "slash_tip",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove and slash an already-open tip.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "As a result, the finder is slashed and the deposits are lost.",
                        "",
                        "Emits `TipSlashed` if successful.",
                        "",
                        "# <weight>",
                        "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                        "  The actual cost depends on the implementation of `T::Tippers`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 432,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "note_preimage",
                      "fields": [
                        {
                          "name": "bytes",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Register a preimage on-chain.",
                        "",
                        "If the preimage was previously requested, no fees or deposits are taken for providing",
                        "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                      ]
                    },
                    {
                      "name": "unnote_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Clear an unrequested preimage from the runtime storage."
                      ]
                    },
                    {
                      "name": "request_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                        "",
                        "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                        "a user may have paid, and take the control of the preimage out of their hands."
                      ]
                    },
                    {
                      "name": "unrequest_preimage",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Clear a previously made request for a preimage.",
                        "",
                        "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 433,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer native currencies.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 434,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer `MultiAsset`.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_with_fee",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer native currencies specifying the fee and amount as",
                        "separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the amount to be spent to pay for execution in destination",
                        "chain. Both fee and amount will be subtracted form the callers",
                        "balance.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiasset_with_fee",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 434,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "fee",
                          "type": 434,
                          "typeName": "Box<VersionedMultiAsset>"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer `MultiAsset` specifying the fee and amount as separate.",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee` is the multiasset to be spent to pay for execution in",
                        "destination chain. Both fee and amount will be subtracted form the",
                        "callers balance For now we only accept fee and asset having the same",
                        "`MultiLocation` id.",
                        "",
                        "If `fee` is not high enough to cover for the execution costs in the",
                        "destination chain, then the assets will be trapped in the",
                        "destination chain",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multicurrencies",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 135,
                          "typeName": "Vec<(T::CurrencyId, T::Balance)>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer several currencies specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the currencies tuple that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    },
                    {
                      "name": "transfer_multiassets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 92,
                          "typeName": "Box<VersionedMultiAssets>"
                        },
                        {
                          "name": "fee_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "dest_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Transfer several `MultiAsset` specifying the item to be used as fee",
                        "",
                        "`dest_weight` is the weight for XCM execution on the dest chain, and",
                        "it would be charged from the transferred assets. If set below",
                        "requirements, the execution may fail and assets wouldn't be",
                        "received.",
                        "",
                        "`fee_item` is index of the MultiAssets that we want to use for",
                        "payment",
                        "",
                        "It's a no-op if any error on local XCM execution or message sending.",
                        "Note sending assets out per se doesn't guarantee they would be",
                        "received. Receiving depends on if the XCM message could be delivered",
                        "by the network, and if the receiving chain would handle",
                        "messages correctly."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 434,
            "type": {
              "path": [
                "xcm",
                "VersionedMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "v0::MultiAsset"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "v1::MultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 435,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the",
                        "`TransferFee`. If the sender's account is below the existential",
                        "deposit as a result of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "keep_alive",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer all remaining balance to the given account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_",
                        "balances. This means that any locked, reserved, or existential",
                        "deposits (when `keep_alive` is `true`), will not be transferred by",
                        "this function. To ensure that this function results in a killed",
                        "account, you might need to prepare the account by removing any",
                        "reference counters, storage deposits, etc...",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all`",
                        "  operation should send all of the funds the account has, causing",
                        "  the sender account to be killed (false), or transfer everything",
                        "  except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer",
                        "will not kill the origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source",
                        "account may be specified.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The sender of the transfer.",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "new_free",
                          "type": 68,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 68,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
                        "will also decrease the total issuance of the system",
                        "(`TotalIssuance`). If the new free or reserved balance is below the",
                        "existential deposit, it will reap the `AccountInfo`.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 436,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some balance to another account under `currency_id`.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "transfer_native_currency",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer some native currency to another account.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "update_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 437,
                          "typeName": "AmountOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "update amount of account `who` under `currency_id`.",
                        "",
                        "The dispatch origin of this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 437,
            "type": {
              "def": {
                "primitive": "i128"
              }
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "orml_xcm",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send_as_sovereign",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "message",
                          "type": 345,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send an XCM message as parachain sovereign."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "zenlink_protocol",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_fee_receiver",
                      "fields": [
                        {
                          "name": "send_to",
                          "type": 440,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the new receiver of the protocol fee.",
                        "",
                        "# Arguments",
                        "",
                        "- `send_to`:",
                        "(1) Some(receiver): it turn on the protocol fee and the new receiver account.",
                        "(2) None: it turn off the protocol fee."
                      ]
                    },
                    {
                      "name": "set_fee_point",
                      "fields": [
                        {
                          "name": "fee_point",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the protocol fee point.",
                        "",
                        "# Arguments",
                        "",
                        "- `fee_point`:",
                        "The fee_point which integer between [0,30]",
                        "0 means no protocol fee.",
                        "30 means 0.3% * 100% = 0.0030.",
                        "default is 5 and means 0.3% * 1 / 6 = 0.0005."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "recipient",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "AssetBalance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Move some assets from one holder to another.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_id`: The foreign id.",
                        "- `target`: The receiver of the foreign.",
                        "- `amount`: The amount of the foreign to transfer."
                      ]
                    },
                    {
                      "name": "transfer_to_parachain",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "para_id",
                          "type": 57,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "recipient",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "max_weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Transfer zenlink assets to a sibling parachain.",
                        "",
                        "Zenlink assets can be either native or foreign to the sending parachain.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_id`: Global identifier for a zenlink foreign",
                        "- `para_id`: Destination parachain",
                        "- `account`: Destination account",
                        "- `amount`: Amount to transfer"
                      ]
                    },
                    {
                      "name": "create_pair",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Create pair by two assets.",
                        "",
                        "The order of foreign dot effect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up Pair",
                        "- `asset_1`: Asset which make up Pair"
                      ]
                    },
                    {
                      "name": "add_liquidity",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount_0_desired",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_desired",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_0_min",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_min",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "deadline",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Provide liquidity to a pair.",
                        "",
                        "The order of foreign dot effect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up pair",
                        "- `asset_1`: Asset which make up pair",
                        "- `amount_0_desired`: Maximum amount of asset_0 added to the pair",
                        "- `amount_1_desired`: Maximum amount of asset_1 added to the pair",
                        "- `amount_0_min`: Minimum amount of asset_0 added to the pair",
                        "- `amount_1_min`: Minimum amount of asset_1 added to the pair",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "remove_liquidity",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "liquidity",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_0_min",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_min",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "recipient",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "deadline",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Extract liquidity.",
                        "",
                        "The order of foreign dot effect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up pair",
                        "- `asset_1`: Asset which make up pair",
                        "- `amount_asset_0_min`: Minimum amount of asset_0 to exact",
                        "- `amount_asset_1_min`: Minimum amount of asset_1 to exact",
                        "- `recipient`: Account that accepts withdrawal of assets",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "swap_exact_assets_for_assets",
                      "fields": [
                        {
                          "name": "amount_in",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_out_min",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "path",
                          "type": 124,
                          "typeName": "Vec<AssetId>"
                        },
                        {
                          "name": "recipient",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "deadline",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Sell amount of foreign by path.",
                        "",
                        "# Arguments",
                        "",
                        "- `amount_in`: Amount of the foreign will be sold",
                        "- `amount_out_min`: Minimum amount of target foreign",
                        "- `path`: path can convert to pairs.",
                        "- `recipient`: Account that receive the target foreign",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "swap_assets_for_exact_assets",
                      "fields": [
                        {
                          "name": "amount_out",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_in_max",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "path",
                          "type": 124,
                          "typeName": "Vec<AssetId>"
                        },
                        {
                          "name": "recipient",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "deadline",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Buy amount of foreign by path.",
                        "",
                        "# Arguments",
                        "",
                        "- `amount_out`: Amount of the foreign will be bought",
                        "- `amount_in_max`: Maximum amount of sold foreign",
                        "- `path`: path can convert to pairs.",
                        "- `recipient`: Account that receive the target foreign",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "bootstrap_create",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "target_supply_0",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "target_supply_1",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_0",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_1",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "end",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "rewards",
                          "type": 124,
                          "typeName": "Vec<AssetId>"
                        },
                        {
                          "name": "limits",
                          "type": 126,
                          "typeName": "Vec<(AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Create bootstrap pair",
                        "",
                        "The order of asset don't affect result.",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `target_supply_0`: Target amount of asset_0 total contribute",
                        "- `target_supply_0`: Target amount of asset_1 total contribute",
                        "- `capacity_supply_0`: The max amount of asset_0 total contribute",
                        "- `capacity_supply_1`: The max amount of asset_1 total contribute",
                        "- `end`: The earliest ending block."
                      ]
                    },
                    {
                      "name": "bootstrap_contribute",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "amount_0_contribute",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "amount_1_contribute",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "deadline",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Contribute some asset to a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `amount_0_contribute`: The amount of asset_0 contribute to this bootstrap pair",
                        "- `amount_1_contribute`: The amount of asset_1 contribute to this bootstrap pair",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "bootstrap_claim",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "deadline",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Claim lp asset from a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `deadline`: Height of the cutoff block of this transaction"
                      ]
                    },
                    {
                      "name": "bootstrap_end",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "End a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair"
                      ]
                    },
                    {
                      "name": "bootstrap_update",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "target_supply_0",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "target_supply_1",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_0",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "capacity_supply_1",
                          "type": 68,
                          "typeName": "AssetBalance"
                        },
                        {
                          "name": "end",
                          "type": 63,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "rewards",
                          "type": 124,
                          "typeName": "Vec<AssetId>"
                        },
                        {
                          "name": "limits",
                          "type": 126,
                          "typeName": "Vec<(AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "update a bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair",
                        "- `min_contribution_0`: The new min amount of asset_0 contribute",
                        "- `min_contribution_0`: The new min amount of asset_1 contribute",
                        "- `target_supply_0`: The new target amount of asset_0 total contribute",
                        "- `target_supply_0`: The new target amount of asset_1 total contribute",
                        "- `capacity_supply_0`: The new max amount of asset_0 total contribute",
                        "- `capacity_supply_1`: The new max amount of asset_1 total contribute",
                        "- `end`: The earliest ending block."
                      ]
                    },
                    {
                      "name": "bootstrap_refund",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Contributor refund from disable bootstrap pair",
                        "",
                        "# Arguments",
                        "",
                        "- `asset_0`: Asset which make up bootstrap pair",
                        "- `asset_1`: Asset which make up bootstrap pair"
                      ]
                    },
                    {
                      "name": "bootstrap_charge_reward",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "charge_rewards",
                          "type": 126,
                          "typeName": "Vec<(AssetId, AssetBalance)>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "bootstrap_withdraw_reward",
                      "fields": [
                        {
                          "name": "asset_0",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "asset_1",
                          "type": 123,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "recipient",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 16
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 269
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 269
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 441,
            "type": {
              "path": [
                "merkle_distributor",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_to_create_whitelist",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "remove_from_create_whitelist",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "create_merkle_distributor",
                      "fields": [
                        {
                          "name": "merkle_root",
                          "type": 9,
                          "typeName": "H256"
                        },
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "distribute_currency",
                          "type": 118,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "distribute_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "`create_merkle_distributor` will create a merkle distributor,",
                        " which allow specified users claim asset.",
                        "",
                        "The dispatch origin for this call must be `Signed` by root.",
                        "",
                        "- `merkle_root`: The root of a merkle tree.",
                        "- `description`: About the purpose of this distribution.",
                        "- `distribute_currency`: The id of currency about this distribution.",
                        "- `distribute_amount`: The total currency amount of this distribution."
                      ]
                    },
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "merkle_distributor_id",
                          "type": 4,
                          "typeName": "T::MerkleDistributorId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "account",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "u128"
                        },
                        {
                          "name": "merkle_proof",
                          "type": 209,
                          "typeName": "Vec<H256>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "`claim` Claim rewards through user information and merkle proof.",
                        "",
                        "- `merkle_distributor_id`: ID of a merkle distributor.",
                        "- `index`: The index of the merkle tree leaf.",
                        "- `account`: The owner's account of merkle proof.",
                        "- `merkle_proof`: The hashes with merkle tree leaf can get merkle tree root."
                      ]
                    },
                    {
                      "name": "charge",
                      "fields": [
                        {
                          "name": "merkle_distributor_id",
                          "type": 4,
                          "typeName": "T::MerkleDistributorId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Charge currency to the account of merkle distributor",
                        "",
                        "`merkle_distributor_id`: ID of a merkle distributor."
                      ]
                    },
                    {
                      "name": "emergency_withdraw",
                      "fields": [
                        {
                          "name": "merkle_distributor_id",
                          "type": 4,
                          "typeName": "T::MerkleDistributorId"
                        },
                        {
                          "name": "recipient",
                          "type": 269,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "bifrost_flexible_fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_user_fee_charge_order",
                      "fields": [
                        {
                          "name": "asset_order_list_vec",
                          "type": 443,
                          "typeName": "Option<Vec<CurrencyIdOf<T>>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set user fee charge assets order."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 444
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 444
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 444,
            "type": {
              "def": {
                "sequence": {
                  "type": 118
                }
              }
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "bifrost_salp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_multisig_confirm_account",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "fund_success",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "fund_fail",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "continue_fund",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "fund_retire",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "fund_end",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Create a new crowdloaning campaign for a parachain slot deposit for the current auction."
                      ]
                    },
                    {
                      "name": "edit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "raised",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "fund_status",
                          "type": 446,
                          "typeName": "Option<FundStatus>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Edit the configuration for an in-progress crowdloan.",
                        "",
                        "Can only be called by Root origin."
                      ]
                    },
                    {
                      "name": "contribute",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                        "slot. It will be withdrawable in two instances: the parachain becomes retired; or the",
                        "slot is unable to be purchased and the timeout expires."
                      ]
                    },
                    {
                      "name": "confirm_contribute",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "is_success",
                          "type": 34,
                          "typeName": "bool"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Confirm contribute"
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Unlock the reserved vsToken/vsBond after fund success"
                      ]
                    },
                    {
                      "name": "batch_unlock",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Unlock the reserved vsToken/vsBond after fund success"
                      ]
                    },
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Withdraw full balance of the parachain.",
                        "- `index`: The parachain to whose crowdloan the contribution was made."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "redeem",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "dissolve_refunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Remove a fund after the retirement period has ended and all funds have been returned."
                      ]
                    },
                    {
                      "name": "dissolve",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Remove a fund after the retirement period has ended and all funds have been returned."
                      ]
                    },
                    {
                      "name": "buyback",
                      "fields": [
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 17
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 447
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 447
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "bifrost_salp",
                "FundStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "index": 0
                    },
                    {
                      "name": "Retired",
                      "index": 1
                    },
                    {
                      "name": "Success",
                      "index": 2
                    },
                    {
                      "name": "Failed",
                      "index": 3
                    },
                    {
                      "name": "RefundWithdrew",
                      "index": 4
                    },
                    {
                      "name": "RedeemWithdrew",
                      "index": 5
                    },
                    {
                      "name": "FailedToContinue",
                      "index": 6
                    },
                    {
                      "name": "End",
                      "index": 7
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_single_token_pool",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::SingleToken`, accepts any token as",
                        "deposit."
                      ]
                    },
                    {
                      "name": "create_mining_pool",
                      "fields": [
                        {
                          "name": "trading_pair",
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::Mining`, Only accepts `lpToken` as",
                        "deposit."
                      ]
                    },
                    {
                      "name": "create_farming_pool",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::Farming`, Only accepts free `vsToken`",
                        "and free `vsBond` as deposit."
                      ]
                    },
                    {
                      "name": "create_eb_farming_pool",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::Farming`, Only accepts reserved",
                        "`vsToken` and reserved `vsBond` as deposit."
                      ]
                    },
                    {
                      "name": "charge",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the rewards which are used to distribute to depositors to a liquidity-pool.",
                        "",
                        "_NOTE_: The extrinsic is only applied to the liquidity-pool at `PoolState::UnCharged`;",
                        "\tWhen the extrinsic was executed successfully, the liquidity-pool would be at",
                        "\t`PoolState::Charged`."
                      ]
                    },
                    {
                      "name": "kill_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill a liquidity-pool at `PoolState::Uncharged`."
                      ]
                    },
                    {
                      "name": "force_retire_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Make a liquidity-pool be at `PoolState::Retired` forcefully.",
                        "",
                        "__NOTE__:",
                        "1. If the pool is at `PoolState::Charged` but doesn't have any deposit, the data about",
                        "\tthe pool would be deleted and the rewards charged would be returned back.",
                        "",
                        "2. If the pool is at `PoolState::Charged` and has some deposit, or `PoolState::Ongoing`,",
                        "\tthe field `block_retired` of the pool would be set to the current block height."
                      ]
                    },
                    {
                      "name": "edit_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Edit the parameters of a liquidity-pool.",
                        "",
                        "__NOTE__: Forbid editing the liquidity-pool which type is `PoolType::EBFarming`;"
                      ]
                    },
                    {
                      "name": "deposit",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Caller deposits some token to a liquidity-pool.",
                        "",
                        "__NOTE__: The unclaimed rewards of caller will be withdrawn automatically if there has.",
                        "",
                        "The conditions to deposit:",
                        "- The deposit caller was contributed to the pool should be bigger than",
                        "  `T::MinimumDeposit`;",
                        "- The pool is at `PoolState::Charged` or `PoolState::Ongoing`;"
                      ]
                    },
                    {
                      "name": "redeem",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Caller redeems some deposit owned by self from a pool.",
                        "",
                        "__NOTE__: The unclaimed rewards of caller will be withdrawn automatically if there has.",
                        "",
                        "__NOTE__:",
                        "0. If the pool is at `PoolState::Ongoing`, the caller may not redeem successfully",
                        "because of \tthe `reward algorithm`, which requires `pool-ongoing` must have deposit more",
                        "than `T::MinimumDeposit`.",
                        "",
                        "1. If the pool is at `PoolState::Retired`, the extrinsic will redeem all deposits",
                        "owned by the caller, whatever the `value` is.",
                        "",
                        "2. If the pool is at `PoolState::Retired` and the deposit in the pool will become zero",
                        "after calling the extrinsic, the remaining rewards left in the pool will be returned",
                        "back to the charger.",
                        "",
                        "The condition to redeem:",
                        "- There is enough deposit owned by the caller in the pool.",
                        "- The pool is at `PoolState::Ongoing` or `PoolState::Retired`."
                      ]
                    },
                    {
                      "name": "redeem_all",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Caller redeems all deposit owned by self from a pool.",
                        "",
                        "__NOTE__: The unclaimed rewards of caller will be withdrawn automatically if there has.",
                        "",
                        "__NOTE__:",
                        "0. If the pool is at `PoolState::Ongoing`, the caller may not redeem successfully",
                        "because of \tthe `reward algorithm`, which requires `pool-ongoing` must have deposit more",
                        "than `T::MinimumDeposit`.",
                        "",
                        "1. If the pool is at `PoolState::Retired` and the deposit in the pool will become zero",
                        "after calling the extrinsic, the remaining rewards left in the pool will be",
                        "returned back to the charger.",
                        "",
                        "The condition to redeem:",
                        "- There is enough deposit owned by the caller in the pool.",
                        "- The pool is at `PoolState::Ongoing` or `PoolState::Retired`."
                      ]
                    },
                    {
                      "name": "volunteer_to_redeem",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "account",
                          "type": 161,
                          "typeName": "Option<AccountIdOf<T>>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A selfless man intimately helps depositors of the pool to redeem their deposit,",
                        "aaaaaaah, such a grateful!!",
                        "",
                        "If the `account` is `Option::None`, the extrinsic will give \"freedom\" for a lucky man",
                        "randomly;",
                        "",
                        "If the `account` is specific and a depositor of the pool indeed, who will be given",
                        "\"freedom\" by the extrinsic.",
                        "",
                        "The condition to redeem:",
                        "- The pool is at `PoolState::Retired`."
                      ]
                    },
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Caller withdraw the unclaimed rewards owned by self from a pool.",
                        "",
                        "__NOTE__: The extrinsic will retire the pool, which is reached the end of life.",
                        "",
                        "The conditions to claim:",
                        "- There is enough deposit owned by the caller in the pool.",
                        "- The pool is at `PoolState::Ongoing`."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Caller unlocks the locked deposit in the liquidity-pool.",
                        "",
                        "__NOTE__: The extrinsic will retire the pool, which is reached the end of life.",
                        "",
                        "The conditions to unlock:",
                        "- The pool type is not `PoolType::EBFarming`.",
                        "- There are pending-unlocks in the deposit_data.",
                        "- The current block-height exceeded the unlock-height;"
                      ]
                    },
                    {
                      "name": "cancel_unlock",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Caller cancels the specific pending-unlock.",
                        "",
                        "__NOTE__: The extrinsic will retire the pool, which is reached the end of life.",
                        "",
                        "The conditions to cancel:",
                        "- The pool state is `PoolState::Ongoing`.",
                        "- There is a `pending-unlock` that is specific by the parameter `index`;"
                      ]
                    },
                    {
                      "name": "lazy_migration_v2_0_0",
                      "fields": [
                        {
                          "name": "max_nums",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 15
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 449,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 136
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 135,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_single_token_pool",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::SingleToken`, accepts any token as",
                        "deposit."
                      ]
                    },
                    {
                      "name": "create_mining_pool",
                      "fields": [
                        {
                          "name": "trading_pair",
                          "type": 134,
                          "typeName": "(CurrencyId, CurrencyId)"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::Mining`, Only accepts `lpToken` as",
                        "deposit."
                      ]
                    },
                    {
                      "name": "create_farming_pool",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 63,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::Farming`, Only accepts free `vsToken`",
                        "and free `vsBond` as deposit."
                      ]
                    },
                    {
                      "name": "create_eb_farming_pool",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 4,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "main_reward",
                          "type": 136,
                          "typeName": "(CurrencyId, BalanceOf<T, I>)"
                        },
                        {
                          "name": "option_rewards",
                          "type": 449,
                          "typeName": "BoundedVec<(CurrencyId, BalanceOf<T, I>), T::MaximumOptionRewards>"
                        },
                        {
                          "name": "duration",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Create a liquidity-pool which type is `PoolType::Farming`, Only accepts reserved",
                        "`vsToken` and reserved `vsBond` as deposit."
                      ]
                    },
                    {
                      "name": "charge",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the rewards which are used to distribute to depositors to a liquidity-pool.",
                        "",
                        "_NOTE_: The extrinsic is only applied to the liquidity-pool at `PoolState::UnCharged`;",
                        "\tWhen the extrinsic was executed successfully, the liquidity-pool would be at",
                        "\t`PoolState::Charged`."
                      ]
                    },
                    {
                      "name": "kill_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill a liquidity-pool at `PoolState::Uncharged`."
                      ]
                    },
                    {
                      "name": "force_retire_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Make a liquidity-pool be at `PoolState::Retired` forcefully.",
                        "",
                        "__NOTE__:",
                        "1. If the pool is at `PoolState::Charged` but doesn't have any deposit, the data about",
                        "\tthe pool would be deleted and the rewards charged would be returned back.",
                        "",
                        "2. If the pool is at `PoolState::Charged` and has some deposit, or `PoolState::Ongoing`,",
                        "\tthe field `block_retired` of the pool would be set to the current block height."
                      ]
                    },
                    {
                      "name": "edit_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "redeem_limit_time",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "unlock_limit_nums",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Edit the parameters of a liquidity-pool.",
                        "",
                        "__NOTE__: Forbid editing the liquidity-pool which type is `PoolType::EBFarming`;"
                      ]
                    },
                    {
                      "name": "deposit",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Caller deposits some token to a liquidity-pool.",
                        "",
                        "__NOTE__: The unclaimed rewards of caller will be withdrawn automatically if there has.",
                        "",
                        "The conditions to deposit:",
                        "- The deposit caller was contributed to the pool should be bigger than",
                        "  `T::MinimumDeposit`;",
                        "- The pool is at `PoolState::Charged` or `PoolState::Ongoing`;"
                      ]
                    },
                    {
                      "name": "redeem",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Caller redeems some deposit owned by self from a pool.",
                        "",
                        "__NOTE__: The unclaimed rewards of caller will be withdrawn automatically if there has.",
                        "",
                        "__NOTE__:",
                        "0. If the pool is at `PoolState::Ongoing`, the caller may not redeem successfully",
                        "because of \tthe `reward algorithm`, which requires `pool-ongoing` must have deposit more",
                        "than `T::MinimumDeposit`.",
                        "",
                        "1. If the pool is at `PoolState::Retired`, the extrinsic will redeem all deposits",
                        "owned by the caller, whatever the `value` is.",
                        "",
                        "2. If the pool is at `PoolState::Retired` and the deposit in the pool will become zero",
                        "after calling the extrinsic, the remaining rewards left in the pool will be returned",
                        "back to the charger.",
                        "",
                        "The condition to redeem:",
                        "- There is enough deposit owned by the caller in the pool.",
                        "- The pool is at `PoolState::Ongoing` or `PoolState::Retired`."
                      ]
                    },
                    {
                      "name": "redeem_all",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Caller redeems all deposit owned by self from a pool.",
                        "",
                        "__NOTE__: The unclaimed rewards of caller will be withdrawn automatically if there has.",
                        "",
                        "__NOTE__:",
                        "0. If the pool is at `PoolState::Ongoing`, the caller may not redeem successfully",
                        "because of \tthe `reward algorithm`, which requires `pool-ongoing` must have deposit more",
                        "than `T::MinimumDeposit`.",
                        "",
                        "1. If the pool is at `PoolState::Retired` and the deposit in the pool will become zero",
                        "after calling the extrinsic, the remaining rewards left in the pool will be",
                        "returned back to the charger.",
                        "",
                        "The condition to redeem:",
                        "- There is enough deposit owned by the caller in the pool.",
                        "- The pool is at `PoolState::Ongoing` or `PoolState::Retired`."
                      ]
                    },
                    {
                      "name": "volunteer_to_redeem",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "account",
                          "type": 161,
                          "typeName": "Option<AccountIdOf<T>>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A selfless man intimately helps depositors of the pool to redeem their deposit,",
                        "aaaaaaah, such a grateful!!",
                        "",
                        "If the `account` is `Option::None`, the extrinsic will give \"freedom\" for a lucky man",
                        "randomly;",
                        "",
                        "If the `account` is specific and a depositor of the pool indeed, who will be given",
                        "\"freedom\" by the extrinsic.",
                        "",
                        "The condition to redeem:",
                        "- The pool is at `PoolState::Retired`."
                      ]
                    },
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Caller withdraw the unclaimed rewards owned by self from a pool.",
                        "",
                        "__NOTE__: The extrinsic will retire the pool, which is reached the end of life.",
                        "",
                        "The conditions to claim:",
                        "- There is enough deposit owned by the caller in the pool.",
                        "- The pool is at `PoolState::Ongoing`."
                      ]
                    },
                    {
                      "name": "unlock",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Caller unlocks the locked deposit in the liquidity-pool.",
                        "",
                        "__NOTE__: The extrinsic will retire the pool, which is reached the end of life.",
                        "",
                        "The conditions to unlock:",
                        "- The pool type is not `PoolType::EBFarming`.",
                        "- There are pending-unlocks in the deposit_data.",
                        "- The current block-height exceeded the unlock-height;"
                      ]
                    },
                    {
                      "name": "cancel_unlock",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Caller cancels the specific pending-unlock.",
                        "",
                        "__NOTE__: The extrinsic will retire the pool, which is reached the end of life.",
                        "",
                        "The conditions to cancel:",
                        "- The pool state is `PoolState::Ongoing`.",
                        "- There is a `pending-unlock` that is specific by the parameter `index`;"
                      ]
                    },
                    {
                      "name": "lazy_migration_v2_0_0",
                      "fields": [
                        {
                          "name": "max_nums",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 15
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 451,
            "type": {
              "path": [
                "bifrost_token_issuer",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_to_issue_whitelist",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "remove_from_issue_whitelist",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "add_to_transfer_whitelist",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "remove_from_transfer_whitelist",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "issue",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Destroy some balance from an account.",
                        "",
                        "The dispatch origin for this call must be `Root` by the",
                        "transactor."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "bifrost_lightening_redeem",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_ksm_to_pool",
                      "fields": [
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anyone can add KSM to the pool."
                      ]
                    },
                    {
                      "name": "exchange_for_ksm",
                      "fields": [
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "edit_exchange_price",
                      "fields": [
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "edit_release_per_day",
                      "fields": [
                        {
                          "name": "amount_per_day",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "edit_release_start_and_end_block",
                      "fields": [
                        {
                          "name": "start",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "end",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 453,
            "type": {
              "path": [
                "bifrost_salp_lite",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_multisig_confirm_account",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "fund_success",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "fund_fail",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "fund_retire",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Create a new crowdloaning campaign for a parachain slot deposit for the current auction."
                      ]
                    },
                    {
                      "name": "issue",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "MessageId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                        "slot. It will be withdrawable in two instances: the parachain becomes retired; or the",
                        "slot is unable to be purchased and the timeout expires."
                      ]
                    },
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Withdraw full balance of the parachain.",
                        "- `index`: The parachain to whose crowdloan the contribution was made."
                      ]
                    },
                    {
                      "name": "redeem",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "dissolve",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove a fund after the retirement period has ended and all funds have been returned."
                      ]
                    },
                    {
                      "name": "continue_fund",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "dissolve_refunded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Remove a fund after the retirement period has ended and all funds have been returned."
                      ]
                    },
                    {
                      "name": "edit",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "cap",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "raised",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriod"
                        },
                        {
                          "name": "fund_status",
                          "type": 454,
                          "typeName": "Option<FundStatus>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Edit the configuration for an in-progress crowdloan.",
                        "",
                        "Can only be called by Root origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 455
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 455
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 455,
            "type": {
              "path": [
                "bifrost_salp_lite",
                "FundStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ongoing",
                      "index": 0
                    },
                    {
                      "name": "Retired",
                      "index": 1
                    },
                    {
                      "name": "Success",
                      "index": 2
                    },
                    {
                      "name": "Failed",
                      "index": 3
                    },
                    {
                      "name": "RefundWithdrew",
                      "index": 4
                    },
                    {
                      "name": "RedeemWithdrew",
                      "index": 5
                    },
                    {
                      "name": "FailedToContinue",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "bifrost_call_switchgear",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "switchoff_transaction",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "function_name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "switchon_transaction",
                      "fields": [
                        {
                          "name": "pallet_name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "function_name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "disable_transfers",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "enable_transfers",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 457,
            "type": {
              "path": [
                "bifrost_vsbond_auction",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_order",
                      "fields": [
                        {
                          "name": "index",
                          "type": 63,
                          "typeName": "ParaId"
                        },
                        {
                          "name": "token_symbol",
                          "type": 119,
                          "typeName": "TokenSymbol"
                        },
                        {
                          "name": "first_slot",
                          "type": 63,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "last_slot",
                          "type": 63,
                          "typeName": "LeasePeriodOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "total_price",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        },
                        {
                          "name": "order_type",
                          "type": 143,
                          "typeName": "OrderType"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a sell order or buy order to sell `vsbond`."
                      ]
                    },
                    {
                      "name": "revoke_order",
                      "fields": [
                        {
                          "name": "order_id",
                          "type": 66,
                          "typeName": "OrderId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Revoke a sell or buy order in trade by the order creator."
                      ]
                    },
                    {
                      "name": "force_revoke",
                      "fields": [
                        {
                          "name": "order_id",
                          "type": 66,
                          "typeName": "OrderId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Revoke a sell or buy order in trade by the order creator."
                      ]
                    },
                    {
                      "name": "clinch_order",
                      "fields": [
                        {
                          "name": "order_id",
                          "type": 66,
                          "typeName": "OrderId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Users(non-order-creator) buy the remaining `vsbond` of a sell order."
                      ]
                    },
                    {
                      "name": "partial_clinch_order",
                      "fields": [
                        {
                          "name": "order_id",
                          "type": 66,
                          "typeName": "OrderId"
                        },
                        {
                          "name": "quantity",
                          "type": 68,
                          "typeName": "BalanceOf<T, I>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Users(non-order-creator) buys some of the remaining `vsbond` of a sell or buy order."
                      ]
                    },
                    {
                      "name": "set_buy_and_sell_transaction_fee_rate",
                      "fields": [
                        {
                          "name": "buy_rate",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "sell_rate",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "bifrost_asset_registry",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_foreign_asset",
                      "fields": [
                        {
                          "name": "location",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "update_foreign_asset",
                      "fields": [
                        {
                          "name": "foreign_asset_id",
                          "type": 4,
                          "typeName": "ForeignAssetId"
                        },
                        {
                          "name": "location",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "register_native_asset",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "location",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "update_native_asset",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "location",
                          "type": 97,
                          "typeName": "Box<VersionedMultiLocation>"
                        },
                        {
                          "name": "metadata",
                          "type": 146,
                          "typeName": "Box<AssetMetadata<BalanceOf<T>>>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 459,
            "type": {
              "path": [
                "bifrost_vtoken_minting",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "redeem",
                      "fields": [
                        {
                          "name": "vtoken_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vtoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "token_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "rebond_by_unlock_id",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "unlock_id",
                          "type": 4,
                          "typeName": "UnlockId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "set_unlock_duration",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "unlock_duration",
                          "type": 149,
                          "typeName": "TimeUnit"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "set_minimum_mint",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "set_minimum_redeem",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "add_support_rebond_token",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "remove_support_rebond_token",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "set_fees",
                      "fields": [
                        {
                          "name": "mint_fee",
                          "type": 144,
                          "typeName": "Permill"
                        },
                        {
                          "name": "redeem_fee",
                          "type": 144,
                          "typeName": "Permill"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "set_hook_iteration_limit",
                      "fields": [
                        {
                          "name": "limit",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "set_unlocking_total",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "set_min_time_unit",
                      "fields": [
                        {
                          "name": "token_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "time_unit",
                          "type": 149,
                          "typeName": "TimeUnit"
                        }
                      ],
                      "index": 12
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "bifrost_slp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "initialize_delegator",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "*****************************/",
                        "****** Outer Calls ******/",
                        "*****************************/",
                        "",
                        "Delegator initialization work. Generate a new delegator and return its ID."
                      ]
                    },
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "First time bonding some amount to a delegator."
                      ]
                    },
                    {
                      "name": "bond_extra",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Bond extra amount to a delegator."
                      ]
                    },
                    {
                      "name": "unbond",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Decrease some amount to a delegator. Leave no less than the minimum delegator",
                        "requirement."
                      ]
                    },
                    {
                      "name": "unbond_all",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Unbond all the active amount of a delegator."
                      ]
                    },
                    {
                      "name": "rebond",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        },
                        {
                          "name": "amount",
                          "type": 151,
                          "typeName": "Option<BalanceOf<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Rebond some unlocking amount to a delegator."
                      ]
                    },
                    {
                      "name": "delegate",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "targets",
                          "type": 153,
                          "typeName": "Vec<MultiLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Delegate to some validator set."
                      ]
                    },
                    {
                      "name": "undelegate",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "targets",
                          "type": 153,
                          "typeName": "Vec<MultiLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Re-delegate existing delegation to a new validator set."
                      ]
                    },
                    {
                      "name": "redelegate",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "targets",
                          "type": 152,
                          "typeName": "Option<Vec<MultiLocation>>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Re-delegate existing delegation to a new validator set."
                      ]
                    },
                    {
                      "name": "payout",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "validator",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "when",
                          "type": 154,
                          "typeName": "Option<TimeUnit>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Initiate payout for a certain delegator."
                      ]
                    },
                    {
                      "name": "liquidize",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "when",
                          "type": 154,
                          "typeName": "Option<TimeUnit>"
                        },
                        {
                          "name": "validator",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Withdraw the due payout into free balance."
                      ]
                    },
                    {
                      "name": "chill",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Initiate payout for a certain delegator."
                      ]
                    },
                    {
                      "name": "transfer_back",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "to",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "transfer_to",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "to",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "increase_token_pool",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "decrease_token_pool",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "update_ongoing_time_unit",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "time_unit",
                          "type": 149,
                          "typeName": "TimeUnit"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "refund_currency_due_unbond",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "supplement_fee_reserve",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "dest",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "charge_host_fee_and_tune_vtoken_exchange_rate",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "value",
                          "type": 68,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "who",
                          "type": 91,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Charge staking host fee, tune vtoken/token exchange rate, and update delegator ledger",
                        "for single delegator."
                      ]
                    },
                    {
                      "name": "set_xcm_dest_weight_and_fee",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "operation",
                          "type": 158,
                          "typeName": "XcmOperation"
                        },
                        {
                          "name": "weight_and_fee",
                          "type": 159,
                          "typeName": "Option<(Weight, BalanceOf<T>)>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "*****************************/",
                        "****** Storage Setters ******/",
                        "*****************************/",
                        "",
                        "Update storage XcmDestWeightAndFee<T>."
                      ]
                    },
                    {
                      "name": "set_operate_origin",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 161,
                          "typeName": "Option<AccountIdOf<T>>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Update storage OperateOrigins<T>."
                      ]
                    },
                    {
                      "name": "set_fee_source",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who_and_fee",
                          "type": 162,
                          "typeName": "Option<(MultiLocation, BalanceOf<T>)>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Update storage FeeSources<T>."
                      ]
                    },
                    {
                      "name": "add_delegator",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "index",
                          "type": 155,
                          "typeName": "u16"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Update storage DelegatorsIndex2Multilocation<T> 和 DelegatorsMultilocation2Index<T>."
                      ]
                    },
                    {
                      "name": "remove_delegator",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Update storage DelegatorsIndex2Multilocation<T> 和 DelegatorsMultilocation2Index<T>."
                      ]
                    },
                    {
                      "name": "add_validator",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Update storage Validators<T>."
                      ]
                    },
                    {
                      "name": "remove_validator",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Update storage Validators<T>."
                      ]
                    },
                    {
                      "name": "set_validators_by_delegator",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "validators",
                          "type": 153,
                          "typeName": "Vec<MultiLocation>"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Update storage ValidatorsByDelegator<T>."
                      ]
                    },
                    {
                      "name": "set_delegator_ledger",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        },
                        {
                          "name": "ledger",
                          "type": 164,
                          "typeName": "Box<Option<Ledger<MultiLocation, BalanceOf<T>, MultiLocation>>>"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Update storage DelegatorLedgers<T>."
                      ]
                    },
                    {
                      "name": "set_minimums_and_maximums",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "constraints",
                          "type": 187,
                          "typeName": "Option<MinimumsMaximums<BalanceOf<T>>>"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Update storage MinimumsAndMaximums<T>."
                      ]
                    },
                    {
                      "name": "set_currency_delays",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "maybe_delays",
                          "type": 189,
                          "typeName": "Option<Delays>"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Update storage Delays<T>."
                      ]
                    },
                    {
                      "name": "set_hosting_fees",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "maybe_fee_set",
                          "type": 191,
                          "typeName": "Option<(Permill, MultiLocation)>"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Set HostingFees storage."
                      ]
                    },
                    {
                      "name": "set_currency_tune_exchange_rate_limit",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "maybe_tune_exchange_rate_limit",
                          "type": 193,
                          "typeName": "Option<(u32, Permill)>"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Set  CurrencyTuneExchangeRateLimit<T> storage."
                      ]
                    },
                    {
                      "name": "set_ongoing_time_unit_update_interval",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "maybe_interval",
                          "type": 195,
                          "typeName": "Option<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "Set  OngoingTimeUnitUpdateInterval<T> storage."
                      ]
                    },
                    {
                      "name": "add_supplement_fee_account_to_whitelist",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "remove_supplement_fee_account_from_whitelist",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 60,
                          "typeName": "Box<MultiLocation>"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "confirm_delegator_ledger_query_response",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "********************************************************************",
                        "*************Outer Confirming Xcm queries functions ****************",
                        "********************************************************************"
                      ]
                    },
                    {
                      "name": "fail_delegator_ledger_query_response",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "confirm_validators_by_delegator_query_response",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "fail_validators_by_delegator_query_response",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyId"
                        },
                        {
                          "name": "query_id",
                          "type": 66,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 39
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 461,
            "type": {
              "path": [
                "xcm_interface",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "update_xcm_dest_weight_and_fee",
                      "fields": [
                        {
                          "name": "updates",
                          "type": 462,
                          "typeName": "Vec<(XcmInterfaceOperation, Option<Weight>, Option<BalanceOf<T>>)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the xcm_dest_weight and fee for XCM operation of XcmInterface.",
                        "",
                        "Parameters:",
                        "- `updates`: vec of tuple: (XcmInterfaceOperation, WeightChange, FeeChange)."
                      ]
                    },
                    {
                      "name": "transfer_statemine_assets",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 161,
                          "typeName": "Option<AccountIdOf<T>>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 462,
            "type": {
              "def": {
                "sequence": {
                  "type": 463
                }
              }
            }
          },
          {
            "id": 463,
            "type": {
              "def": {
                "tuple": [
                  197,
                  220,
                  151
                ]
              }
            }
          },
          {
            "id": 464,
            "type": {
              "path": [
                "bifrost_vstoken_conversion",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "vsbond_convert_to_vstoken",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vsbond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "minimum_vstoken",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "vstoken_convert_to_vsbond",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "vstoken_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "minimum_vsbond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "set_exchange_fee",
                      "fields": [
                        {
                          "name": "exchange_fee",
                          "type": 199,
                          "typeName": "VstokenConversionExchangeFee<BalanceOf<T>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "set_exchange_rate",
                      "fields": [
                        {
                          "name": "lease",
                          "type": 200,
                          "typeName": "i32"
                        },
                        {
                          "name": "exchange_rate",
                          "type": 201,
                          "typeName": "VstokenConversionExchangeRate"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "set_relaychain_lease",
                      "fields": [
                        {
                          "name": "lease",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "bifrost_farming",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_farming_pool",
                      "fields": [
                        {
                          "name": "tokens_proportion",
                          "type": 466,
                          "typeName": "Vec<(CurrencyIdOf<T>, Perbill)>"
                        },
                        {
                          "name": "basic_rewards",
                          "type": 135,
                          "typeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>"
                        },
                        {
                          "name": "gauge_init",
                          "type": 468,
                          "typeName": "Option<\n(CurrencyIdOf<T>, BlockNumberFor<T>, Vec<\n(CurrencyIdOf<T>, BalanceOf<T>)>,)>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "withdraw_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "claim_limit_time",
                          "type": 63,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "withdraw_limit_count",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "charge",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "rewards",
                          "type": 135,
                          "typeName": "Vec<(CurrencyIdOf<T>, BalanceOf<T>)>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "deposit",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "add_value",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "gauge_info",
                          "type": 203,
                          "typeName": "Option<(BalanceOf<T>, BlockNumberFor<T>)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "withdraw",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "remove_value",
                          "type": 151,
                          "typeName": "Option<BalanceOf<T>>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "withdraw_claim",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "force_retire_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "set_retire_limit",
                      "fields": [
                        {
                          "name": "limit",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "close_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "reset_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "basic_rewards",
                          "type": 470,
                          "typeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>"
                        },
                        {
                          "name": "min_deposit_to_start",
                          "type": 151,
                          "typeName": "Option<BalanceOf<T>>"
                        },
                        {
                          "name": "after_block_to_start",
                          "type": 195,
                          "typeName": "Option<BlockNumberFor<T>>"
                        },
                        {
                          "name": "withdraw_limit_time",
                          "type": 195,
                          "typeName": "Option<BlockNumberFor<T>>"
                        },
                        {
                          "name": "claim_limit_time",
                          "type": 195,
                          "typeName": "Option<BlockNumberFor<T>>"
                        },
                        {
                          "name": "withdraw_limit_count",
                          "type": 471,
                          "typeName": "Option<u8>"
                        },
                        {
                          "name": "gauge_init",
                          "type": 468,
                          "typeName": "Option<\n(CurrencyIdOf<T>, BlockNumberFor<T>, Vec<\n(CurrencyIdOf<T>, BalanceOf<T>)>,)>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "kill_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "edit_pool",
                      "fields": [
                        {
                          "name": "pid",
                          "type": 4,
                          "typeName": "PoolId"
                        },
                        {
                          "name": "basic_rewards",
                          "type": 470,
                          "typeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>"
                        },
                        {
                          "name": "withdraw_limit_time",
                          "type": 195,
                          "typeName": "Option<BlockNumberFor<T>>"
                        },
                        {
                          "name": "claim_limit_time",
                          "type": 195,
                          "typeName": "Option<BlockNumberFor<T>>"
                        },
                        {
                          "name": "gauge_basic_rewards",
                          "type": 470,
                          "typeName": "Option<Vec<(CurrencyIdOf<T>, BalanceOf<T>)>>"
                        },
                        {
                          "name": "withdraw_limit_count",
                          "type": 471,
                          "typeName": "Option<u8>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "gauge_withdraw",
                      "fields": [
                        {
                          "name": "gid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "force_gauge_claim",
                      "fields": [
                        {
                          "name": "gid",
                          "type": 4,
                          "typeName": "PoolId"
                        }
                      ],
                      "index": 13
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 466,
            "type": {
              "def": {
                "sequence": {
                  "type": 467
                }
              }
            }
          },
          {
            "id": 467,
            "type": {
              "def": {
                "tuple": [
                  118,
                  39
                ]
              }
            }
          },
          {
            "id": 468,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 469
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 469
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 469,
            "type": {
              "def": {
                "tuple": [
                  118,
                  4,
                  135
                ]
              }
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 135
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 135
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 472,
            "type": {
              "path": [
                "bifrost_system_staking",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "token_config",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "exec_delay",
                          "type": 195,
                          "typeName": "Option<u32>"
                        },
                        {
                          "name": "system_stakable_farming_rate",
                          "type": 473,
                          "typeName": "Option<Permill>"
                        },
                        {
                          "name": "add_or_sub",
                          "type": 474,
                          "typeName": "Option<bool>"
                        },
                        {
                          "name": "system_stakable_base",
                          "type": 151,
                          "typeName": "Option<BalanceOf<T>>"
                        },
                        {
                          "name": "farming_poolids",
                          "type": 475,
                          "typeName": "Option<Vec<PoolId>>"
                        },
                        {
                          "name": "lptoken_rates",
                          "type": 476,
                          "typeName": "Option<Vec<Perbill>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "token config，take effect when next round begins"
                      ]
                    },
                    {
                      "name": "delete_token",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "token config，take effect when next round begins"
                      ]
                    },
                    {
                      "name": "refresh_token_info",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "refresh token info，query farming pallet, and update TokenInfo, change to new",
                        "config，ignore exec_delay, execute immediately"
                      ]
                    },
                    {
                      "name": "payout",
                      "fields": [
                        {
                          "name": "token",
                          "type": 118,
                          "typeName": "CurrencyIdOf<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "payout to treasury"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 144
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 144
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 34
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 34
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 475,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 206
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 206
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 476,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 207
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 207
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 477,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount"
                    },
                    {
                      "name": "ayes",
                      "type": 41,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "nays",
                      "type": 41,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 478,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 209,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 481,
            "type": {
              "def": {
                "sequence": {
                  "type": 482
                }
              }
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "SeatHolder"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "Voter"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "votes",
                      "type": 41,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "pallet_elections_phragmen",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnableToVote",
                      "index": 0,
                      "docs": [
                        "Cannot vote when no candidates or members exist."
                      ]
                    },
                    {
                      "name": "NoVotes",
                      "index": 1,
                      "docs": [
                        "Must vote for at least one candidate."
                      ]
                    },
                    {
                      "name": "TooManyVotes",
                      "index": 2,
                      "docs": [
                        "Cannot vote more than candidates."
                      ]
                    },
                    {
                      "name": "MaximumVotesExceeded",
                      "index": 3,
                      "docs": [
                        "Cannot vote more than maximum allowed."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "index": 4,
                      "docs": [
                        "Cannot vote with stake less than minimum balance."
                      ]
                    },
                    {
                      "name": "UnableToPayBond",
                      "index": 5,
                      "docs": [
                        "Voter can not pay voting bond."
                      ]
                    },
                    {
                      "name": "MustBeVoter",
                      "index": 6,
                      "docs": [
                        "Must be a voter."
                      ]
                    },
                    {
                      "name": "ReportSelf",
                      "index": 7,
                      "docs": [
                        "Cannot report self."
                      ]
                    },
                    {
                      "name": "DuplicatedCandidate",
                      "index": 8,
                      "docs": [
                        "Duplicated candidate submission."
                      ]
                    },
                    {
                      "name": "MemberSubmit",
                      "index": 9,
                      "docs": [
                        "Member cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "RunnerUpSubmit",
                      "index": 10,
                      "docs": [
                        "Runner cannot re-submit candidacy."
                      ]
                    },
                    {
                      "name": "InsufficientCandidateFunds",
                      "index": 11,
                      "docs": [
                        "Candidate does not have enough funds."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 12,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "InvalidWitnessData",
                      "index": 13,
                      "docs": [
                        "The provided count of number of candidates is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidVoteCount",
                      "index": 14,
                      "docs": [
                        "The provided count of number of votes is incorrect."
                      ]
                    },
                    {
                      "name": "InvalidRenouncing",
                      "index": 15,
                      "docs": [
                        "The renouncing origin presented a wrong `Renouncing` parameter."
                      ]
                    },
                    {
                      "name": "InvalidReplacement",
                      "index": 16,
                      "docs": [
                        "Prediction regarding replacement after member removal is wrong."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 485,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 486,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 487,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 489,
            "type": {
              "def": {
                "sequence": {
                  "type": 490
                }
              }
            }
          },
          {
            "id": 490,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sender",
                      "type": 57,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 491,
                      "typeName": "InboundState"
                    },
                    {
                      "name": "message_metadata",
                      "type": 492,
                      "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "InboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 492,
            "type": {
              "def": {
                "sequence": {
                  "type": 493
                }
              }
            }
          },
          {
            "id": 493,
            "type": {
              "def": {
                "tuple": [
                  4,
                  494
                ]
              }
            }
          },
          {
            "id": 494,
            "type": {
              "path": [
                "polkadot_parachain",
                "primitives",
                "XcmpMessageFormat"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ConcatenatedVersionedXcm",
                      "index": 0
                    },
                    {
                      "name": "ConcatenatedEncodedBlob",
                      "index": 1
                    },
                    {
                      "name": "Signals",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 495,
            "type": {
              "def": {
                "tuple": [
                  57,
                  4
                ]
              }
            }
          },
          {
            "id": 496,
            "type": {
              "def": {
                "sequence": {
                  "type": 497
                }
              }
            }
          },
          {
            "id": 497,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 57,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 498,
                      "typeName": "OutboundState"
                    },
                    {
                      "name": "signals_exist",
                      "type": 34,
                      "typeName": "bool"
                    },
                    {
                      "name": "first_index",
                      "type": 107,
                      "typeName": "u16"
                    },
                    {
                      "name": "last_index",
                      "type": 107,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 499,
            "type": {
              "def": {
                "tuple": [
                  57,
                  107
                ]
              }
            }
          },
          {
            "id": 500,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "QueueConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "threshold_weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "weight_restrict_decay",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "xcmp_max_individual_weight",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 501,
            "type": {
              "def": {
                "tuple": [
                  57,
                  4,
                  10
                ]
              }
            }
          },
          {
            "id": 502,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSend",
                      "index": 0,
                      "docs": [
                        "Failed to send XCM message."
                      ]
                    },
                    {
                      "name": "BadXcmOrigin",
                      "index": 1,
                      "docs": [
                        "Bad XCM origin."
                      ]
                    },
                    {
                      "name": "BadXcm",
                      "index": 2,
                      "docs": [
                        "Bad XCM data."
                      ]
                    },
                    {
                      "name": "BadOverweightIndex",
                      "index": 3,
                      "docs": [
                        "Bad overweight index."
                      ]
                    },
                    {
                      "name": "WeightOverLimit",
                      "index": 4,
                      "docs": [
                        "Provided weight is possibly not enough to execute the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 503,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 97,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "maybe_notify",
                          "type": 504,
                          "typeName": "Option<(u8, u8)>"
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 97,
                          "typeName": "VersionedMultiLocation"
                        },
                        {
                          "name": "is_active",
                          "type": 34,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 506,
                          "typeName": "VersionedResponse"
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 504,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 505
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 505
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 505,
            "type": {
              "def": {
                "tuple": [
                  2,
                  2
                ]
              }
            }
          },
          {
            "id": 506,
            "type": {
              "path": [
                "xcm",
                "VersionedResponse"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 350,
                          "typeName": "v0::Response"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "V1",
                      "fields": [
                        {
                          "type": 355,
                          "typeName": "v1::Response"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 82,
                          "typeName": "v2::Response"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 507,
            "type": {
              "def": {
                "tuple": [
                  4,
                  97
                ]
              }
            }
          },
          {
            "id": 508,
            "type": {
              "def": {
                "tuple": [
                  8,
                  8,
                  4
                ]
              }
            }
          },
          {
            "id": 509,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 510
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 511,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 510,
            "type": {
              "def": {
                "tuple": [
                  97,
                  4
                ]
              }
            }
          },
          {
            "id": 511,
            "type": {
              "def": {
                "sequence": {
                  "type": 510
                }
              }
            }
          },
          {
            "id": 512,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "index": 0
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "index": 1
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "Option<Vec<u8>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 513,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                        "a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 514,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "ConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_individual",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 516,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "PageIndexData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "end_used",
                      "type": 4,
                      "typeName": "PageCounter"
                    },
                    {
                      "name": "overweight_count",
                      "type": 8,
                      "typeName": "OverweightIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 517,
            "type": {
              "def": {
                "sequence": {
                  "type": 518
                }
              }
            }
          },
          {
            "id": 518,
            "type": {
              "def": {
                "tuple": [
                  4,
                  10
                ]
              }
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "cumulus_pallet_dmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0,
                      "docs": [
                        "The message index given is unknown."
                      ]
                    },
                    {
                      "name": "OverLimit",
                      "index": 1,
                      "docs": [
                        "The amount of weight given is possibly not enough for executing the message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 520,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 521,
            "type": {
              "def": {
                "sequence": {
                  "type": 522
                }
              }
            }
          },
          {
            "id": 522,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 523
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 523
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 523,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV3"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 381
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 372
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 103,
                      "typeName": "Option<Vec<u8>>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 381,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 380,
                      "typeName": "Option<schedule::Period<BlockNumber>>"
                    },
                    {
                      "name": "origin",
                      "type": 372,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 524,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 525,
            "type": {
              "def": {
                "tuple": [
                  526,
                  6
                ]
              }
            }
          },
          {
            "id": 526,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 527
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 528,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 527,
            "type": {
              "path": [
                "pallet_proxy",
                "ProxyDefinition"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "ProxyType",
                  "type": 106
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "proxy_type",
                      "type": 106,
                      "typeName": "ProxyType"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 528,
            "type": {
              "def": {
                "sequence": {
                  "type": 527
                }
              }
            }
          },
          {
            "id": 529,
            "type": {
              "def": {
                "tuple": [
                  530,
                  6
                ]
              }
            }
          },
          {
            "id": 530,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 531
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 532,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 531,
            "type": {
              "path": [
                "pallet_proxy",
                "Announcement"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "call_hash",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "height",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 532,
            "type": {
              "def": {
                "sequence": {
                  "type": 531
                }
              }
            }
          },
          {
            "id": 533,
            "type": {
              "path": [
                "pallet_proxy",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooMany",
                      "index": 0,
                      "docs": [
                        "There are too many proxies registered or too many announcements pending."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Proxy registration not found."
                      ]
                    },
                    {
                      "name": "NotProxy",
                      "index": 2,
                      "docs": [
                        "Sender is not a proxy of the account to be proxied."
                      ]
                    },
                    {
                      "name": "Unproxyable",
                      "index": 3,
                      "docs": [
                        "A call which is incompatible with the proxy type's filter was attempted."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "index": 4,
                      "docs": [
                        "Account is already a proxy."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "index": 5,
                      "docs": [
                        "Call may not be made by proxy because it may escalate its privileges."
                      ]
                    },
                    {
                      "name": "Unannounced",
                      "index": 6,
                      "docs": [
                        "Announcement, if made at all, was made too recently."
                      ]
                    },
                    {
                      "name": "NoSelfProxy",
                      "index": 7,
                      "docs": [
                        "Cannot add self as proxy."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 534,
            "type": {
              "def": {
                "tuple": [
                  0,
                  1
                ]
              }
            }
          },
          {
            "id": 535,
            "type": {
              "path": [
                "pallet_multisig",
                "Multisig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "when",
                      "type": 109,
                      "typeName": "Timepoint<BlockNumber>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 41,
                      "typeName": "Vec<AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 536,
            "type": {
              "def": {
                "tuple": [
                  386,
                  0,
                  6
                ]
              }
            }
          },
          {
            "id": 537,
            "type": {
              "path": [
                "pallet_multisig",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MinimumThreshold",
                      "index": 0,
                      "docs": [
                        "Threshold must be 2 or greater."
                      ]
                    },
                    {
                      "name": "AlreadyApproved",
                      "index": 1,
                      "docs": [
                        "Call is already approved by this signatory."
                      ]
                    },
                    {
                      "name": "NoApprovalsNeeded",
                      "index": 2,
                      "docs": [
                        "Call doesn't need any (more) approvals."
                      ]
                    },
                    {
                      "name": "TooFewSignatories",
                      "index": 3,
                      "docs": [
                        "There are too few signatories in the list."
                      ]
                    },
                    {
                      "name": "TooManySignatories",
                      "index": 4,
                      "docs": [
                        "There are too many signatories in the list."
                      ]
                    },
                    {
                      "name": "SignatoriesOutOfOrder",
                      "index": 5,
                      "docs": [
                        "The signatories were provided out of order; they should be ordered."
                      ]
                    },
                    {
                      "name": "SenderInSignatories",
                      "index": 6,
                      "docs": [
                        "The sender was contained in the other signatories; it shouldn't be."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 7,
                      "docs": [
                        "Multisig operation not found when attempting to cancel."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "index": 8,
                      "docs": [
                        "Only the account that originally created the multisig is able to cancel it."
                      ]
                    },
                    {
                      "name": "NoTimepoint",
                      "index": 9,
                      "docs": [
                        "No timepoint was given, yet the multisig operation is already underway."
                      ]
                    },
                    {
                      "name": "WrongTimepoint",
                      "index": 10,
                      "docs": [
                        "A different timepoint was given to the multisig operation that is underway."
                      ]
                    },
                    {
                      "name": "UnexpectedTimepoint",
                      "index": 11,
                      "docs": [
                        "A timepoint was given, yet no multisig operation is underway."
                      ]
                    },
                    {
                      "name": "MaxWeightTooLow",
                      "index": 12,
                      "docs": [
                        "The maximum weight information provided was too low."
                      ]
                    },
                    {
                      "name": "AlreadyStored",
                      "index": 13,
                      "docs": [
                        "The data to be stored is already stored."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 538,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 539,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "info",
                      "type": 388,
                      "typeName": "IdentityInfo<MaxAdditionalFields>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 539,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 540
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 541,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 540,
            "type": {
              "def": {
                "tuple": [
                  4,
                  426
                ]
              }
            }
          },
          {
            "id": 541,
            "type": {
              "def": {
                "sequence": {
                  "type": 540
                }
              }
            }
          },
          {
            "id": 542,
            "type": {
              "def": {
                "tuple": [
                  6,
                  543
                ]
              }
            }
          },
          {
            "id": 543,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 544,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 545
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 547,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 545,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 546
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 546
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 546,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fields",
                      "type": 424,
                      "typeName": "IdentityFields"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 547,
            "type": {
              "def": {
                "sequence": {
                  "type": 545
                }
              }
            }
          },
          {
            "id": 548,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 549,
            "type": {
              "path": [
                "bifrost_vesting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotVesting",
                      "index": 0,
                      "docs": [
                        "The account given is not vesting."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 1,
                      "docs": [
                        "An existing vesting schedule already exists for this account that cannot be clobbered."
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "index": 2,
                      "docs": [
                        "Amount being transferred is too low to create a vesting schedule."
                      ]
                    },
                    {
                      "name": "SamePerBlock",
                      "index": 3,
                      "docs": [
                        "change to the same per_block param"
                      ]
                    },
                    {
                      "name": "VestingStartAtNotSet",
                      "index": 4,
                      "docs": [
                        "VestingStartAt storage is not set"
                      ]
                    },
                    {
                      "name": "WrongLockedAmount",
                      "index": 5,
                      "docs": [
                        "Wrong amount"
                      ]
                    },
                    {
                      "name": "WrongCliffVesting",
                      "index": 6,
                      "docs": [
                        "Wrong vesting during cliff period"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the vesting pallet."
              ]
            }
          },
          {
            "id": 550,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 551,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 206,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 552,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    },
                    {
                      "name": "InsufficientPermission",
                      "index": 3,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "index": 4,
                      "docs": [
                        "Proposal has not been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 553,
            "type": {
              "path": [
                "pallet_bounties",
                "Bounty"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "curator_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "status",
                      "type": 554,
                      "typeName": "BountyStatus<AccountId, BlockNumber>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 554,
            "type": {
              "path": [
                "pallet_bounties",
                "BountyStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "index": 0
                    },
                    {
                      "name": "Approved",
                      "index": 1
                    },
                    {
                      "name": "Funded",
                      "index": 2
                    },
                    {
                      "name": "CuratorProposed",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Active",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "update_due",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountId"
                        },
                        {
                          "name": "unlock_at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 555,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 556,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "ReasonTooBig",
                      "index": 2,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "UnexpectedStatus",
                      "index": 3,
                      "docs": [
                        "The bounty status is unexpected."
                      ]
                    },
                    {
                      "name": "RequireCurator",
                      "index": 4,
                      "docs": [
                        "Require bounty curator."
                      ]
                    },
                    {
                      "name": "InvalidValue",
                      "index": 5,
                      "docs": [
                        "Invalid bounty value."
                      ]
                    },
                    {
                      "name": "InvalidFee",
                      "index": 6,
                      "docs": [
                        "Invalid bounty fee."
                      ]
                    },
                    {
                      "name": "PendingPayout",
                      "index": 7,
                      "docs": [
                        "A bounty payout is pending.",
                        "To cancel the bounty, you must unassign and slash the curator."
                      ]
                    },
                    {
                      "name": "Premature",
                      "index": 8,
                      "docs": [
                        "The bounties cannot be claimed/closed because it's still in the countdown period."
                      ]
                    },
                    {
                      "name": "HasActiveChildBounty",
                      "index": 9,
                      "docs": [
                        "The bounty cannot be closed because it has active child bounties."
                      ]
                    },
                    {
                      "name": "TooManyQueued",
                      "index": 10,
                      "docs": [
                        "Too many approvals are already queued."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 557,
            "type": {
              "path": [
                "pallet_tips",
                "OpenTip"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "reason",
                      "type": 9,
                      "typeName": "Hash"
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "finder",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "closes",
                      "type": 195,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "tips",
                      "type": 50,
                      "typeName": "Vec<(AccountId, Balance)>"
                    },
                    {
                      "name": "finders_fee",
                      "type": 34,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 558,
            "type": {
              "path": [
                "pallet_tips",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReasonTooBig",
                      "index": 0,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "AlreadyKnown",
                      "index": 1,
                      "docs": [
                        "The tip was already found/started."
                      ]
                    },
                    {
                      "name": "UnknownTip",
                      "index": 2,
                      "docs": [
                        "The tip hash is unknown."
                      ]
                    },
                    {
                      "name": "NotFinder",
                      "index": 3,
                      "docs": [
                        "The account attempting to retract the tip is not the finder of the tip."
                      ]
                    },
                    {
                      "name": "StillOpen",
                      "index": 4,
                      "docs": [
                        "The tip cannot be claimed/closed because there are not enough tippers yet."
                      ]
                    },
                    {
                      "name": "Premature",
                      "index": 5,
                      "docs": [
                        "The tip cannot be claimed/closed because it's still in the countdown period."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 559,
            "type": {
              "path": [
                "pallet_preimage",
                "RequestStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unrequested",
                      "fields": [
                        {
                          "type": 560,
                          "typeName": "Option<(AccountId, Balance)>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Requested",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 560,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 51
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 51
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 561,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 562,
            "type": {
              "path": [
                "pallet_preimage",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooLarge",
                      "index": 0,
                      "docs": [
                        "Preimage is too large to store on-chain."
                      ]
                    },
                    {
                      "name": "AlreadyNoted",
                      "index": 1,
                      "docs": [
                        "Preimage has already been noted on-chain."
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "index": 2,
                      "docs": [
                        "The user is not authorized to perform this action."
                      ]
                    },
                    {
                      "name": "NotNoted",
                      "index": 3,
                      "docs": [
                        "The preimage cannot be removed since it has not yet been noted."
                      ]
                    },
                    {
                      "name": "Requested",
                      "index": 4,
                      "docs": [
                        "A preimage may not be removed when there are outstanding requests."
                      ]
                    },
                    {
                      "name": "NotRequested",
                      "index": 5,
                      "docs": [
                        "The preimage request cannot be removed since no outstanding requests exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 563,
            "type": {
              "path": [
                "orml_xtokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetHasNoReserve",
                      "index": 0,
                      "docs": [
                        "Asset has no reserve location."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransfer",
                      "index": 1,
                      "docs": [
                        "Not cross-chain transfer."
                      ]
                    },
                    {
                      "name": "InvalidDest",
                      "index": 2,
                      "docs": [
                        "Invalid transfer destination."
                      ]
                    },
                    {
                      "name": "NotCrossChainTransferableCurrency",
                      "index": 3,
                      "docs": [
                        "Currency is not cross-chain transferable."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 4,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "XcmExecutionFailed",
                      "index": 5,
                      "docs": [
                        "XCM execution failed."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the",
                        "destination chain."
                      ]
                    },
                    {
                      "name": "InvalidAncestry",
                      "index": 7,
                      "docs": [
                        "Could not get ancestry of asset reserve location."
                      ]
                    },
                    {
                      "name": "InvalidAsset",
                      "index": 8,
                      "docs": [
                        "The MultiAsset is invalid."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 9,
                      "docs": [
                        "The destination `MultiLocation` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 10,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be",
                        "interpreted."
                      ]
                    },
                    {
                      "name": "DistinctReserveForAssetAndFee",
                      "index": 11,
                      "docs": [
                        "We tried sending distinct asset and fee but they have different",
                        "reserve chains."
                      ]
                    },
                    {
                      "name": "ZeroFee",
                      "index": 12,
                      "docs": [
                        "The fee is zero."
                      ]
                    },
                    {
                      "name": "ZeroAmount",
                      "index": 13,
                      "docs": [
                        "The transfering asset amount is zero."
                      ]
                    },
                    {
                      "name": "TooManyAssetsBeingSent",
                      "index": 14,
                      "docs": [
                        "The number of assets to be sent is over the maximum."
                      ]
                    },
                    {
                      "name": "AssetIndexNonExistent",
                      "index": 15,
                      "docs": [
                        "The specified index does not exist in a MultiAssets struct."
                      ]
                    },
                    {
                      "name": "FeeNotEnough",
                      "index": 16,
                      "docs": [
                        "Fee is not enough."
                      ]
                    },
                    {
                      "name": "NotSupportedMultiLocation",
                      "index": 17,
                      "docs": [
                        "Not supported MultiLocation"
                      ]
                    },
                    {
                      "name": "MinXcmFeeNotDefined",
                      "index": 18,
                      "docs": [
                        "MinXcmFee not registered for certain reserve location"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 564,
            "type": {
              "def": {
                "tuple": [
                  0,
                  118
                ]
              }
            }
          },
          {
            "id": 565,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 566
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 567,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 566,
            "type": {
              "path": [
                "orml_tokens",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 80,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 567,
            "type": {
              "def": {
                "sequence": {
                  "type": 566
                }
              }
            }
          },
          {
            "id": 568,
            "type": {
              "path": [
                "orml_tokens",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 569,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 570
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 571,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 570,
            "type": {
              "path": [
                "orml_tokens",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 80
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 80,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 571,
            "type": {
              "def": {
                "sequence": {
                  "type": 570
                }
              }
            }
          },
          {
            "id": 572,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low"
                      ]
                    },
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 1,
                      "docs": [
                        "Cannot convert Amount into Balance type"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 2,
                      "docs": [
                        "Failed because liquidity restrictions due to locking"
                      ]
                    },
                    {
                      "name": "MaxLocksExceeded",
                      "index": 3,
                      "docs": [
                        "Failed because the maximum locks was exceeded"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 5,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 573,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 0,
                      "docs": [
                        "Unable to convert the Amount type into Balance."
                      ]
                    },
                    {
                      "name": "BalanceTooLow",
                      "index": 1,
                      "docs": [
                        "Balance is too low."
                      ]
                    },
                    {
                      "name": "DepositFailed",
                      "index": 2,
                      "docs": [
                        "Deposit result is not expected"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 574,
            "type": {
              "def": {
                "tuple": [
                  60,
                  60
                ]
              }
            }
          },
          {
            "id": 575,
            "type": {
              "def": {
                "tuple": [
                  60,
                  10
                ]
              }
            }
          },
          {
            "id": 576,
            "type": {
              "path": [
                "orml_unknown_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low."
                      ]
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 1,
                      "docs": [
                        "The operation will cause balance to overflow."
                      ]
                    },
                    {
                      "name": "UnhandledAsset",
                      "index": 2,
                      "docs": [
                        "Unhandled asset."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 577,
            "type": {
              "path": [
                "orml_xcm",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The message and destination combination was not recognized as being",
                        "reachable."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "The message and destination was recognized as being reachable but",
                        "the operation could not be completed."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 2,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be",
                        "interpreted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 578,
            "type": {
              "def": {
                "tuple": [
                  123,
                  0
                ]
              }
            }
          },
          {
            "id": 579,
            "type": {
              "def": {
                "tuple": [
                  123,
                  123
                ]
              }
            }
          },
          {
            "id": 580,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 581,
                      "typeName": "[u64; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 581,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 8
                }
              }
            }
          },
          {
            "id": 582,
            "type": {
              "def": {
                "tuple": [
                  161,
                  2
                ]
              }
            }
          },
          {
            "id": 583,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 123
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 123
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 584,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "PairStatus"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Account",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Trading",
                      "fields": [
                        {
                          "type": 585,
                          "typeName": "PairMetadata<Balance, Account>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Bootstrap",
                      "fields": [
                        {
                          "type": 586,
                          "typeName": "BootstrapParameter<Balance, BlockNumber, Account>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Disable",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 585,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "PairMetadata"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Account",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pair_account",
                      "type": 0,
                      "typeName": "Account"
                    },
                    {
                      "name": "total_supply",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 586,
            "type": {
              "path": [
                "zenlink_protocol",
                "primitives",
                "BootstrapParameter"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Account",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_supply",
                      "type": 587,
                      "typeName": "(Balance, Balance)"
                    },
                    {
                      "name": "capacity_supply",
                      "type": 587,
                      "typeName": "(Balance, Balance)"
                    },
                    {
                      "name": "accumulated_supply",
                      "type": 587,
                      "typeName": "(Balance, Balance)"
                    },
                    {
                      "name": "end_block_number",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "pair_account",
                      "type": 0,
                      "typeName": "Account"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 587,
            "type": {
              "def": {
                "tuple": [
                  6,
                  6
                ]
              }
            }
          },
          {
            "id": 588,
            "type": {
              "def": {
                "tuple": [
                  579,
                  0
                ]
              }
            }
          },
          {
            "id": 589,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 123
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 126
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 590,
            "type": {
              "path": [
                "zenlink_protocol",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireProtocolAdmin",
                      "index": 0,
                      "docs": [
                        "Require the admin who can reset the admin and receiver of the protocol fee."
                      ]
                    },
                    {
                      "name": "RequireProtocolAdminCandidate",
                      "index": 1,
                      "docs": [
                        "Require the admin candidate who can become new admin after confirm."
                      ]
                    },
                    {
                      "name": "InvalidFeePoint",
                      "index": 2,
                      "docs": [
                        "Invalid fee_point"
                      ]
                    },
                    {
                      "name": "UnsupportedAssetType",
                      "index": 3,
                      "docs": [
                        "Unsupported AssetId by this ZenlinkProtocol Version."
                      ]
                    },
                    {
                      "name": "InsufficientAssetBalance",
                      "index": 4,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NativeBalanceTooLow",
                      "index": 5,
                      "docs": [
                        "Account native currency balance must be greater than ExistentialDeposit."
                      ]
                    },
                    {
                      "name": "DeniedCreatePair",
                      "index": 6,
                      "docs": [
                        "Trading pair can't be created."
                      ]
                    },
                    {
                      "name": "PairAlreadyExists",
                      "index": 7,
                      "docs": [
                        "Trading pair already exists."
                      ]
                    },
                    {
                      "name": "PairNotExists",
                      "index": 8,
                      "docs": [
                        "Trading pair does not exist."
                      ]
                    },
                    {
                      "name": "AssetNotExists",
                      "index": 9,
                      "docs": [
                        "Asset does not exist."
                      ]
                    },
                    {
                      "name": "InsufficientLiquidity",
                      "index": 10,
                      "docs": [
                        "Liquidity is not enough."
                      ]
                    },
                    {
                      "name": "InsufficientPairReserve",
                      "index": 11,
                      "docs": [
                        "Trading pair does have enough foreign."
                      ]
                    },
                    {
                      "name": "InsufficientTargetAmount",
                      "index": 12,
                      "docs": [
                        "Get target amount is less than exception."
                      ]
                    },
                    {
                      "name": "ExcessiveSoldAmount",
                      "index": 13,
                      "docs": [
                        "Sold amount is more than exception."
                      ]
                    },
                    {
                      "name": "InvalidPath",
                      "index": 14,
                      "docs": [
                        "Can't find pair though trading path."
                      ]
                    },
                    {
                      "name": "IncorrectAssetAmountRange",
                      "index": 15,
                      "docs": [
                        "Incorrect foreign amount range."
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 16,
                      "docs": [
                        "Overflow."
                      ]
                    },
                    {
                      "name": "Deadline",
                      "index": 17,
                      "docs": [
                        "Transaction block number is larger than the end block number."
                      ]
                    },
                    {
                      "name": "AccountIdBadLocation",
                      "index": 18,
                      "docs": [
                        "Location given was invalid or unsupported."
                      ]
                    },
                    {
                      "name": "ExecutionFailed",
                      "index": 19,
                      "docs": [
                        "XCM execution failed."
                      ]
                    },
                    {
                      "name": "DeniedTransferToSelf",
                      "index": 20,
                      "docs": [
                        "Transfer to self by XCM message."
                      ]
                    },
                    {
                      "name": "TargetChainNotRegistered",
                      "index": 21,
                      "docs": [
                        "Not in ZenlinkRegistedParaChains."
                      ]
                    },
                    {
                      "name": "InvariantCheckFailed",
                      "index": 22,
                      "docs": [
                        "Can't pass the K value check"
                      ]
                    },
                    {
                      "name": "PairCreateForbidden",
                      "index": 23,
                      "docs": [
                        "Created pair can't create now"
                      ]
                    },
                    {
                      "name": "NotInBootstrap",
                      "index": 24,
                      "docs": [
                        "Pair is not in bootstrap"
                      ]
                    },
                    {
                      "name": "InvalidContributionAmount",
                      "index": 25,
                      "docs": [
                        "Amount of contribution is invalid."
                      ]
                    },
                    {
                      "name": "UnqualifiedBootstrap",
                      "index": 26,
                      "docs": [
                        "Amount of contribution is invalid."
                      ]
                    },
                    {
                      "name": "ZeroContribute",
                      "index": 27,
                      "docs": [
                        "Zero contribute in bootstrap"
                      ]
                    },
                    {
                      "name": "DenyRefund",
                      "index": 28,
                      "docs": [
                        "Bootstrap deny refund"
                      ]
                    },
                    {
                      "name": "DisableBootstrap",
                      "index": 29,
                      "docs": [
                        "Bootstrap is disable"
                      ]
                    },
                    {
                      "name": "NotQualifiedAccount",
                      "index": 30,
                      "docs": [
                        "Not eligible to contribute"
                      ]
                    },
                    {
                      "name": "NoRewardTokens",
                      "index": 31,
                      "docs": [
                        "Reward of bootstrap is not set."
                      ]
                    },
                    {
                      "name": "ChargeRewardParamsError",
                      "index": 32,
                      "docs": [
                        "Charge bootstrap extrinsic args has error,"
                      ]
                    },
                    {
                      "name": "ExistRewardsInBootstrap",
                      "index": 33,
                      "docs": [
                        "Exist some reward in bootstrap,"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 591,
            "type": {
              "path": [
                "merkle_distributor",
                "MerkleMetadata"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 118
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BoundString",
                  "type": 592
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "merkle_root",
                      "type": 9,
                      "typeName": "H256"
                    },
                    {
                      "name": "description",
                      "type": 592,
                      "typeName": "BoundString"
                    },
                    {
                      "name": "distribute_currency",
                      "type": 118,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "distribute_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "distribute_holder",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "charged",
                      "type": 34,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 592,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 593,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 594,
            "type": {
              "path": [
                "merkle_distributor",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadDescription",
                      "index": 0,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "InvalidMerkleDistributorId",
                      "index": 1,
                      "docs": [
                        "The id is not exist."
                      ]
                    },
                    {
                      "name": "MerkleVerifyFailed",
                      "index": 2,
                      "docs": [
                        "The proof is invalid"
                      ]
                    },
                    {
                      "name": "Claimed",
                      "index": 3,
                      "docs": [
                        "The reward is already distributed."
                      ]
                    },
                    {
                      "name": "Charged",
                      "index": 4,
                      "docs": [
                        "The reward is already charged."
                      ]
                    },
                    {
                      "name": "WithdrawAmountExceed",
                      "index": 5,
                      "docs": [
                        "Withdraw amount exceed charge amount."
                      ]
                    },
                    {
                      "name": "BadChargeAccount",
                      "index": 6,
                      "docs": [
                        ""
                      ]
                    },
                    {
                      "name": "AlreadyInWhiteList",
                      "index": 7,
                      "docs": [
                        "Account has already in the set who can create merkle distributor"
                      ]
                    },
                    {
                      "name": "NotInWhiteList",
                      "index": 8,
                      "docs": [
                        "Account is no in the set who can create merkle distributor"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 595,
            "type": {
              "path": [
                "bifrost_flexible_fee",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotEnoughBalance",
                      "index": 0
                    },
                    {
                      "name": "ExceedMaxListLength",
                      "index": 1
                    },
                    {
                      "name": "Overflow",
                      "index": 2
                    },
                    {
                      "name": "ConversionError",
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 596,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 597
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 597
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 597,
            "type": {
              "path": [
                "bifrost_salp",
                "FundInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "LeasePeriod",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "raised",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "cap",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "first_slot",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "last_slot",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "trie_index",
                      "type": 4,
                      "typeName": "TrieIndex"
                    },
                    {
                      "name": "status",
                      "type": 447,
                      "typeName": "FundStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 598,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 599,
            "type": {
              "path": [
                "bifrost_salp",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FirstSlotTooFarInFuture",
                      "index": 0,
                      "docs": [
                        "The first slot needs to at least be less than 3 `max_value`."
                      ]
                    },
                    {
                      "name": "LastSlotBeforeFirstSlot",
                      "index": 1,
                      "docs": [
                        "Last slot must be greater than first slot."
                      ]
                    },
                    {
                      "name": "LastSlotTooFarInFuture",
                      "index": 2,
                      "docs": [
                        "The last slot cannot be more then 3 slots after the first slot."
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 3,
                      "docs": [
                        "There was an overflow."
                      ]
                    },
                    {
                      "name": "ContributionTooSmall",
                      "index": 4,
                      "docs": [
                        "The contribution was below the minimum, `MinContribution`."
                      ]
                    },
                    {
                      "name": "ZeroContribution",
                      "index": 5,
                      "docs": [
                        "The account doesn't have any contribution to the fund."
                      ]
                    },
                    {
                      "name": "InvalidParaId",
                      "index": 6,
                      "docs": [
                        "Invalid fund index."
                      ]
                    },
                    {
                      "name": "InvalidFundStatus",
                      "index": 7,
                      "docs": [
                        "Invalid fund status."
                      ]
                    },
                    {
                      "name": "InvalidContributionStatus",
                      "index": 8,
                      "docs": [
                        "Invalid contribution status."
                      ]
                    },
                    {
                      "name": "CapExceeded",
                      "index": 9,
                      "docs": [
                        "Contributions exceed maximum amount."
                      ]
                    },
                    {
                      "name": "FundAlreadyCreated",
                      "index": 10,
                      "docs": [
                        "The fund has been registered."
                      ]
                    },
                    {
                      "name": "XcmFailed",
                      "index": 11,
                      "docs": [
                        "Crosschain xcm failed"
                      ]
                    },
                    {
                      "name": "NotEnoughReservedAssetsToRefund",
                      "index": 12,
                      "docs": [
                        "Don't have enough vsToken/vsBond to refund"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceInRefundPool",
                      "index": 13,
                      "docs": [
                        "Don't have enough token to refund by users"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceToUnlock",
                      "index": 14,
                      "docs": [
                        "Don't have enough vsToken/vsBond to unlock"
                      ]
                    },
                    {
                      "name": "VSBondExpired",
                      "index": 15,
                      "docs": [
                        "The vsBond is expired now"
                      ]
                    },
                    {
                      "name": "UnRedeemableNow",
                      "index": 16,
                      "docs": [
                        "The vsBond cannot be redeemed by now"
                      ]
                    },
                    {
                      "name": "NotEnoughFreeAssetsToRedeem",
                      "index": 17,
                      "docs": [
                        "Dont have enough vsToken/vsBond to redeem"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceInRedeemPool",
                      "index": 18,
                      "docs": [
                        "Don't have enough token to redeem by users"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceInFund",
                      "index": 19
                    },
                    {
                      "name": "InvalidFundSameSlot",
                      "index": 20
                    },
                    {
                      "name": "InvalidFundNotExist",
                      "index": 21
                    },
                    {
                      "name": "InvalidRefund",
                      "index": 22
                    },
                    {
                      "name": "NotEnoughBalanceToContribute",
                      "index": 23
                    },
                    {
                      "name": "NotSupportTokenType",
                      "index": 24
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 600,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 206
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 601,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "PoolInfo"
              ],
              "params": [
                {
                  "name": "AccountIdOf",
                  "type": 0
                },
                {
                  "name": "BalanceOf",
                  "type": 6
                },
                {
                  "name": "BlockNumberOf",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId"
                    },
                    {
                      "name": "keeper",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "investor",
                      "type": 161,
                      "typeName": "Option<AccountIdOf>"
                    },
                    {
                      "name": "trading_pair",
                      "type": 134,
                      "typeName": "(CurrencyId, CurrencyId)"
                    },
                    {
                      "name": "duration",
                      "type": 4,
                      "typeName": "BlockNumberOf"
                    },
                    {
                      "name": "r#type",
                      "type": 133,
                      "typeName": "PoolType"
                    },
                    {
                      "name": "min_deposit_to_start",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "after_block_to_start",
                      "type": 4,
                      "typeName": "BlockNumberOf"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "rewards",
                      "type": 602,
                      "typeName": "BTreeMap<CurrencyId, RewardData<BalanceOf>>"
                    },
                    {
                      "name": "update_b",
                      "type": 4,
                      "typeName": "BlockNumberOf"
                    },
                    {
                      "name": "state",
                      "type": 606,
                      "typeName": "PoolState"
                    },
                    {
                      "name": "block_startup",
                      "type": 195,
                      "typeName": "Option<BlockNumberOf>"
                    },
                    {
                      "name": "block_retired",
                      "type": 195,
                      "typeName": "Option<BlockNumberOf>"
                    },
                    {
                      "name": "redeem_limit_time",
                      "type": 4,
                      "typeName": "BlockNumberOf"
                    },
                    {
                      "name": "unlock_limit_nums",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "pending_unlock_nums",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 602,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 118
                },
                {
                  "name": "V",
                  "type": 603
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 604
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 603,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "RewardData"
              ],
              "params": [
                {
                  "name": "BalanceOf",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "per_block",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "claimed",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "gain_avg",
                      "type": 271,
                      "typeName": "FixedU128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 604,
            "type": {
              "def": {
                "sequence": {
                  "type": 605
                }
              }
            }
          },
          {
            "id": 605,
            "type": {
              "def": {
                "tuple": [
                  118,
                  603
                ]
              }
            }
          },
          {
            "id": 606,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "PoolState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnCharged",
                      "index": 0
                    },
                    {
                      "name": "Charged",
                      "index": 1
                    },
                    {
                      "name": "Ongoing",
                      "index": 2
                    },
                    {
                      "name": "Retired",
                      "index": 3
                    },
                    {
                      "name": "Dead",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 607,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "DepositData"
              ],
              "params": [
                {
                  "name": "BalanceOf",
                  "type": 6
                },
                {
                  "name": "BlockNumberOf",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "gain_avgs",
                      "type": 608,
                      "typeName": "BTreeMap<CurrencyId, FixedU128>"
                    },
                    {
                      "name": "update_b",
                      "type": 4,
                      "typeName": "BlockNumberOf"
                    },
                    {
                      "name": "pending_unlocks",
                      "type": 611,
                      "typeName": "VecDeque<(BlockNumberOf, BalanceOf)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 608,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 118
                },
                {
                  "name": "V",
                  "type": 271
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 609
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 609,
            "type": {
              "def": {
                "sequence": {
                  "type": 610
                }
              }
            }
          },
          {
            "id": 610,
            "type": {
              "def": {
                "tuple": [
                  118,
                  271
                ]
              }
            }
          },
          {
            "id": 611,
            "type": {
              "def": {
                "sequence": {
                  "type": 612
                }
              }
            }
          },
          {
            "id": 612,
            "type": {
              "def": {
                "tuple": [
                  4,
                  6
                ]
              }
            }
          },
          {
            "id": 613,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "StorageVersion"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "index": 0
                    },
                    {
                      "name": "V2_0_0",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 614,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidTradingPair",
                      "index": 0
                    },
                    {
                      "name": "InvalidDuration",
                      "index": 1
                    },
                    {
                      "name": "InvalidRewardPerBlock",
                      "index": 2
                    },
                    {
                      "name": "InvalidDepositLimit",
                      "index": 3
                    },
                    {
                      "name": "InvalidPoolId",
                      "index": 4
                    },
                    {
                      "name": "InvalidPoolState",
                      "index": 5
                    },
                    {
                      "name": "InvalidPoolType",
                      "index": 6
                    },
                    {
                      "name": "DuplicateReward",
                      "index": 7,
                      "docs": [
                        "Find duplicate rewards when creating the liquidity-pool"
                      ]
                    },
                    {
                      "name": "ExceedMaximumDeposit",
                      "index": 8,
                      "docs": [
                        "The deposit of a liquidity-pool exceeded the `MaximumDepositInPool`"
                      ]
                    },
                    {
                      "name": "ExceedMaximumCharged",
                      "index": 9,
                      "docs": [
                        "The number of pool which be charged exceeded the `MaximumCharged`"
                      ]
                    },
                    {
                      "name": "NotEnoughToDeposit",
                      "index": 10,
                      "docs": [
                        "User doesn't have enough balance of which be deposited to pool"
                      ]
                    },
                    {
                      "name": "NotEnoughToRedeem",
                      "index": 11,
                      "docs": [
                        "Keeper doesn't have enough balance to be redeemed by the user(VERY SCARY ERR)"
                      ]
                    },
                    {
                      "name": "NotEnoughToUnlock",
                      "index": 12,
                      "docs": [
                        "Keeper doesn't have enough balance to be unlocked by the user(VERY SCARY ERR)"
                      ]
                    },
                    {
                      "name": "NoDepositOfUser",
                      "index": 13,
                      "docs": [
                        "User has nothing be deposited to the pool"
                      ]
                    },
                    {
                      "name": "TooLowToDeposit",
                      "index": 14,
                      "docs": [
                        "The balance which was tried to deposit to the pool less than `MinimumDepositOfUser`"
                      ]
                    },
                    {
                      "name": "TooLowToRedeem",
                      "index": 15,
                      "docs": [
                        "User doesn't have such amount deposit can be redeemed from the pool"
                      ]
                    },
                    {
                      "name": "TooShortBetweenTwoClaim",
                      "index": 16,
                      "docs": [
                        "Duplicate claim actions were at same block height"
                      ]
                    },
                    {
                      "name": "PoolChargedAlready",
                      "index": 17,
                      "docs": [
                        "The pool has been charged already"
                      ]
                    },
                    {
                      "name": "ExceedMaximumUnlock",
                      "index": 18,
                      "docs": [
                        "The number of pending-unlocks reaches the limit;"
                      ]
                    },
                    {
                      "name": "NoPendingUnlocks",
                      "index": 19,
                      "docs": [
                        "Not have pending-unlocks;"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 20,
                      "docs": [
                        "Input wrong index to `cancel_unlock`;"
                      ]
                    },
                    {
                      "name": "Unexpected",
                      "index": 21,
                      "docs": [
                        "__NOTE__: ERROR HAPPEN"
                      ]
                    },
                    {
                      "name": "OnMigration",
                      "index": 22,
                      "docs": [
                        "On lazy-migration"
                      ]
                    },
                    {
                      "name": "NoMigration",
                      "index": 23
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 615,
            "type": {
              "path": [
                "bifrost_liquidity_mining",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidTradingPair",
                      "index": 0
                    },
                    {
                      "name": "InvalidDuration",
                      "index": 1
                    },
                    {
                      "name": "InvalidRewardPerBlock",
                      "index": 2
                    },
                    {
                      "name": "InvalidDepositLimit",
                      "index": 3
                    },
                    {
                      "name": "InvalidPoolId",
                      "index": 4
                    },
                    {
                      "name": "InvalidPoolState",
                      "index": 5
                    },
                    {
                      "name": "InvalidPoolType",
                      "index": 6
                    },
                    {
                      "name": "DuplicateReward",
                      "index": 7,
                      "docs": [
                        "Find duplicate rewards when creating the liquidity-pool"
                      ]
                    },
                    {
                      "name": "ExceedMaximumDeposit",
                      "index": 8,
                      "docs": [
                        "The deposit of a liquidity-pool exceeded the `MaximumDepositInPool`"
                      ]
                    },
                    {
                      "name": "ExceedMaximumCharged",
                      "index": 9,
                      "docs": [
                        "The number of pool which be charged exceeded the `MaximumCharged`"
                      ]
                    },
                    {
                      "name": "NotEnoughToDeposit",
                      "index": 10,
                      "docs": [
                        "User doesn't have enough balance of which be deposited to pool"
                      ]
                    },
                    {
                      "name": "NotEnoughToRedeem",
                      "index": 11,
                      "docs": [
                        "Keeper doesn't have enough balance to be redeemed by the user(VERY SCARY ERR)"
                      ]
                    },
                    {
                      "name": "NotEnoughToUnlock",
                      "index": 12,
                      "docs": [
                        "Keeper doesn't have enough balance to be unlocked by the user(VERY SCARY ERR)"
                      ]
                    },
                    {
                      "name": "NoDepositOfUser",
                      "index": 13,
                      "docs": [
                        "User has nothing be deposited to the pool"
                      ]
                    },
                    {
                      "name": "TooLowToDeposit",
                      "index": 14,
                      "docs": [
                        "The balance which was tried to deposit to the pool less than `MinimumDepositOfUser`"
                      ]
                    },
                    {
                      "name": "TooLowToRedeem",
                      "index": 15,
                      "docs": [
                        "User doesn't have such amount deposit can be redeemed from the pool"
                      ]
                    },
                    {
                      "name": "TooShortBetweenTwoClaim",
                      "index": 16,
                      "docs": [
                        "Duplicate claim actions were at same block height"
                      ]
                    },
                    {
                      "name": "PoolChargedAlready",
                      "index": 17,
                      "docs": [
                        "The pool has been charged already"
                      ]
                    },
                    {
                      "name": "ExceedMaximumUnlock",
                      "index": 18,
                      "docs": [
                        "The number of pending-unlocks reaches the limit;"
                      ]
                    },
                    {
                      "name": "NoPendingUnlocks",
                      "index": 19,
                      "docs": [
                        "Not have pending-unlocks;"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 20,
                      "docs": [
                        "Input wrong index to `cancel_unlock`;"
                      ]
                    },
                    {
                      "name": "Unexpected",
                      "index": 21,
                      "docs": [
                        "__NOTE__: ERROR HAPPEN"
                      ]
                    },
                    {
                      "name": "OnMigration",
                      "index": 22,
                      "docs": [
                        "On lazy-migration"
                      ]
                    },
                    {
                      "name": "NoMigration",
                      "index": 23
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 616,
            "type": {
              "path": [
                "bifrost_token_issuer",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotEnoughBalance",
                      "index": 0,
                      "docs": [
                        "The balance is not enough"
                      ]
                    },
                    {
                      "name": "NotExist",
                      "index": 1,
                      "docs": [
                        "The account doesn't exist in the whitelist."
                      ]
                    },
                    {
                      "name": "NotAllowed",
                      "index": 2,
                      "docs": [
                        "The origin is not allowed to perform the operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 617,
            "type": {
              "path": [
                "bifrost_lightening_redeem",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotKSM",
                      "index": 0
                    },
                    {
                      "name": "DenominatorZero",
                      "index": 1
                    },
                    {
                      "name": "NotGreaterThanZero",
                      "index": 2
                    },
                    {
                      "name": "ExceedPoolAmount",
                      "index": 3
                    },
                    {
                      "name": "NotEnoughBalance",
                      "index": 4
                    },
                    {
                      "name": "InvalidReleaseInterval",
                      "index": 5
                    },
                    {
                      "name": "Overflow",
                      "index": 6
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 618,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 619
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 619
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 619,
            "type": {
              "path": [
                "bifrost_salp_lite",
                "FundInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "LeasePeriod",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "raised",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "cap",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "first_slot",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "last_slot",
                      "type": 4,
                      "typeName": "LeasePeriod"
                    },
                    {
                      "name": "trie_index",
                      "type": 4,
                      "typeName": "TrieIndex"
                    },
                    {
                      "name": "status",
                      "type": 455,
                      "typeName": "FundStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 620,
            "type": {
              "path": [
                "bifrost_salp_lite",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FirstSlotTooFarInFuture",
                      "index": 0,
                      "docs": [
                        "The first slot needs to at least be less than 3 `max_value`."
                      ]
                    },
                    {
                      "name": "LastSlotBeforeFirstSlot",
                      "index": 1,
                      "docs": [
                        "Last slot must be greater than first slot."
                      ]
                    },
                    {
                      "name": "LastSlotTooFarInFuture",
                      "index": 2,
                      "docs": [
                        "The last slot cannot be more then 3 slots after the first slot."
                      ]
                    },
                    {
                      "name": "MigrateSlotBeforeFirstSlot",
                      "index": 3,
                      "docs": [
                        "Migrate slot must be greater than first slot"
                      ]
                    },
                    {
                      "name": "Overflow",
                      "index": 4,
                      "docs": [
                        "There was an overflow."
                      ]
                    },
                    {
                      "name": "ContributionTooSmall",
                      "index": 5,
                      "docs": [
                        "The contribution was below the minimum, `MinContribution`."
                      ]
                    },
                    {
                      "name": "ZeroContribution",
                      "index": 6,
                      "docs": [
                        "The account doesn't have any contribution to the fund."
                      ]
                    },
                    {
                      "name": "InvalidParaId",
                      "index": 7,
                      "docs": [
                        "Invalid fund index."
                      ]
                    },
                    {
                      "name": "InvalidFundStatus",
                      "index": 8,
                      "docs": [
                        "Invalid fund status."
                      ]
                    },
                    {
                      "name": "InvalidContributionStatus",
                      "index": 9,
                      "docs": [
                        "Invalid contribution status."
                      ]
                    },
                    {
                      "name": "CapExceeded",
                      "index": 10,
                      "docs": [
                        "Contributions exceed maximum amount."
                      ]
                    },
                    {
                      "name": "FundAlreadyCreated",
                      "index": 11,
                      "docs": [
                        "The fund has been registered."
                      ]
                    },
                    {
                      "name": "NotEnoughReservedAssetsToRefund",
                      "index": 12,
                      "docs": [
                        "Don't have enough vsToken/vsBond to refund"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceInRefundPool",
                      "index": 13,
                      "docs": [
                        "Don't have enough token to refund by users"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceToUnlock",
                      "index": 14,
                      "docs": [
                        "Don't have enough vsToken/vsBond to unlock"
                      ]
                    },
                    {
                      "name": "NotEnoughFreeAssetsToRedeem",
                      "index": 15,
                      "docs": [
                        "Dont have enough vsToken/vsBond to redeem"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceInRedeemPool",
                      "index": 16,
                      "docs": [
                        "Don't have enough token to redeem by users"
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceInFund",
                      "index": 17,
                      "docs": [
                        "Invalid Fund when refund/redeem"
                      ]
                    },
                    {
                      "name": "InvalidFundSameSlot",
                      "index": 18
                    },
                    {
                      "name": "InvalidFundNotExist",
                      "index": 19
                    },
                    {
                      "name": "InvalidRefund",
                      "index": 20
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 621,
            "type": {
              "path": [
                "bifrost_call_switchgear",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotSwitchOff",
                      "index": 0,
                      "docs": [
                        "can not switch off"
                      ]
                    },
                    {
                      "name": "InvalidCharacter",
                      "index": 1,
                      "docs": [
                        "Invalid character"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 622,
            "type": {
              "def": {
                "tuple": [
                  0,
                  143
                ]
              }
            }
          },
          {
            "id": 623,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 624,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 624,
            "type": {
              "def": {
                "sequence": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 625,
            "type": {
              "path": [
                "bifrost_vsbond_auction",
                "OrderInfo"
              ],
              "params": [
                {
                  "name": "AccountIdOf",
                  "type": 0
                },
                {
                  "name": "BalanceOf",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "vsbond",
                      "type": 118,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "remain",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "total_price",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "remain_price",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "order_id",
                      "type": 8,
                      "typeName": "OrderId"
                    },
                    {
                      "name": "order_type",
                      "type": 143,
                      "typeName": "OrderType"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 626,
            "type": {
              "def": {
                "tuple": [
                  144,
                  144
                ]
              }
            }
          },
          {
            "id": 627,
            "type": {
              "path": [
                "bifrost_vsbond_auction",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotEnoughAmount",
                      "index": 0
                    },
                    {
                      "name": "NotFindOrderInfo",
                      "index": 1
                    },
                    {
                      "name": "NotEnoughBalanceToCreateOrder",
                      "index": 2
                    },
                    {
                      "name": "DontHaveEnoughToPay",
                      "index": 3
                    },
                    {
                      "name": "ForbidRevokeOrderNotInTrade",
                      "index": 4
                    },
                    {
                      "name": "ForbidRevokeOrderWithoutOwnership",
                      "index": 5
                    },
                    {
                      "name": "ForbidClinchOrderNotInTrade",
                      "index": 6
                    },
                    {
                      "name": "ForbidClinchOrderWithinOwnership",
                      "index": 7
                    },
                    {
                      "name": "ExceedMaximumOrderInTrade",
                      "index": 8
                    },
                    {
                      "name": "InvalidVsbond",
                      "index": 9
                    },
                    {
                      "name": "Unexpected",
                      "index": 10
                    },
                    {
                      "name": "InvalidRateInput",
                      "index": 11
                    },
                    {
                      "name": "Overflow",
                      "index": 12
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 628,
            "type": {
              "path": [
                "bifrost_asset_registry",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadLocation",
                      "index": 0,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "MultiLocationExisted",
                      "index": 1,
                      "docs": [
                        "MultiLocation existed"
                      ]
                    },
                    {
                      "name": "AssetIdNotExists",
                      "index": 2,
                      "docs": [
                        "AssetId not exists"
                      ]
                    },
                    {
                      "name": "AssetIdExisted",
                      "index": 3,
                      "docs": [
                        "AssetId exists"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 629,
            "type": {
              "def": {
                "tuple": [
                  118,
                  4
                ]
              }
            }
          },
          {
            "id": 630,
            "type": {
              "def": {
                "tuple": [
                  0,
                  6,
                  149
                ]
              }
            }
          },
          {
            "id": 631,
            "type": {
              "def": {
                "tuple": [
                  6,
                  632
                ]
              }
            }
          },
          {
            "id": 632,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 206,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 633,
            "type": {
              "def": {
                "tuple": [
                  149,
                  118
                ]
              }
            }
          },
          {
            "id": 634,
            "type": {
              "def": {
                "tuple": [
                  6,
                  635,
                  118
                ]
              }
            }
          },
          {
            "id": 635,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 206,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 636,
            "type": {
              "path": [
                "bifrost_vtoken_minting",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BelowMinimumMint",
                      "index": 0
                    },
                    {
                      "name": "BelowMinimumRedeem",
                      "index": 1
                    },
                    {
                      "name": "InvalidRebondToken",
                      "index": 2,
                      "docs": [
                        "Invalid token to rebond."
                      ]
                    },
                    {
                      "name": "NotSupportTokenType",
                      "index": 3,
                      "docs": [
                        "Token type not support."
                      ]
                    },
                    {
                      "name": "NotEnoughBalanceToUnlock",
                      "index": 4
                    },
                    {
                      "name": "TokenToRebondNotZero",
                      "index": 5
                    },
                    {
                      "name": "OngoingTimeUnitNotSet",
                      "index": 6
                    },
                    {
                      "name": "TokenUnlockLedgerNotFound",
                      "index": 7
                    },
                    {
                      "name": "UserUnlockLedgerNotFound",
                      "index": 8
                    },
                    {
                      "name": "TimeUnitUnlockLedgerNotFound",
                      "index": 9
                    },
                    {
                      "name": "UnlockDurationNotFound",
                      "index": 10
                    },
                    {
                      "name": "Unexpected",
                      "index": 11
                    },
                    {
                      "name": "CalculationOverflow",
                      "index": 12
                    },
                    {
                      "name": "ExceedMaximumUnlockId",
                      "index": 13
                    },
                    {
                      "name": "TooManyRedeems",
                      "index": 14
                    },
                    {
                      "name": "CanNotRedeem",
                      "index": 15
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 637,
            "type": {
              "def": {
                "tuple": [
                  118,
                  158
                ]
              }
            }
          },
          {
            "id": 638,
            "type": {
              "def": {
                "tuple": [
                  118,
                  107
                ]
              }
            }
          },
          {
            "id": 639,
            "type": {
              "def": {
                "tuple": [
                  118,
                  60
                ]
              }
            }
          },
          {
            "id": 640,
            "type": {
              "def": {
                "tuple": [
                  185,
                  4
                ]
              }
            }
          },
          {
            "id": 641,
            "type": {
              "def": {
                "tuple": [
                  180,
                  4
                ]
              }
            }
          },
          {
            "id": 642,
            "type": {
              "def": {
                "tuple": [
                  149,
                  4
                ]
              }
            }
          },
          {
            "id": 643,
            "type": {
              "path": [
                "bifrost_slp",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OperateOriginNotSet",
                      "index": 0
                    },
                    {
                      "name": "NotAuthorized",
                      "index": 1
                    },
                    {
                      "name": "NotSupportedCurrencyId",
                      "index": 2
                    },
                    {
                      "name": "FailToAddDelegator",
                      "index": 3
                    },
                    {
                      "name": "FailToBond",
                      "index": 4
                    },
                    {
                      "name": "OverFlow",
                      "index": 5
                    },
                    {
                      "name": "UnderFlow",
                      "index": 6
                    },
                    {
                      "name": "NotExist",
                      "index": 7
                    },
                    {
                      "name": "LowerThanMinimum",
                      "index": 8
                    },
                    {
                      "name": "GreaterThanMaximum",
                      "index": 9
                    },
                    {
                      "name": "AlreadyBonded",
                      "index": 10
                    },
                    {
                      "name": "AccountNotExist",
                      "index": 11
                    },
                    {
                      "name": "DelegatorNotExist",
                      "index": 12
                    },
                    {
                      "name": "XcmFailure",
                      "index": 13
                    },
                    {
                      "name": "DelegatorNotBonded",
                      "index": 14
                    },
                    {
                      "name": "ExceedActiveMaximum",
                      "index": 15
                    },
                    {
                      "name": "ProblematicLedger",
                      "index": 16
                    },
                    {
                      "name": "NotEnoughToUnbond",
                      "index": 17
                    },
                    {
                      "name": "ExceedUnlockingRecords",
                      "index": 18
                    },
                    {
                      "name": "RebondExceedUnlockingAmount",
                      "index": 19
                    },
                    {
                      "name": "DecodingError",
                      "index": 20
                    },
                    {
                      "name": "EncodingError",
                      "index": 21
                    },
                    {
                      "name": "VectorEmpty",
                      "index": 22
                    },
                    {
                      "name": "ValidatorSetNotExist",
                      "index": 23
                    },
                    {
                      "name": "ValidatorNotExist",
                      "index": 24
                    },
                    {
                      "name": "InvalidTimeUnit",
                      "index": 25
                    },
                    {
                      "name": "AmountZero",
                      "index": 26
                    },
                    {
                      "name": "AmountNotZero",
                      "index": 27
                    },
                    {
                      "name": "AlreadyExist",
                      "index": 28
                    },
                    {
                      "name": "ValidatorStillInUse",
                      "index": 29
                    },
                    {
                      "name": "TimeUnitNotExist",
                      "index": 30
                    },
                    {
                      "name": "FeeSourceNotExist",
                      "index": 31
                    },
                    {
                      "name": "BalanceLow",
                      "index": 32
                    },
                    {
                      "name": "WeightAndFeeNotExists",
                      "index": 33
                    },
                    {
                      "name": "OperateOriginNotExists",
                      "index": 34
                    },
                    {
                      "name": "MinimumsAndMaximumsNotExist",
                      "index": 35
                    },
                    {
                      "name": "QueryNotExist",
                      "index": 36
                    },
                    {
                      "name": "DelaysNotExist",
                      "index": 37
                    },
                    {
                      "name": "Unexpected",
                      "index": 38
                    },
                    {
                      "name": "UnlockingRecordNotExist",
                      "index": 39
                    },
                    {
                      "name": "QueryResponseRemoveError",
                      "index": 40
                    },
                    {
                      "name": "ValidatorsByDelegatorResponseCheckError",
                      "index": 41
                    },
                    {
                      "name": "LedgerResponseCheckError",
                      "index": 42
                    },
                    {
                      "name": "InvalidHostingFee",
                      "index": 43
                    },
                    {
                      "name": "InvalidAccount",
                      "index": 44
                    },
                    {
                      "name": "IncreaseTokenPoolError",
                      "index": 45
                    },
                    {
                      "name": "TuneExchangeRateLimitNotSet",
                      "index": 46
                    },
                    {
                      "name": "DelegatorLatestTuneRecordNotExist",
                      "index": 47
                    },
                    {
                      "name": "CurrencyLatestTuneRecordNotExist",
                      "index": 48
                    },
                    {
                      "name": "InvalidTransferSource",
                      "index": 49
                    },
                    {
                      "name": "ValidatorNotProvided",
                      "index": 50
                    },
                    {
                      "name": "Unsupported",
                      "index": 51
                    },
                    {
                      "name": "ValidatorNotBonded",
                      "index": 52
                    },
                    {
                      "name": "AlreadyRequested",
                      "index": 53
                    },
                    {
                      "name": "RequestNotExist",
                      "index": 54
                    },
                    {
                      "name": "AlreadyLeaving",
                      "index": 55
                    },
                    {
                      "name": "DelegatorNotLeaving",
                      "index": 56
                    },
                    {
                      "name": "RequestNotDue",
                      "index": 57
                    },
                    {
                      "name": "LeavingNotDue",
                      "index": 58
                    },
                    {
                      "name": "DelegatorSetNotExist",
                      "index": 59
                    },
                    {
                      "name": "DelegatorLeaving",
                      "index": 60
                    },
                    {
                      "name": "DelegatorAlreadyLeaving",
                      "index": 61
                    },
                    {
                      "name": "ValidatorError",
                      "index": 62
                    },
                    {
                      "name": "AmountNone",
                      "index": 63
                    },
                    {
                      "name": "InvalidDelays",
                      "index": 64
                    },
                    {
                      "name": "OngoingTimeUnitUpdateIntervalNotExist",
                      "index": 65
                    },
                    {
                      "name": "LastTimeUpdatedOngoingTimeUnitNotExist",
                      "index": 66
                    },
                    {
                      "name": "TooFrequent",
                      "index": 67
                    },
                    {
                      "name": "DestAccountNotValid",
                      "index": 68
                    },
                    {
                      "name": "WhiteListNotExist",
                      "index": 69
                    },
                    {
                      "name": "DelegatorAlreadyTuned",
                      "index": 70
                    },
                    {
                      "name": "FeeTooHight",
                      "index": 71
                    },
                    {
                      "name": "NotEnoughBalance",
                      "index": 72
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 644,
            "type": {
              "path": [
                "xcm_interface",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FeeConvertFailed",
                      "index": 0
                    },
                    {
                      "name": "XcmExecutionFailed",
                      "index": 1
                    },
                    {
                      "name": "XcmSendFailed",
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 645,
            "type": {
              "path": [
                "bifrost_vstoken_conversion",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotEnoughBalance",
                      "index": 0
                    },
                    {
                      "name": "NotSupportTokenType",
                      "index": 1
                    },
                    {
                      "name": "CalculationOverflow",
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 646,
            "type": {
              "path": [
                "bifrost_farming",
                "rewards",
                "PoolInfo"
              ],
              "params": [
                {
                  "name": "BalanceOf",
                  "type": 6
                },
                {
                  "name": "CurrencyIdOf",
                  "type": 118
                },
                {
                  "name": "AccountIdOf",
                  "type": 0
                },
                {
                  "name": "BlockNumberFor",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "tokens_proportion",
                      "type": 647,
                      "typeName": "BTreeMap<CurrencyIdOf, Perbill>"
                    },
                    {
                      "name": "total_shares",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "basic_rewards",
                      "type": 648,
                      "typeName": "BTreeMap<CurrencyIdOf, BalanceOf>"
                    },
                    {
                      "name": "rewards",
                      "type": 649,
                      "typeName": "BTreeMap<CurrencyIdOf, (BalanceOf, BalanceOf)>"
                    },
                    {
                      "name": "state",
                      "type": 652,
                      "typeName": "PoolState"
                    },
                    {
                      "name": "keeper",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "reward_issuer",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "gauge",
                      "type": 195,
                      "typeName": "Option<PoolId>"
                    },
                    {
                      "name": "block_startup",
                      "type": 195,
                      "typeName": "Option<BlockNumberFor>"
                    },
                    {
                      "name": "min_deposit_to_start",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "after_block_to_start",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "withdraw_limit_time",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "claim_limit_time",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "withdraw_limit_count",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 647,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 118
                },
                {
                  "name": "V",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 466
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 648,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 118
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 135
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 649,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 118
                },
                {
                  "name": "V",
                  "type": 587
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 650
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 650,
            "type": {
              "def": {
                "sequence": {
                  "type": 651
                }
              }
            }
          },
          {
            "id": 651,
            "type": {
              "def": {
                "tuple": [
                  118,
                  587
                ]
              }
            }
          },
          {
            "id": 652,
            "type": {
              "path": [
                "bifrost_farming",
                "rewards",
                "PoolState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UnCharged",
                      "index": 0
                    },
                    {
                      "name": "Charged",
                      "index": 1
                    },
                    {
                      "name": "Ongoing",
                      "index": 2
                    },
                    {
                      "name": "Dead",
                      "index": 3
                    },
                    {
                      "name": "Retired",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 653,
            "type": {
              "path": [
                "bifrost_farming",
                "gauge",
                "GaugePoolInfo"
              ],
              "params": [
                {
                  "name": "BalanceOf",
                  "type": 6
                },
                {
                  "name": "CurrencyIdOf",
                  "type": 118
                },
                {
                  "name": "AccountIdOf",
                  "type": 0
                },
                {
                  "name": "BlockNumberFor",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pid",
                      "type": 4,
                      "typeName": "PoolId"
                    },
                    {
                      "name": "token",
                      "type": 118,
                      "typeName": "CurrencyIdOf"
                    },
                    {
                      "name": "keeper",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "reward_issuer",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "rewards",
                      "type": 654,
                      "typeName": "BTreeMap<CurrencyIdOf, (BalanceOf, BalanceOf, BalanceOf)>"
                    },
                    {
                      "name": "gauge_basic_rewards",
                      "type": 648,
                      "typeName": "BTreeMap<CurrencyIdOf, BalanceOf>"
                    },
                    {
                      "name": "max_block",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "gauge_amount",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "total_time_factor",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "gauge_state",
                      "type": 658,
                      "typeName": "GaugeState"
                    },
                    {
                      "name": "gauge_last_block",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 654,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 118
                },
                {
                  "name": "V",
                  "type": 655
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 656
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 655,
            "type": {
              "def": {
                "tuple": [
                  6,
                  6,
                  6
                ]
              }
            }
          },
          {
            "id": 656,
            "type": {
              "def": {
                "sequence": {
                  "type": 657
                }
              }
            }
          },
          {
            "id": 657,
            "type": {
              "def": {
                "tuple": [
                  118,
                  655
                ]
              }
            }
          },
          {
            "id": 658,
            "type": {
              "path": [
                "bifrost_farming",
                "gauge",
                "GaugeState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unbond",
                      "index": 0
                    },
                    {
                      "name": "Bonded",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 659,
            "type": {
              "path": [
                "bifrost_farming",
                "gauge",
                "GaugeInfo"
              ],
              "params": [
                {
                  "name": "BalanceOf",
                  "type": 6
                },
                {
                  "name": "BlockNumberFor",
                  "type": 4
                },
                {
                  "name": "AccountIdOf",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "gauge_amount",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "total_time_factor",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "latest_time_factor",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "claimed_time_factor",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "gauge_start_block",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "gauge_stop_block",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "gauge_last_block",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "last_claim_block",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 660,
            "type": {
              "path": [
                "bifrost_farming",
                "rewards",
                "ShareInfo"
              ],
              "params": [
                {
                  "name": "BalanceOf",
                  "type": 6
                },
                {
                  "name": "CurrencyIdOf",
                  "type": 118
                },
                {
                  "name": "BlockNumberFor",
                  "type": 4
                },
                {
                  "name": "AccountIdOf",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountIdOf"
                    },
                    {
                      "name": "share",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "withdrawn_rewards",
                      "type": 648,
                      "typeName": "BTreeMap<CurrencyIdOf, BalanceOf>"
                    },
                    {
                      "name": "claim_last_block",
                      "type": 4,
                      "typeName": "BlockNumberFor"
                    },
                    {
                      "name": "withdraw_list",
                      "type": 611,
                      "typeName": "Vec<(BlockNumberFor, BalanceOf)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 661,
            "type": {
              "path": [
                "bifrost_farming",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CalculationOverflow",
                      "index": 0
                    },
                    {
                      "name": "PoolDoesNotExist",
                      "index": 1
                    },
                    {
                      "name": "GaugePoolNotExist",
                      "index": 2
                    },
                    {
                      "name": "GaugeInfoNotExist",
                      "index": 3
                    },
                    {
                      "name": "InvalidPoolState",
                      "index": 4
                    },
                    {
                      "name": "LastGaugeNotClaim",
                      "index": 5
                    },
                    {
                      "name": "CanNotClaim",
                      "index": 6,
                      "docs": [
                        "claim_limit_time exceeded"
                      ]
                    },
                    {
                      "name": "GaugeMaxBlockOverflow",
                      "index": 7,
                      "docs": [
                        "gauge pool max_block exceeded"
                      ]
                    },
                    {
                      "name": "WithdrawLimitCountExceeded",
                      "index": 8,
                      "docs": [
                        "withdraw_limit_time exceeded"
                      ]
                    },
                    {
                      "name": "ShareInfoNotExists",
                      "index": 9
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 662,
            "type": {
              "path": [
                "bifrost_system_staking",
                "types",
                "RoundInfo"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 4,
                      "typeName": "RoundIndex"
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "length",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 663,
            "type": {
              "path": [
                "bifrost_system_staking",
                "types",
                "TokenInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "farming_staking_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "system_stakable_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "system_shadow_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "pending_redeem_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "current_config",
                      "type": 664,
                      "typeName": "TokenConfig<Balance>"
                    },
                    {
                      "name": "new_config",
                      "type": 664,
                      "typeName": "TokenConfig<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 664,
            "type": {
              "path": [
                "bifrost_system_staking",
                "types",
                "TokenConfig"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "exec_delay",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "system_stakable_farming_rate",
                      "type": 144,
                      "typeName": "Permill"
                    },
                    {
                      "name": "lptoken_rates",
                      "type": 207,
                      "typeName": "Vec<Perbill>"
                    },
                    {
                      "name": "add_or_sub",
                      "type": 34,
                      "typeName": "bool"
                    },
                    {
                      "name": "system_stakable_base",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "farming_poolids",
                      "type": 206,
                      "typeName": "Vec<PoolId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 665,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 118
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 444,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 666,
            "type": {
              "path": [
                "bifrost_system_staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidTokenConfig",
                      "index": 0,
                      "docs": [
                        "Invalid token config params"
                      ]
                    },
                    {
                      "name": "ExceedMaxTokenLen",
                      "index": 1,
                      "docs": [
                        "exceed max token len"
                      ]
                    },
                    {
                      "name": "ExceedMaxFarmingPoolidLen",
                      "index": 2,
                      "docs": [
                        "exceed max poolid len"
                      ]
                    },
                    {
                      "name": "TokenInfoNotFound",
                      "index": 3,
                      "docs": [
                        "Token info not found"
                      ]
                    },
                    {
                      "name": "PayoutFailed",
                      "index": 4,
                      "docs": [
                        "payout error"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 667,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 269
                },
                {
                  "name": "Call",
                  "type": 336
                },
                {
                  "name": "Signature",
                  "type": 668
                },
                {
                  "name": "Extra",
                  "type": 674
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 668,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 669,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 671,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 672,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 669,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 670,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 670,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 671,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 670,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 672,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 673,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 673,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 674,
            "type": {
              "def": {
                "tuple": [
                  675,
                  676,
                  677,
                  678,
                  679,
                  681,
                  682,
                  683
                ]
              }
            }
          },
          {
            "id": 675,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 676,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 677,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 678,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 679,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 680,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 680,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 681,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 63,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 682,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 683,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 68,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 684,
            "type": {
              "path": [
                "bifrost_kusama_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 7
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 15
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 210
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 211
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 208
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 213
          },
          "event": {
            "ty": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 217,
              "value": [
                224,
                209,
                169,
                62,
                1,
                0,
                0,
                0,
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                144,
                205,
                36,
                5,
                0,
                0,
                0,
                0,
                1,
                112,
                164,
                93,
                166,
                75,
                0,
                0,
                0,
                1,
                0,
                230,
                189,
                79,
                87,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                144,
                205,
                36,
                5,
                0,
                0,
                0,
                0,
                1,
                112,
                70,
                242,
                192,
                104,
                0,
                0,
                0,
                1,
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                1,
                0,
                162,
                148,
                26,
                29,
                0,
                0,
                0,
                144,
                205,
                36,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 221,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                250,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 223,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 224,
              "value": [
                28,
                98,
                105,
                102,
                114,
                111,
                115,
                116,
                28,
                98,
                105,
                102,
                114,
                111,
                115,
                116,
                1,
                0,
                0,
                0,
                186,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                60,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                4,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                1,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                1,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                234,
                147,
                227,
                241,
                111,
                61,
                105,
                98,
                2,
                0,
                0,
                0,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                248,
                119,
                70,
                143,
                76,
                160,
                232,
                38,
                1,
                0,
                0,
                0,
                96,
                174,
                212,
                60,
                181,
                36,
                86,
                241,
                1,
                0,
                0,
                0,
                220,
                101,
                84,
                104,
                216,
                57,
                65,
                32,
                1,
                0,
                0,
                0,
                198,
                123,
                71,
                216,
                72,
                221,
                21,
                103,
                1,
                0,
                0,
                0,
                13,
                148,
                184,
                12,
                23,
                134,
                48,
                240,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 107,
              "value": [
                6,
                0
              ],
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 228
          },
          "index": 0
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 229
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 8,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 1
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "entries": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 230
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The lookup from index to account."
                ]
              }
            ]
          },
          "calls": {
            "ty": 231
          },
          "event": {
            "ty": 27
          },
          "constants": [
            {
              "name": "Deposit",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit needed for reserving an index."
              ]
            }
          ],
          "error": {
            "ty": 232
          },
          "index": 2
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "entries": [
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 233
                },
                "default": [
                  0
                ],
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The relay chain block number associated with the last parachain block."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "ty": {
                  "Plain": 235
                },
                "default": [
                  0
                ],
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "ty": {
                  "Plain": 237
                },
                "default": [
                  0
                ],
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "ty": {
                  "Plain": 239
                },
                "default": [
                  0
                ],
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 243
                },
                "default": [
                  0
                ],
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "ty": {
                  "Plain": 244
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "ty": {
                  "Plain": 245
                },
                "default": [
                  0
                ],
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 248
                },
                "default": [
                  0
                ],
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 216
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 216
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next authorized upgrade, if there is one."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": {
            "ty": 250
          },
          "event": {
            "ty": 28
          },
          "constants": [],
          "error": {
            "ty": 259
          },
          "index": 5
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "entries": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 57
                },
                "default": [
                  100,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 6
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 260
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 264
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 267
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "ty": 268
          },
          "event": {
            "ty": 29
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 270
          },
          "index": 10
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 271
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 272
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 31
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 11
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 273
                },
                "default": [
                  0
                ],
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 276
          },
          "event": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "error": {
            "ty": 280
          },
          "index": 20
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 41
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 281
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 206
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 283
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 286,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 288
          },
          "event": {
            "ty": 32
          },
          "constants": [],
          "error": {
            "ty": 289
          },
          "index": 22
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 290
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current authority set."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 292
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current slot of this block.",
                  "",
                  " This will be set in `on_initialize`."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 23
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 290
                },
                "default": [
                  0
                ],
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will always",
                  " be updated to the latest AuRa authorities in `on_finalize`."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 24
        },
        {
          "name": "ParachainStaking",
          "storage": {
            "prefix": "ParachainStaking",
            "entries": [
              {
                "name": "CollatorCommission",
                "modifier": "Default",
                "ty": {
                  "Plain": 39
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Commission percent taken off of rewards for all collators"
                ]
              },
              {
                "name": "TotalSelected",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total candidates selected every round"
                ]
              },
              {
                "name": "ParachainBondInfo",
                "modifier": "Default",
                "ty": {
                  "Plain": 293
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Parachain bond config info { account, percent_of_inflation }"
                ]
              },
              {
                "name": "Round",
                "modifier": "Default",
                "ty": {
                  "Plain": 294
                },
                "default": [
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  20,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current round index and next round scheduled transition"
                ]
              },
              {
                "name": "DelegatorState",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 295
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Get delegator state associated with an account if account is delegating else None"
                ]
              },
              {
                "name": "CandidateInfo",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 300
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Get collator candidate info associated with an account if account is candidate else None"
                ]
              },
              {
                "name": "DelegatorReserveToLockMigrations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 34
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary storage item to track whether a given delegator's reserve has been migrated."
                ]
              },
              {
                "name": "CollatorReserveToLockMigrations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 34
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary storage item to track whether a given collator's reserve has been migrated."
                ]
              },
              {
                "name": "DelegationScheduledRequests",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 305
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores outstanding delegation requests per collator."
                ]
              },
              {
                "name": "TopDelegations",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 307
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Top delegations for collator candidate"
                ]
              },
              {
                "name": "BottomDelegations",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 307
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bottom delegations for collator candidate"
                ]
              },
              {
                "name": "SelectedCandidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 41
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collator candidates selected for the current round"
                ]
              },
              {
                "name": "Total",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Total capital locked by this staking pallet"
                ]
              },
              {
                "name": "CandidatePool",
                "modifier": "Default",
                "ty": {
                  "Plain": 296
                },
                "default": [
                  0
                ],
                "docs": [
                  " The pool of collator candidates, each with their total backing stake"
                ]
              },
              {
                "name": "AtStake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 308,
                    "value": 309
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Snapshot of collator delegation stake at the start of the round"
                ]
              },
              {
                "name": "DelayedPayouts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 310
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Delayed payouts"
                ]
              },
              {
                "name": "Staked",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Total counted stake for selected candidates in the round"
                ]
              },
              {
                "name": "InflationConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 311
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Inflation configuration"
                ]
              },
              {
                "name": "Points",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Total points awarded to collators for block production in the round"
                ]
              },
              {
                "name": "AwardedPts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 308,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Points for each collator per round"
                ]
              }
            ]
          },
          "calls": {
            "ty": 314
          },
          "event": {
            "ty": 33
          },
          "constants": [
            {
              "name": "MinBlocksPerRound",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum number of blocks per round"
              ]
            },
            {
              "name": "DefaultBlocksPerRound",
              "ty": 4,
              "value": [
                88,
                2,
                0,
                0
              ],
              "docs": [
                " Default number of blocks per round at genesis"
              ]
            },
            {
              "name": "LeaveCandidatesDelay",
              "ty": 4,
              "value": [
                84,
                0,
                0,
                0
              ],
              "docs": [
                " Number of rounds that candidates remain bonded before exit request is executable"
              ]
            },
            {
              "name": "CandidateBondLessDelay",
              "ty": 4,
              "value": [
                84,
                0,
                0,
                0
              ],
              "docs": [
                " Number of rounds candidate requests to decrease self-bond must wait to be executable"
              ]
            },
            {
              "name": "LeaveDelegatorsDelay",
              "ty": 4,
              "value": [
                84,
                0,
                0,
                0
              ],
              "docs": [
                " Number of rounds that delegators remain bonded before exit request is executable"
              ]
            },
            {
              "name": "RevokeDelegationDelay",
              "ty": 4,
              "value": [
                84,
                0,
                0,
                0
              ],
              "docs": [
                " Number of rounds that delegations remain bonded before revocation request is executable"
              ]
            },
            {
              "name": "DelegationBondLessDelay",
              "ty": 4,
              "value": [
                84,
                0,
                0,
                0
              ],
              "docs": [
                " Number of rounds that delegation less requests must wait before executable"
              ]
            },
            {
              "name": "RewardPaymentDelay",
              "ty": 4,
              "value": [
                2,
                0,
                0,
                0
              ],
              "docs": [
                " Number of rounds after which block authors are rewarded"
              ]
            },
            {
              "name": "MinSelectedCandidates",
              "ty": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum number of selected candidates every round"
              ]
            },
            {
              "name": "MaxTopDelegationsPerCandidate",
              "ty": 4,
              "value": [
                44,
                1,
                0,
                0
              ],
              "docs": [
                " Maximum top delegations counted per candidate"
              ]
            },
            {
              "name": "MaxBottomDelegationsPerCandidate",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum bottom delegations (not counted) per candidate"
              ]
            },
            {
              "name": "MaxDelegationsPerDelegator",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum delegations per delegator"
              ]
            },
            {
              "name": "DefaultCollatorCommission",
              "ty": 39,
              "value": [
                0,
                225,
                245,
                5
              ],
              "docs": [
                " Default commission due to collators, is `CollatorCommission` storage value in genesis"
              ]
            },
            {
              "name": "DefaultParachainBondReservePercent",
              "ty": 38,
              "value": [
                0
              ],
              "docs": [
                " Default percent of inflation set aside for parachain bond account"
              ]
            },
            {
              "name": "MinCollatorStk",
              "ty": 6,
              "value": [
                0,
                128,
                224,
                55,
                121,
                195,
                17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake required for any candidate to be in `SelectedCandidates` for the round"
              ]
            },
            {
              "name": "MinCandidateStk",
              "ty": 6,
              "value": [
                0,
                128,
                224,
                55,
                121,
                195,
                17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake required for any account to be a collator candidate"
              ]
            },
            {
              "name": "MinDelegation",
              "ty": 6,
              "value": [
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake for any registered on-chain account to delegate"
              ]
            },
            {
              "name": "MinDelegatorStk",
              "ty": 6,
              "value": [
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum stake for any registered on-chain account to be a delegator"
              ]
            },
            {
              "name": "AllowInflation",
              "ty": 34,
              "value": [
                0
              ],
              "docs": [
                " Allow inflation or not"
              ]
            },
            {
              "name": "PaymentInRound",
              "ty": 6,
              "value": [
                0,
                64,
                15,
                132,
                181,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Fix payment in one round if no inflation"
              ]
            },
            {
              "name": "ToMigrateInvulnables",
              "ty": 41,
              "value": [
                16,
                140,
                248,
                15,
                11,
                175,
                205,
                10,
                61,
                128,
                202,
                97,
                203,
                104,
                142,
                68,
                0,
                226,
                117,
                179,
                157,
                52,
                17,
                180,
                41,
                155,
                71,
                231,
                18,
                233,
                218,
                184,
                9,
                64,
                172,
                78,
                255,
                227,
                145,
                129,
                115,
                26,
                143,
                235,
                138,
                142,
                224,
                120,
                14,
                23,
                123,
                221,
                13,
                117,
                43,
                9,
                200,
                253,
                113,
                4,
                126,
                103,
                24,
                144,
                34,
                98,
                77,
                106,
                0,
                76,
                114,
                161,
                171,
                207,
                147,
                19,
                30,
                24,
                85,
                21,
                235,
                225,
                65,
                14,
                67,
                163,
                1,
                254,
                31,
                37,
                210,
                13,
                141,
                163,
                69,
                55,
                110,
                152,
                93,
                39,
                56,
                229,
                18,
                144,
                156,
                129,
                40,
                158,
                96,
                85,
                230,
                10,
                104,
                36,
                129,
                137,
                100,
                83,
                94,
                207,
                191,
                16,
                228,
                214,
                144,
                23,
                8,
                71,
                86
              ],
              "docs": [
                " Invulnables to migrate"
              ]
            },
            {
              "name": "InitSeedStk",
              "ty": 6,
              "value": [
                0,
                128,
                224,
                55,
                121,
                195,
                17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Invulnables init stake"
              ]
            },
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                115,
                116,
                97,
                107,
                101
              ],
              "docs": [
                " PalletId"
              ]
            }
          ],
          "error": {
            "ty": 316
          },
          "index": 25
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "entries": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "ty": {
                  "Plain": 317
                },
                "default": [
                  0
                ],
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 319
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 320
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 321
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 324
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "ty": {
                  "Plain": 330
                },
                "default": [
                  0
                ],
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 331
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 34
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 332
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "ty": 333
          },
          "event": {
            "ty": 40
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "ty": 4,
              "value": [
                224,
                196,
                0,
                0
              ],
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "ty": 4,
              "value": [
                224,
                196,
                0,
                0
              ],
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "ty": 34,
              "value": [
                1
              ],
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "ty": 4,
              "value": [
                132,
                3,
                0,
                0
              ],
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "ty": 4,
              "value": [
                224,
                196,
                0,
                0
              ],
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "ty": 6,
              "value": [
                0,
                88,
                71,
                248,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "error": {
            "ty": 334
          },
          "index": 30
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 335
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 336
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 477
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 41
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 337
          },
          "event": {
            "ty": 47
          },
          "constants": [],
          "error": {
            "ty": 478
          },
          "index": 31
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 479
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 336
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 477
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 41
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 338
          },
          "event": {
            "ty": 48
          },
          "constants": [],
          "error": {
            "ty": 480
          },
          "index": 32
        },
        {
          "name": "PhragmenElection",
          "storage": {
            "prefix": "PhragmenElection",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 481
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "ty": {
                  "Plain": 481
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 50
                },
                "default": [
                  0
                ],
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 483
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 339
          },
          "event": {
            "ty": 49
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 80,
              "value": [
                112,
                104,
                114,
                101,
                108,
                101,
                99,
                116
              ],
              "docs": [
                " Identifier for the elections-phragmen pallet's lock"
              ]
            },
            {
              "name": "CandidacyBond",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "ty": 6,
              "value": [
                0,
                92,
                136,
                254,
                160,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "ty": 6,
              "value": [
                0,
                0,
                235,
                8,
                191,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " Number of members to elect."
              ]
            },
            {
              "name": "DesiredRunnersUp",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " Number of runners_up to keep."
              ]
            },
            {
              "name": "TermDuration",
              "ty": 4,
              "value": [
                32,
                28,
                0,
                0
              ],
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            }
          ],
          "error": {
            "ty": 484
          },
          "index": 33
        },
        {
          "name": "CouncilMembership",
          "storage": {
            "prefix": "CouncilMembership",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 485
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "ty": 341
          },
          "event": {
            "ty": 52
          },
          "constants": [],
          "error": {
            "ty": 486
          },
          "index": 34
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 487
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "ty": 342
          },
          "event": {
            "ty": 53
          },
          "constants": [],
          "error": {
            "ty": 488
          },
          "index": 35
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "entries": [
              {
                "name": "InboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 489
                },
                "default": [
                  0
                ],
                "docs": [
                  " Status of the inbound XCMP channels."
                ]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 495,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 496
                },
                "default": [
                  0
                ],
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 499,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 57,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 500
                },
                "default": [
                  2,
                  0,
                  0,
                  0,
                  5,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  160,
                  134,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  200,
                  23,
                  168,
                  4,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 501
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              }
            ]
          },
          "calls": {
            "ty": 343
          },
          "event": {
            "ty": 54
          },
          "constants": [],
          "error": {
            "ty": 502
          },
          "index": 40
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 503
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 507,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 507,
                    "value": 8
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 507,
                    "value": 508
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 509
                },
                "default": [
                  0
                ],
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 512
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current migration's stage, if any."
                ]
              }
            ]
          },
          "calls": {
            "ty": 344
          },
          "event": {
            "ty": 58
          },
          "constants": [],
          "error": {
            "ty": 513
          },
          "index": 41
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": null,
          "event": {
            "ty": 98
          },
          "constants": [],
          "error": {
            "ty": 514
          },
          "index": 42
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "entries": [
              {
                "name": "Configuration",
                "modifier": "Default",
                "ty": {
                  "Plain": 515
                },
                "default": [
                  0,
                  228,
                  11,
                  84,
                  2,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The configuration."
                ]
              },
              {
                "name": "PageIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 516
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The page index."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 517
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queue pages."
                ]
              },
              {
                "name": "Overweight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 518
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The overweight messages."
                ]
              }
            ]
          },
          "calls": {
            "ty": 369
          },
          "event": {
            "ty": 99
          },
          "constants": [],
          "error": {
            "ty": 519
          },
          "index": 43
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 370
          },
          "event": {
            "ty": 100
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 520
          },
          "index": 50
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 521
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 102
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              }
            ]
          },
          "calls": {
            "ty": 379
          },
          "event": {
            "ty": 101
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 8,
              "value": [
                0,
                160,
                219,
                33,
                93,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "error": {
            "ty": 524
          },
          "index": 51
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 525
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 529
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 382
          },
          "event": {
            "ty": 105
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "ty": 6,
              "value": [
                0,
                28,
                237,
                174,
                146,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "ty": 6,
              "value": [
                0,
                88,
                50,
                1,
                205,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "ty": 6,
              "value": [
                0,
                28,
                237,
                174,
                146,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "ty": 6,
              "value": [
                0,
                176,
                100,
                2,
                154,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": {
            "ty": 533
          },
          "index": 52
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 534,
                    "value": 535
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of open multisig operations."
                ]
              },
              {
                "name": "Calls",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 536
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 384
          },
          "event": {
            "ty": 108
          },
          "constants": [
            {
              "name": "DepositBase",
              "ty": 6,
              "value": [
                0,
                156,
                56,
                69,
                240,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "ty": 6,
              "value": [
                0,
                0,
                235,
                8,
                191,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "ty": 107,
              "value": [
                100,
                0
              ],
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": {
            "ty": 537
          },
          "index": 53
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "entries": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 538
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 423
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 542
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "ty": {
                  "Plain": 544
                },
                "default": [
                  0
                ],
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "ty": 387
          },
          "event": {
            "ty": 110
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "ty": 6,
              "value": [
                0,
                12,
                153,
                36,
                55,
                14,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "ty": 6,
              "value": [
                0,
                176,
                100,
                2,
                154,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "ty": 6,
              "value": [
                0,
                148,
                119,
                83,
                7,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "error": {
            "ty": 548
          },
          "index": 54
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "VestingStartAt",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Start at"
                ]
              },
              {
                "name": "Cliff",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Cliff vesting"
                ]
              },
              {
                "name": "Vesting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 428
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              }
            ]
          },
          "calls": {
            "ty": 427
          },
          "event": {
            "ty": 111
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "ty": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            }
          ],
          "error": {
            "ty": 549
          },
          "index": 60
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 550
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "ty": {
                  "Plain": 551
                },
                "default": [
                  0
                ],
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 429
          },
          "event": {
            "ty": 112
          },
          "constants": [
            {
              "name": "ProposalBond",
              "ty": 144,
              "value": [
                80,
                195,
                0,
                0
              ],
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "ty": 6,
              "value": [
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "ty": 151,
              "value": [
                1,
                0,
                64,
                99,
                82,
                191,
                198,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "ty": 4,
              "value": [
                192,
                168,
                0,
                0
              ],
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "ty": 144,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121
              ],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": {
            "ty": 552
          },
          "index": 61
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "entries": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of bounty proposals that have been made."
                ]
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 553
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bounties that have been made."
                ]
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 555
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The description of each bounty."
                ]
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "ty": {
                  "Plain": 551
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bounty indices that have been approved but not yet funded."
                ]
              }
            ]
          },
          "calls": {
            "ty": 430
          },
          "event": {
            "ty": 113
          },
          "constants": [
            {
              "name": "BountyDepositBase",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for placing a bounty proposal."
              ]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "ty": 4,
              "value": [
                128,
                112,
                0,
                0
              ],
              "docs": [
                " The delay period for which a bounty beneficiary need to wait before claim the payout."
              ]
            },
            {
              "name": "BountyUpdatePeriod",
              "ty": 4,
              "value": [
                64,
                227,
                9,
                0
              ],
              "docs": [
                " Bounty duration in blocks."
              ]
            },
            {
              "name": "CuratorDepositMultiplier",
              "ty": 144,
              "value": [
                32,
                161,
                7,
                0
              ],
              "docs": [
                " The curator deposit is calculated as a percentage of the curator fee.",
                "",
                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                " `CuratorDepositMin`."
              ]
            },
            {
              "name": "CuratorDepositMax",
              "ty": 151,
              "value": [
                1,
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "CuratorDepositMin",
              "ty": 151,
              "value": [
                1,
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "BountyValueMinimum",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum value for a bounty."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "MaximumReasonLength",
              "ty": 4,
              "value": [
                0,
                64,
                0,
                0
              ],
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            }
          ],
          "error": {
            "ty": 556
          },
          "index": 62
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "entries": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 557
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "ty": 431
          },
          "event": {
            "ty": 114
          },
          "constants": [
            {
              "name": "MaximumReasonLength",
              "ty": 4,
              "value": [
                0,
                64,
                0,
                0
              ],
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            },
            {
              "name": "DataDepositPerByte",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "TipCountdown",
              "ty": 4,
              "value": [
                32,
                28,
                0,
                0
              ],
              "docs": [
                " The period for which a tip remains open after is has achieved threshold tippers."
              ]
            },
            {
              "name": "TipFindersFee",
              "ty": 38,
              "value": [
                20
              ],
              "docs": [
                " The percent of the final tip which goes to the original reporter of the tip."
              ]
            },
            {
              "name": "TipReportDepositBase",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for placing a tip report."
              ]
            }
          ],
          "error": {
            "ty": 558
          },
          "index": 63
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 559
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 561
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The preimages stored by this pallet."
                ]
              }
            ]
          },
          "calls": {
            "ty": 432
          },
          "event": {
            "ty": 115
          },
          "constants": [],
          "error": {
            "ty": 562
          },
          "index": 64
        },
        {
          "name": "XTokens",
          "storage": null,
          "calls": {
            "ty": 433
          },
          "event": {
            "ty": 116
          },
          "constants": [
            {
              "name": "SelfLocation",
              "ty": 60,
              "value": [
                1,
                1,
                0,
                69,
                31
              ],
              "docs": [
                " Self chain location."
              ]
            },
            {
              "name": "BaseXcmWeight",
              "ty": 8,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base XCM weight.",
                "",
                " The actually weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "error": {
            "ty": 563
          },
          "index": 70
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total issuance of a token type."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 564,
                    "value": 565
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 564,
                    "value": 568
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store",
                  " balances."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 564,
                    "value": 569
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 435
          },
          "event": {
            "ty": 117
          },
          "constants": [
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 572
          },
          "index": 71
        },
        {
          "name": "Currencies",
          "storage": null,
          "calls": {
            "ty": 436
          },
          "event": null,
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 118,
              "value": [
                0,
                1
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 573
          },
          "index": 72
        },
        {
          "name": "UnknownTokens",
          "storage": {
            "prefix": "UnknownTokens",
            "entries": [
              {
                "name": "ConcreteFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 574,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Concrete fungible balances under a given location and a concrete",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              },
              {
                "name": "AbstractFungibleBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 575,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Abstract fungible balances under a given location and a abstract",
                  " fungible id.",
                  "",
                  " double_map: who, asset_id => u128"
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 120
          },
          "constants": [],
          "error": {
            "ty": 576
          },
          "index": 73
        },
        {
          "name": "OrmlXcm",
          "storage": null,
          "calls": {
            "ty": 438
          },
          "event": {
            "ty": 121
          },
          "constants": [],
          "error": {
            "ty": 577
          },
          "index": 74
        },
        {
          "name": "ZenlinkProtocol",
          "storage": {
            "prefix": "ZenlinkProtocol",
            "entries": [
              {
                "name": "ForeignLedger",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 578,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Foreign foreign storage",
                  " The number of units of assets held by any given account."
                ]
              },
              {
                "name": "ForeignMeta",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 123,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " TWOX-NOTE: `AssetId` is trusted, so this is safe."
                ]
              },
              {
                "name": "ForeignList",
                "modifier": "Default",
                "ty": {
                  "Plain": 124
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "KLast",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 579,
                    "value": 580
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Refer: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol#L88",
                  " Last unliquidated protocol fee;"
                ]
              },
              {
                "name": "FeeMeta",
                "modifier": "Default",
                "ty": {
                  "Plain": 582
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " (Option<fee_receiver>, fee_point)"
                ]
              },
              {
                "name": "LiquidityPairs",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 579,
                    "value": 583
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "PairStatuses",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 579,
                    "value": 584
                  }
                },
                "default": [
                  2
                ],
                "docs": [
                  " (AssetId, AssetId) -> PairStatus"
                ]
              },
              {
                "name": "BootstrapPersonalSupply",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 588,
                    "value": 587
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "BootstrapEndStatus",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 579,
                    "value": 584
                  }
                },
                "default": [
                  2
                ],
                "docs": [
                  " End status of bootstrap",
                  "",
                  " BootstrapEndStatus: map bootstrap pair => pairStatus"
                ]
              },
              {
                "name": "BootstrapRewards",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 579,
                    "value": 589
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "BootstrapLimits",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 579,
                    "value": 589
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 439
          },
          "event": {
            "ty": 122
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                47,
                122,
                101,
                110,
                108,
                105,
                110,
                107
              ],
              "docs": [
                " This pallet id."
              ]
            }
          ],
          "error": {
            "ty": 590
          },
          "index": 80
        },
        {
          "name": "MerkleDistributor",
          "storage": {
            "prefix": "MerkleDistributor",
            "entries": [
              {
                "name": "MerkleDistributorMetadata",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 591
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "NextMerkleDistributorId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ClaimedBitMap",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 102,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "CreateWhiteSet",
                "modifier": "Default",
                "ty": {
                  "Plain": 593
                },
                "default": [
                  0
                ],
                "docs": [
                  " Accounts in the whitelist can create merkle distributor."
                ]
              }
            ]
          },
          "calls": {
            "ty": 441
          },
          "event": {
            "ty": 128
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                109,
                107,
                108,
                100,
                115
              ],
              "docs": []
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a merkel description stored on-chain."
              ]
            }
          ],
          "error": {
            "ty": 594
          },
          "index": 81
        },
        {
          "name": "FlexibleFee",
          "storage": {
            "prefix": "FlexibleFee",
            "entries": [
              {
                "name": "UserFeeChargeOrderList",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 444
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "DefaultFeeChargeOrderList",
                "modifier": "Optional",
                "ty": {
                  "Plain": 444
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 442
          },
          "event": {
            "ty": 129
          },
          "constants": [
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "NativeCurrencyId",
              "ty": 118,
              "value": [
                0,
                1
              ],
              "docs": []
            },
            {
              "name": "AlternativeFeeCurrencyId",
              "ty": 118,
              "value": [
                2,
                4
              ],
              "docs": []
            },
            {
              "name": "AltFeeCurrencyExchangeRate",
              "ty": 102,
              "value": [
                1,
                0,
                0,
                0,
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Alternative Fee currency exchange rate: ?x Fee currency: ?y Native currency"
              ]
            }
          ],
          "error": {
            "ty": 595
          },
          "index": 100
        },
        {
          "name": "Salp",
          "storage": {
            "prefix": "Salp",
            "entries": [
              {
                "name": "MultisigConfirmAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Multisig confirm account"
                ]
              },
              {
                "name": "CurrentTrieIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracker for the next available fund index"
                ]
              },
              {
                "name": "CurrentNonce",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracker for the next nonce index"
                ]
              },
              {
                "name": "Funds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 596
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Info on all of the funds."
                ]
              },
              {
                "name": "RedeemPool",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance can be redeemed to users."
                ]
              },
              {
                "name": "FailedFundsToRefund",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 598,
                    "value": 596
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 445
          },
          "event": {
            "ty": 131
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                115,
                97,
                108,
                112,
                35
              ],
              "docs": [
                " ModuleID for the crowdloan module. An appropriate value could be",
                " ```ModuleId(*b\"py/cfund\")```"
              ]
            },
            {
              "name": "MinContribution",
              "ty": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount that may be contributed into a crowdloan. Should almost certainly be",
                " at least ExistentialDeposit."
              ]
            },
            {
              "name": "RelayChainToken",
              "ty": 118,
              "value": [
                2,
                4
              ],
              "docs": []
            },
            {
              "name": "LeasePeriod",
              "ty": 4,
              "value": [
                64,
                157,
                4,
                0
              ],
              "docs": [
                " The number of blocks over which a single period lasts."
              ]
            },
            {
              "name": "VSBondValidPeriod",
              "ty": 4,
              "value": [
                192,
                75,
                3,
                0
              ],
              "docs": []
            },
            {
              "name": "ReleaseCycle",
              "ty": 4,
              "value": [
                32,
                28,
                0,
                0
              ],
              "docs": [
                " The time interval from 1:1 redeem-pool to bancor-pool to release."
              ]
            },
            {
              "name": "ReleaseRatio",
              "ty": 38,
              "value": [
                50
              ],
              "docs": [
                " The release ratio from the 1:1 redeem-pool to the bancor-pool per cycle.",
                "",
                " **NOTE: THE RELEASE RATIO MUST BE IN [0, 1].**"
              ]
            },
            {
              "name": "RemoveKeysLimit",
              "ty": 4,
              "value": [
                244,
                1,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "SlotLength",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "BuybackPalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                115,
                97,
                108,
                112,
                99
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 599
          },
          "index": 105
        },
        {
          "name": "LiquidityMiningDOT",
          "storage": {
            "prefix": "LiquidityMiningDOT",
            "entries": [
              {
                "name": "NextPoolId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ChargedPoolIds",
                "modifier": "Default",
                "ty": {
                  "Plain": 600
                },
                "default": [
                  0
                ],
                "docs": [
                  " The storage is used to store pool-ids which point to the Pools at `PoolState::Charged`.",
                  "",
                  " Actually, the pools(that the storage points to) are pending to be activated by `Hook`;",
                  " The activation means converting the pools from `PoolState::Charged` to `PoolState::Ongoing`",
                  " after the conditions that are set at the pool-creation stage are met."
                ]
              },
              {
                "name": "TotalPoolInfosV200",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 601
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TotalDepositDataV200",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 308,
                    "value": 607
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "PalletVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 613
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 448
          },
          "event": {
            "ty": 132
          },
          "constants": [
            {
              "name": "RelayChainTokenSymbol",
              "ty": 119,
              "value": [
                3
              ],
              "docs": [
                " The value used to construct vsbond when creating a farming-liquidity-pool"
              ]
            },
            {
              "name": "MaximumDepositInPool",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                232,
                60,
                128,
                208,
                159,
                60,
                46,
                59,
                3,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit of a liquidity-pool should be less than the value"
              ]
            },
            {
              "name": "MinimumDepositOfUser",
              "ty": 6,
              "value": [
                64,
                66,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount which be deposited to a liquidity-pool should be greater than the value"
              ]
            },
            {
              "name": "MinimumRewardPerBlock",
              "ty": 6,
              "value": [
                232,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of reward which will be released per block should be greater than the value"
              ]
            },
            {
              "name": "MinimumDuration",
              "ty": 4,
              "value": [
                44,
                1,
                0,
                0
              ],
              "docs": [
                " The duration of a liquidity-pool should be greater than the value"
              ]
            },
            {
              "name": "MaximumCharged",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The count of liquidity-pool charged should be less than the value"
              ]
            },
            {
              "name": "MaximumOptionRewards",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " The count of option rewards should be less than the value"
              ]
            },
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                108,
                109,
                100,
                111,
                116
              ],
              "docs": [
                " ModuleID for creating sub account"
              ]
            }
          ],
          "error": {
            "ty": 614
          },
          "index": 107
        },
        {
          "name": "LiquidityMining",
          "storage": {
            "prefix": "LiquidityMining",
            "entries": [
              {
                "name": "NextPoolId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ChargedPoolIds",
                "modifier": "Default",
                "ty": {
                  "Plain": 600
                },
                "default": [
                  0
                ],
                "docs": [
                  " The storage is used to store pool-ids which point to the Pools at `PoolState::Charged`.",
                  "",
                  " Actually, the pools(that the storage points to) are pending to be activated by `Hook`;",
                  " The activation means converting the pools from `PoolState::Charged` to `PoolState::Ongoing`",
                  " after the conditions that are set at the pool-creation stage are met."
                ]
              },
              {
                "name": "TotalPoolInfosV200",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 601
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TotalDepositDataV200",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 308,
                    "value": 607
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "PalletVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 613
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 450
          },
          "event": {
            "ty": 137
          },
          "constants": [
            {
              "name": "RelayChainTokenSymbol",
              "ty": 119,
              "value": [
                4
              ],
              "docs": [
                " The value used to construct vsbond when creating a farming-liquidity-pool"
              ]
            },
            {
              "name": "MaximumDepositInPool",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                232,
                60,
                128,
                208,
                159,
                60,
                46,
                59,
                3,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit of a liquidity-pool should be less than the value"
              ]
            },
            {
              "name": "MinimumDepositOfUser",
              "ty": 6,
              "value": [
                64,
                66,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount which be deposited to a liquidity-pool should be greater than the value"
              ]
            },
            {
              "name": "MinimumRewardPerBlock",
              "ty": 6,
              "value": [
                232,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of reward which will be released per block should be greater than the value"
              ]
            },
            {
              "name": "MinimumDuration",
              "ty": 4,
              "value": [
                44,
                1,
                0,
                0
              ],
              "docs": [
                " The duration of a liquidity-pool should be greater than the value"
              ]
            },
            {
              "name": "MaximumCharged",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The count of liquidity-pool charged should be less than the value"
              ]
            },
            {
              "name": "MaximumOptionRewards",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " The count of option rewards should be less than the value"
              ]
            },
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                108,
                109,
                35,
                35,
                35
              ],
              "docs": [
                " ModuleID for creating sub account"
              ]
            }
          ],
          "error": {
            "ty": 615
          },
          "index": 108
        },
        {
          "name": "TokenIssuer",
          "storage": {
            "prefix": "TokenIssuer",
            "entries": [
              {
                "name": "IssueWhiteList",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 41
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Accounts in the whitelist can issue the corresponding Currency."
                ]
              },
              {
                "name": "TransferWhiteList",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 41
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Accounts in the whitelist can transfer the corresponding Currency."
                ]
              }
            ]
          },
          "calls": {
            "ty": 451
          },
          "event": {
            "ty": 138
          },
          "constants": [],
          "error": {
            "ty": 616
          },
          "index": 109
        },
        {
          "name": "LighteningRedeem",
          "storage": {
            "prefix": "LighteningRedeem",
            "entries": [
              {
                "name": "PoolAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The remaining amount which can be exchanged for"
                ]
              },
              {
                "name": "TokenReleasePerDay",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  224,
                  87,
                  235,
                  72,
                  27,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " token amount that is released everyday."
                ]
              },
              {
                "name": "StartEndReleaseBlock",
                "modifier": "Default",
                "ty": {
                  "Plain": 102
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Token release start block"
                ]
              },
              {
                "name": "ExchangePriceDiscount",
                "modifier": "Default",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  90
                ],
                "docs": [
                  " Exchange price discount: vsbond + vstoken => token"
                ]
              }
            ]
          },
          "calls": {
            "ty": 452
          },
          "event": {
            "ty": 139
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                108,
                116,
                110,
                114,
                100
              ],
              "docs": [
                " ModuleID for creating sub account"
              ]
            }
          ],
          "error": {
            "ty": 617
          },
          "index": 110
        },
        {
          "name": "SalpLite",
          "storage": {
            "prefix": "SalpLite",
            "entries": [
              {
                "name": "MultisigConfirmAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Multisig confirm account"
                ]
              },
              {
                "name": "CurrentTrieIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracker for the next available fund index"
                ]
              },
              {
                "name": "Funds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 618
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Info on all of the funds."
                ]
              },
              {
                "name": "FailedFundsToRefund",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 598,
                    "value": 618
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Info on all of the fail-to-continue funds."
                ]
              },
              {
                "name": "RedeemPool",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance can be redeemed to users."
                ]
              }
            ]
          },
          "calls": {
            "ty": 453
          },
          "event": {
            "ty": 140
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                115,
                97,
                108,
                112,
                108
              ],
              "docs": [
                " ModuleID for the crowdloan module. An appropriate value could be",
                " ```ModuleId(*b\"py/cfund\")```"
              ]
            },
            {
              "name": "MinContribution",
              "ty": 6,
              "value": [
                0,
                116,
                59,
                164,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount that may be contributed into a crowdloan. Should almost certainly be",
                " at least ExistentialDeposit."
              ]
            },
            {
              "name": "RelayChainToken",
              "ty": 118,
              "value": [
                2,
                3
              ],
              "docs": []
            },
            {
              "name": "LeasePeriod",
              "ty": 4,
              "value": [
                128,
                58,
                9,
                0
              ],
              "docs": [
                " The number of blocks over which a single period lasts."
              ]
            },
            {
              "name": "ReleaseCycle",
              "ty": 4,
              "value": [
                32,
                28,
                0,
                0
              ],
              "docs": [
                " The time interval from 1:1 redeem-pool to bancor-pool to release."
              ]
            },
            {
              "name": "ReleaseRatio",
              "ty": 38,
              "value": [
                50
              ],
              "docs": [
                " The release ratio from the 1:1 redeem-pool to the bancor-pool per cycle."
              ]
            },
            {
              "name": "BatchKeysLimit",
              "ty": 4,
              "value": [
                244,
                1,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "SlotLength",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 620
          },
          "index": 111
        },
        {
          "name": "CallSwitchgear",
          "storage": {
            "prefix": "CallSwitchgear",
            "entries": [
              {
                "name": "OverallToggle",
                "modifier": "Default",
                "ty": {
                  "Plain": 34
                },
                "default": [
                  0
                ],
                "docs": [
                  " Controls whether or not all of the pallets are banned."
                ]
              },
              {
                "name": "SwitchedOffTransactions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 215,
                    "value": 44
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "DisabledTransfers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 44
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 456
          },
          "event": {
            "ty": 141
          },
          "constants": [],
          "error": {
            "ty": 621
          },
          "index": 112
        },
        {
          "name": "VSBondAuction",
          "storage": {
            "prefix": "VSBondAuction",
            "entries": [
              {
                "name": "NextOrderId",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "UserOrderIds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 622,
                    "value": 623
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TotalOrderInfos",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 625
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TransactionFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 626
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " transaction fee rate[sellFee, buyFee]"
                ]
              }
            ]
          },
          "calls": {
            "ty": 457
          },
          "event": {
            "ty": 142
          },
          "constants": [
            {
              "name": "InvoicingCurrency",
              "ty": 118,
              "value": [
                2,
                4
              ],
              "docs": [
                " The currency type that buyer to pay"
              ]
            },
            {
              "name": "MaximumOrderInTrade",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The amount of orders in-trade that user can hold"
              ]
            },
            {
              "name": "MinimumAmount",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The sale or buy quantity needs to be greater than `MinimumSupply` to create an order"
              ]
            },
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                118,
                115,
                98,
                110,
                100
              ],
              "docs": [
                " ModuleID for creating sub account"
              ]
            },
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The account that transaction fees go into"
              ]
            }
          ],
          "error": {
            "ty": 627
          },
          "index": 113
        },
        {
          "name": "AssetRegistry",
          "storage": {
            "prefix": "AssetRegistry",
            "entries": [
              {
                "name": "NextForeignAssetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Next available Foreign AssetId ID.",
                  "",
                  " NextForeignAssetId: ForeignAssetId"
                ]
              },
              {
                "name": "CurrencyIdToLocations",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 60
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The storages for MultiLocations.",
                  "",
                  " CurrencyIdToLocations: map CurrencyId => Option<MultiLocation>"
                ]
              },
              {
                "name": "LocationToCurrencyIds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 60,
                    "value": 118
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The storages for CurrencyIds.",
                  "",
                  " LocationToCurrencyIds: map MultiLocation => Option<CurrencyId>"
                ]
              },
              {
                "name": "AssetMetadatas",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 147,
                    "value": 146
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The storages for AssetMetadatas.",
                  "",
                  " AssetMetadatas: map AssetIds => Option<AssetMetadata>"
                ]
              }
            ]
          },
          "calls": {
            "ty": 458
          },
          "event": {
            "ty": 145
          },
          "constants": [],
          "error": {
            "ty": 628
          },
          "index": 114
        },
        {
          "name": "VtokenMinting",
          "storage": {
            "prefix": "VtokenMinting",
            "entries": [
              {
                "name": "Fees",
                "modifier": "Default",
                "ty": {
                  "Plain": 626
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "TokenPool",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "UnlockDuration",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 149
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "OngoingTimeUnit",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 149
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "MinimumMint",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "MinimumRedeem",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "TokenUnlockNextId",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "TokenUnlockLedger",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 629,
                    "value": 630
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "UserUnlockLedger",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 564,
                    "value": 631
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TimeUnitUnlockLedger",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 633,
                    "value": 634
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TokenToRebond",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "MinTimeUnit",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 149
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "UnlockingTotal",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "HookIterationLimit",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 459
          },
          "event": {
            "ty": 148
          },
          "constants": [
            {
              "name": "MaximumUnlockIdOfUser",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of mint"
              ]
            },
            {
              "name": "MaximumUnlockIdOfTimeUnit",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "EntranceAccount",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                118,
                116,
                107,
                105,
                110
              ],
              "docs": []
            },
            {
              "name": "ExitAccount",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                118,
                116,
                111,
                117,
                116
              ],
              "docs": []
            },
            {
              "name": "FeeAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 636
          },
          "index": 115
        },
        {
          "name": "Slp",
          "storage": {
            "prefix": "Slp",
            "entries": [
              {
                "name": "XcmDestWeightAndFee",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 637,
                    "value": 160
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The dest weight limit and fee for execution XCM msg sended out. Must be",
                  " sufficient, otherwise the execution of XCM msg on the dest chain will fail.",
                  "",
                  " XcmDestWeightAndFee: DoubleMap: CurrencyId, XcmOperation => (Weight, Balance)"
                ]
              },
              {
                "name": "OperateOrigins",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " One operate origin(can be a multisig account) for a currency. An operating origins are",
                  " normal account in Bifrost chain."
                ]
              },
              {
                "name": "FeeSources",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 163
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Origins and Amounts for the staking operating account fee supplement. An operating account",
                  " is identified in MultiLocation format."
                ]
              },
              {
                "name": "HostingFees",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 192
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Hosting fee percentage and beneficiary account for different chains"
                ]
              },
              {
                "name": "DelegatorsIndex2Multilocation",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 638,
                    "value": 60
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Delegators in service. A delegator is identified in MultiLocation format.",
                  " Currency Id + Sub-account index => MultiLocation"
                ]
              },
              {
                "name": "DelegatorsMultilocation2Index",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 639,
                    "value": 107
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Delegators in service. Currency Id + MultiLocation => Sub-account index"
                ]
              },
              {
                "name": "DelegatorNextIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 107
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": [
                  " Next index of different currency delegators."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 156
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validator in service. A validator is identified in MultiLocation format."
                ]
              },
              {
                "name": "ValidatorsByDelegator",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 639,
                    "value": 156
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validators for each delegator. CurrencyId + Delegator => Vec<Validator>"
                ]
              },
              {
                "name": "ValidatorsByDelegatorXcmUpdateQueue",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 640
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "DelegatorLedgers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 639,
                    "value": 165
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Delegator ledgers. A delegator is identified in MultiLocation format."
                ]
              },
              {
                "name": "DelegatorLedgerXcmUpdateQueue",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 641
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "MinimumsAndMaximums",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 188
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Minimum and Maximum constraints for different chains."
                ]
              },
              {
                "name": "CurrencyDelays",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 190
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " TimeUnit delay params for different chains."
                ]
              },
              {
                "name": "DelegatorLatestTuneRecord",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 639,
                    "value": 149
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A delegator's tuning record of exchange rate for the current time unit.",
                  " Currency Id + Delegator Id => latest tuned TimeUnit"
                ]
              },
              {
                "name": "CurrencyLatestTuneRecord",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 642
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Currency's tuning record of exchange rate for the current time unit.",
                  " Currency Id => (latest tuned TimeUnit, number of tuning times)"
                ]
              },
              {
                "name": "CurrencyTuneExchangeRateLimit",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 194
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " For each currencyId: how many times that a Currency's all delegators can tune the exchange",
                  " rate for a single time unit, and how much at most each time can tune the",
                  " exchange rate"
                ]
              },
              {
                "name": "DelegationsOccupied",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 34
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " reflect if all delegations are on a decrease/revoke status. If yes, then new user redeeming",
                  " is unaccepted."
                ]
              },
              {
                "name": "LastTimeUpdatedOngoingTimeUnit",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "OngoingTimeUnitUpdateInterval",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "SupplementFeeAccountWhitelist",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 118,
                    "value": 156
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 460
          },
          "event": {
            "ty": 150
          },
          "constants": [
            {
              "name": "MaxTypeEntryPerBlock",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of entries to be confirmed in a block for update queue in the",
                " on_initialize queue."
              ]
            },
            {
              "name": "MaxRefundPerBlock",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 643
          },
          "index": 116
        },
        {
          "name": "XcmInterface",
          "storage": {
            "prefix": "XcmInterface",
            "entries": [
              {
                "name": "XcmDestWeightAndFee",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 197,
                    "value": 160
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The dest weight limit and fee for execution XCM msg sended by XcmInterface. Must be",
                  " sufficient, otherwise the execution of XCM msg on relaychain will fail.",
                  "",
                  " XcmDestWeightAndFee: map: XcmInterfaceOperation => (Weight, Balance)"
                ]
              },
              {
                "name": "CurrentNonce",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracker for the next nonce index"
                ]
              }
            ]
          },
          "calls": {
            "ty": 461
          },
          "event": {
            "ty": 196
          },
          "constants": [
            {
              "name": "RelaychainCurrencyId",
              "ty": 118,
              "value": [
                2,
                4
              ],
              "docs": [
                " The currency id of the RelayChain"
              ]
            },
            {
              "name": "ParachainSovereignAccount",
              "ty": 0,
              "value": [
                112,
                97,
                114,
                97,
                209,
                7,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The account of parachain on the relaychain."
              ]
            },
            {
              "name": "RelayNetwork",
              "ty": 64,
              "value": [
                3
              ],
              "docs": []
            },
            {
              "name": "StatemineTransferFee",
              "ty": 6,
              "value": [
                0,
                40,
                107,
                238,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "StatemineTransferWeight",
              "ty": 8,
              "value": [
                0,
                40,
                107,
                238,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "ContributionFee",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "ContributionWeight",
              "ty": 8,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 644
          },
          "index": 117
        },
        {
          "name": "VstokenConversion",
          "storage": {
            "prefix": "VstokenConversion",
            "entries": [
              {
                "name": "RelaychainLease",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ExchangeRate",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 200,
                    "value": 201
                  }
                },
                "default": [
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ExchangeFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 199
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " exchange fee"
                ]
              }
            ]
          },
          "calls": {
            "ty": 464
          },
          "event": {
            "ty": 198
          },
          "constants": [
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "VsbondAccount",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                115,
                97,
                108,
                112,
                98
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 645
          },
          "index": 118
        },
        {
          "name": "Farming",
          "storage": {
            "prefix": "Farming",
            "entries": [
              {
                "name": "PoolNextId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "GaugePoolNextId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "RetireLimit",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "PoolInfos",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 646
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Record reward pool info.",
                  "",
                  " map PoolId => PoolInfo"
                ]
              },
              {
                "name": "GaugePoolInfos",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 653
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Record gauge farming pool info.",
                  "",
                  " map PoolId => GaugePoolInfo"
                ]
              },
              {
                "name": "GaugeInfos",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 308,
                    "value": 659
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "SharesAndWithdrawnRewards",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 308,
                    "value": 660
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Record share amount, reward currency and withdrawn reward amount for",
                  " specific `AccountId` under `PoolId`.",
                  "",
                  " double_map (PoolId, AccountId) => ShareInfo"
                ]
              }
            ]
          },
          "calls": {
            "ty": 465
          },
          "event": {
            "ty": 202
          },
          "constants": [
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "Keeper",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                102,
                109,
                107,
                112,
                114
              ],
              "docs": [
                " ModuleID for creating sub account"
              ]
            },
            {
              "name": "RewardIssuer",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                102,
                109,
                114,
                105,
                114
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 661
          },
          "index": 119
        },
        {
          "name": "SystemStaking",
          "storage": {
            "prefix": "SystemStaking",
            "entries": [
              {
                "name": "Round",
                "modifier": "Optional",
                "ty": {
                  "Plain": 662
                },
                "default": [
                  0
                ],
                "docs": [
                  " Currend Round Information"
                ]
              },
              {
                "name": "TokenStatus",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 118,
                    "value": 663
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TokenList",
                "modifier": "Default",
                "ty": {
                  "Plain": 665
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 472
          },
          "event": {
            "ty": 205
          },
          "constants": [
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                98,
                102,
                47,
                116,
                114,
                115,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxTokenLen",
              "ty": 4,
              "value": [
                244,
                1,
                0,
                0
              ],
              "docs": [
                " Max token length"
              ]
            },
            {
              "name": "MaxFarmingPoolIdLen",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Max farming poolid length"
              ]
            },
            {
              "name": "PalletId",
              "ty": 315,
              "value": [
                98,
                102,
                47,
                115,
                121,
                115,
                115,
                116
              ],
              "docs": [
                " ModuleID for creating sub account"
              ]
            },
            {
              "name": "BlocksPerRound",
              "ty": 4,
              "value": [
                220,
                5,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 666
          },
          "index": 120
        }
      ],
      "extrinsic": {
        "ty": 667,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckNonZeroSender",
            "ty": 675,
            "additional_signed": 44
          },
          {
            "identifier": "CheckSpecVersion",
            "ty": 676,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 677,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 678,
            "additional_signed": 9
          },
          {
            "identifier": "CheckMortality",
            "ty": 679,
            "additional_signed": 9
          },
          {
            "identifier": "CheckNonce",
            "ty": 681,
            "additional_signed": 44
          },
          {
            "identifier": "CheckWeight",
            "ty": 682,
            "additional_signed": 44
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 683,
            "additional_signed": 44
          }
        ]
      },
      "ty": 684
    }
  }
]
